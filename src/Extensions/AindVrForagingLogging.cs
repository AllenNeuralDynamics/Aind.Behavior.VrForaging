//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema.Logging
{
    #pragma warning disable // Disable all warnings

    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SoftwareEvent
    {
    
        private double _timestamp;
    
        private SoftwareEventTimestampSource _timestampSource = AindVrForagingDataSchema.Logging.SoftwareEventTimestampSource.Harp;
    
        private int _index;
    
        private string _name;
    
        private object _data;
    
        private SoftwareEventDataType _dataType;
    
        [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timestamp")]
        public double Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                _timestamp = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("timestampSource")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timestampSource")]
        public SoftwareEventTimestampSource TimestampSource
        {
            get
            {
                return _timestampSource;
            }
            set
            {
                _timestampSource = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("index")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("data")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="data")]
        public object Data
        {
            get
            {
                return _data;
            }
            set
            {
                _data = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dataType")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dataType")]
        public SoftwareEventDataType DataType
        {
            get
            {
                return _dataType;
            }
            set
            {
                _dataType = value;
            }
        }
    
        public System.IObservable<SoftwareEvent> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new SoftwareEvent
                {
                    Timestamp = _timestamp,
                    TimestampSource = _timestampSource,
                    Index = _index,
                    Name = _name,
                    Data = _data,
                    DataType = _dataType
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpLogger
    {
    
        private string _logName = "harpDevice";
    
        private string _extension = "bin";
    
        [Newtonsoft.Json.JsonPropertyAttribute("logName")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="logName")]
        public string LogName
        {
            get
            {
                return _logName;
            }
            set
            {
                _logName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("extension")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="extension")]
        public string Extension
        {
            get
            {
                return _extension;
            }
            set
            {
                _extension = value;
            }
        }
    
        public System.IObservable<HarpLogger> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new HarpLogger
                {
                    LogName = _logName,
                    Extension = _extension
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SpinnakerLogger
    {
    
        private string _logName = "camera";
    
        private double _encodingFrameRate = 60D;
    
        private string _videoExtension = "avi";
    
        private string _metadataExtension = "csv";
    
        private string _codec = "FMP4";
    
        [Newtonsoft.Json.JsonPropertyAttribute("logName")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="logName")]
        public string LogName
        {
            get
            {
                return _logName;
            }
            set
            {
                _logName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("encodingFrameRate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="encodingFrameRate")]
        public double EncodingFrameRate
        {
            get
            {
                return _encodingFrameRate;
            }
            set
            {
                _encodingFrameRate = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("videoExtension")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="videoExtension")]
        public string VideoExtension
        {
            get
            {
                return _videoExtension;
            }
            set
            {
                _videoExtension = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("metadataExtension")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadataExtension")]
        public string MetadataExtension
        {
            get
            {
                return _metadataExtension;
            }
            set
            {
                _metadataExtension = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("codec")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="codec")]
        public string Codec
        {
            get
            {
                return _codec;
            }
            set
            {
                _codec = value;
            }
        }
    
        public System.IObservable<SpinnakerLogger> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new SpinnakerLogger
                {
                    LogName = _logName,
                    EncodingFrameRate = _encodingFrameRate,
                    VideoExtension = _videoExtension,
                    MetadataExtension = _metadataExtension,
                    Codec = _codec
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingLogging
    {
    
        private string _placeholder;
    
        [Newtonsoft.Json.JsonPropertyAttribute("placeholder")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="placeholder")]
        public string Placeholder
        {
            get
            {
                return _placeholder;
            }
            set
            {
                _placeholder = value;
            }
        }
    
        public System.IObservable<AindVrForagingLogging> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new AindVrForagingLogging
                {
                    Placeholder = _placeholder
                }));
        }
    }


    public enum SoftwareEventTimestampSource
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="harp")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harp")]
        Harp = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="render")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="render")]
        Render = 1,
    }


    public enum SoftwareEventDataType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="string")]
        String = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="number")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number")]
        Number = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="boolean")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="boolean")]
        Boolean = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="object")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="object")]
        Object = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="array")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="array")]
        Array = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="null")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="null")]
        Null = 5,
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<SoftwareEvent> source)
        {
            return Process<SoftwareEvent>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpLogger> source)
        {
            return Process<HarpLogger>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerLogger> source)
        {
            return Process<SpinnakerLogger>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingLogging> source)
        {
            return Process<AindVrForagingLogging>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SoftwareEvent>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpLogger>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerLogger>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingLogging>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingLogging>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<SoftwareEvent> source)
        {
            return Process<SoftwareEvent>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpLogger> source)
        {
            return Process<HarpLogger>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerLogger> source)
        {
            return Process<SpinnakerLogger>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingLogging> source)
        {
            return Process<AindVrForagingLogging>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SoftwareEvent>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpLogger>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerLogger>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingLogging>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingLogging>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}