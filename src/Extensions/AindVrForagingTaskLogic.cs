//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema.TaskLogic
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingTaskParameters
    {
    
        private double? _rngSeed;
    
        private string _stageAlias;
    
        private System.Collections.Generic.IDictionary<string, NumericalUpdater> _updaters;
    
        private EnvironmentStatistics _environmentStatistics = new EnvironmentStatistics();
    
        private TaskModeSettings _taskModeSettings;
    
        private OperationControl _operationControl = new OperationControl();
    
        public AindVrForagingTaskParameters()
        {
        }
    
        protected AindVrForagingTaskParameters(AindVrForagingTaskParameters other)
        {
            _rngSeed = other._rngSeed;
            _stageAlias = other._stageAlias;
            _updaters = other._updaters;
            _environmentStatistics = other._environmentStatistics;
            _taskModeSettings = other._taskModeSettings;
            _operationControl = other._operationControl;
        }
    
        /// <summary>
        /// Seed of the random number generator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rng_seed")]
        [System.ComponentModel.DescriptionAttribute("Seed of the random number generator")]
        public double? RngSeed
        {
            get
            {
                return _rngSeed;
            }
            set
            {
                _rngSeed = value;
            }
        }
    
        /// <summary>
        /// Alias name used for the task stage
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stage_alias")]
        [System.ComponentModel.DescriptionAttribute("Alias name used for the task stage")]
        public string StageAlias
        {
            get
            {
                return _stageAlias;
            }
            set
            {
                _stageAlias = value;
            }
        }
    
        /// <summary>
        /// List of numerical updaters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("updaters")]
        [System.ComponentModel.DescriptionAttribute("List of numerical updaters")]
        public System.Collections.Generic.IDictionary<string, NumericalUpdater> Updaters
        {
            get
            {
                return _updaters;
            }
            set
            {
                _updaters = value;
            }
        }
    
        /// <summary>
        /// Statistics of the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("environment_statistics", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Statistics of the environment")]
        public EnvironmentStatistics EnvironmentStatistics
        {
            get
            {
                return _environmentStatistics;
            }
            set
            {
                _environmentStatistics = value;
            }
        }
    
        /// <summary>
        /// Settings of the task stage
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("task_mode_settings")]
        [System.ComponentModel.DescriptionAttribute("Settings of the task stage")]
        public TaskModeSettings TaskModeSettings
        {
            get
            {
                return _taskModeSettings;
            }
            set
            {
                _taskModeSettings = value;
            }
        }
    
        /// <summary>
        /// Control of the operation
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation_control", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Control of the operation")]
        public OperationControl OperationControl
        {
            get
            {
                return _operationControl;
            }
            set
            {
                _operationControl = value;
            }
        }
    
        public System.IObservable<AindVrForagingTaskParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindVrForagingTaskParameters(this)));
        }
    
        public System.IObservable<AindVrForagingTaskParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindVrForagingTaskParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("rng_seed = " + _rngSeed + ", ");
            stringBuilder.Append("stage_alias = " + _stageAlias + ", ");
            stringBuilder.Append("updaters = " + _updaters + ", ");
            stringBuilder.Append("environment_statistics = " + _environmentStatistics + ", ");
            stringBuilder.Append("task_mode_settings = " + _taskModeSettings + ", ");
            stringBuilder.Append("operation_control = " + _operationControl);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AudioControl
    {
    
        private double _duration = 0.2D;
    
        private double _frequency = 1000D;
    
        public AudioControl()
        {
        }
    
        protected AudioControl(AudioControl other)
        {
            _duration = other._duration;
            _frequency = other._frequency;
        }
    
        /// <summary>
        /// Duration
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("duration")]
        [System.ComponentModel.DescriptionAttribute("Duration")]
        public double Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        /// <summary>
        /// Frequency
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frequency")]
        [System.ComponentModel.DescriptionAttribute("Frequency")]
        public double Frequency
        {
            get
            {
                return _frequency;
            }
            set
            {
                _frequency = value;
            }
        }
    
        public System.IObservable<AudioControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AudioControl(this)));
        }
    
        public System.IObservable<AudioControl> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AudioControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("duration = " + _duration + ", ");
            stringBuilder.Append("frequency = " + _frequency);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BetaDistribution : Distribution
    {
    
        private BetaDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public BetaDistribution()
        {
        }
    
        protected BetaDistribution(BetaDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public BetaDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<BetaDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BetaDistribution(this)));
        }
    
        public System.IObservable<BetaDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BetaDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BetaDistributionParameters
    {
    
        private string _family = "Beta";
    
        private double _alpha = 5D;
    
        private double _beta = 5D;
    
        public BetaDistributionParameters()
        {
        }
    
        protected BetaDistributionParameters(BetaDistributionParameters other)
        {
            _family = other._family;
            _alpha = other._alpha;
            _beta = other._beta;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Alpha parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("alpha")]
        [System.ComponentModel.DescriptionAttribute("Alpha parameter of the distribution")]
        public double Alpha
        {
            get
            {
                return _alpha;
            }
            set
            {
                _alpha = value;
            }
        }
    
        /// <summary>
        /// Beta parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("beta")]
        [System.ComponentModel.DescriptionAttribute("Beta parameter of the distribution")]
        public double Beta
        {
            get
            {
                return _beta;
            }
            set
            {
                _beta = value;
            }
        }
    
        public System.IObservable<BetaDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BetaDistributionParameters(this)));
        }
    
        public System.IObservable<BetaDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BetaDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("alpha = " + _alpha + ", ");
            stringBuilder.Append("beta = " + _beta);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BinomialDistribution : Distribution
    {
    
        private BinomialDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public BinomialDistribution()
        {
        }
    
        protected BinomialDistribution(BinomialDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public BinomialDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<BinomialDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BinomialDistribution(this)));
        }
    
        public System.IObservable<BinomialDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BinomialDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BinomialDistributionParameters
    {
    
        private string _family = "Binomial";
    
        private int _n = 1;
    
        private double _p = 0.5D;
    
        public BinomialDistributionParameters()
        {
        }
    
        protected BinomialDistributionParameters(BinomialDistributionParameters other)
        {
            _family = other._family;
            _n = other._n;
            _p = other._p;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Number of trials
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("n")]
        [System.ComponentModel.DescriptionAttribute("Number of trials")]
        public int N
        {
            get
            {
                return _n;
            }
            set
            {
                _n = value;
            }
        }
    
        /// <summary>
        /// Probability of success
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("p")]
        [System.ComponentModel.DescriptionAttribute("Probability of success")]
        public double P
        {
            get
            {
                return _p;
            }
            set
            {
                _p = value;
            }
        }
    
        public System.IObservable<BinomialDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BinomialDistributionParameters(this)));
        }
    
        public System.IObservable<BinomialDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BinomialDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("n = " + _n + ", ");
            stringBuilder.Append("p = " + _p);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ConstantFunction : RewardFunction
    {
    
        private double _value = 1D;
    
        public ConstantFunction()
        {
        }
    
        protected ConstantFunction(ConstantFunction other) : 
                base(other)
        {
            _value = other._value;
        }
    
        /// <summary>
        /// Value of the function
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("value")]
        [System.ComponentModel.DescriptionAttribute("Value of the function")]
        public double Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        public System.IObservable<ConstantFunction> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ConstantFunction(this)));
        }
    
        public System.IObservable<ConstantFunction> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ConstantFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("value = " + _value);
            return true;
        }
    }


    /// <summary>
    /// This class is not currently implemented
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("This class is not currently implemented")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DebugSettings : TaskModeSettings
    {
    
        private System.Collections.Generic.List<VisualCorridor> _visualCorridors = new System.Collections.Generic.List<VisualCorridor>();
    
        private System.Collections.Generic.List<VirtualSite> _virtualSites = new System.Collections.Generic.List<VirtualSite>();
    
        public DebugSettings()
        {
        }
    
        protected DebugSettings(DebugSettings other) : 
                base(other)
        {
            _visualCorridors = other._visualCorridors;
            _virtualSites = other._virtualSites;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("visual_corridors", Required=Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.List<VisualCorridor> VisualCorridors
        {
            get
            {
                return _visualCorridors;
            }
            set
            {
                _visualCorridors = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("virtual_sites", Required=Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.List<VirtualSite> VirtualSites
        {
            get
            {
                return _virtualSites;
            }
            set
            {
                _virtualSites = value;
            }
        }
    
        public System.IObservable<DebugSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DebugSettings(this)));
        }
    
        public System.IObservable<DebugSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DebugSettings(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("visual_corridors = " + _visualCorridors + ", ");
            stringBuilder.Append("virtual_sites = " + _virtualSites);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum DepletionRule
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnReward")]
        OnReward = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnChoice")]
        OnChoice = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnTime")]
        OnTime = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnDistance")]
        OnDistance = 3,
    }


    /// <summary>
    /// Available distributions
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [JsonInheritanceAttribute("Scalar", typeof(Scalar))]
    [JsonInheritanceAttribute("Normal", typeof(NormalDistribution))]
    [JsonInheritanceAttribute("LogNormal", typeof(LogNormalDistribution))]
    [JsonInheritanceAttribute("Exponential", typeof(ExponentialDistribution))]
    [JsonInheritanceAttribute("Uniform", typeof(UniformDistribution))]
    [JsonInheritanceAttribute("Poisson", typeof(PoissonDistribution))]
    [JsonInheritanceAttribute("Binomial", typeof(BinomialDistribution))]
    [JsonInheritanceAttribute("Beta", typeof(BetaDistribution))]
    [JsonInheritanceAttribute("Gamma", typeof(GammaDistribution))]
    [System.ComponentModel.DescriptionAttribute("Available distributions")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Distribution
    {
    
        public Distribution()
        {
        }
    
        protected Distribution(Distribution other)
        {
        }
    
        public System.IObservable<Distribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Distribution(this)));
        }
    
        public System.IObservable<Distribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Distribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class EnvironmentStatistics
    {
    
        private System.Collections.Generic.List<PatchStatistics> _patches = new System.Collections.Generic.List<PatchStatistics>();
    
        private Matrix2D _transitionMatrix;
    
        private int? _firstState;
    
        public EnvironmentStatistics()
        {
        }
    
        protected EnvironmentStatistics(EnvironmentStatistics other)
        {
            _patches = other._patches;
            _transitionMatrix = other._transitionMatrix;
            _firstState = other._firstState;
        }
    
        /// <summary>
        /// List of patches
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("patches")]
        [System.ComponentModel.DescriptionAttribute("List of patches")]
        public System.Collections.Generic.List<PatchStatistics> Patches
        {
            get
            {
                return _patches;
            }
            set
            {
                _patches = value;
            }
        }
    
        /// <summary>
        /// Transition matrix between patches
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("transition_matrix")]
        [System.ComponentModel.DescriptionAttribute("Transition matrix between patches")]
        public Matrix2D TransitionMatrix
        {
            get
            {
                return _transitionMatrix;
            }
            set
            {
                _transitionMatrix = value;
            }
        }
    
        /// <summary>
        /// The first state to be visited. If None, it will be randomly drawn.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("first_state")]
        [System.ComponentModel.DescriptionAttribute("The first state to be visited. If None, it will be randomly drawn.")]
        public int? FirstState
        {
            get
            {
                return _firstState;
            }
            set
            {
                _firstState = value;
            }
        }
    
        public System.IObservable<EnvironmentStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new EnvironmentStatistics(this)));
        }
    
        public System.IObservable<EnvironmentStatistics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new EnvironmentStatistics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("patches = " + _patches + ", ");
            stringBuilder.Append("transition_matrix = " + _transitionMatrix + ", ");
            stringBuilder.Append("first_state = " + _firstState);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ExponentialDistribution : Distribution
    {
    
        private ExponentialDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public ExponentialDistribution()
        {
        }
    
        protected ExponentialDistribution(ExponentialDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public ExponentialDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<ExponentialDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ExponentialDistribution(this)));
        }
    
        public System.IObservable<ExponentialDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ExponentialDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ExponentialDistributionParameters
    {
    
        private string _family = "Exponential";
    
        private double _rate = 0D;
    
        public ExponentialDistributionParameters()
        {
        }
    
        protected ExponentialDistributionParameters(ExponentialDistributionParameters other)
        {
            _family = other._family;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<ExponentialDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ExponentialDistributionParameters(this)));
        }
    
        public System.IObservable<ExponentialDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ExponentialDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ForagingSettings : TaskModeSettings
    {
    
        public ForagingSettings()
        {
        }
    
        protected ForagingSettings(ForagingSettings other) : 
                base(other)
        {
        }
    
        public System.IObservable<ForagingSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ForagingSettings(this)));
        }
    
        public System.IObservable<ForagingSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ForagingSettings(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return base.PrintMembers(stringBuilder);
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class GammaDistribution : Distribution
    {
    
        private GammaDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public GammaDistribution()
        {
        }
    
        protected GammaDistribution(GammaDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public GammaDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<GammaDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new GammaDistribution(this)));
        }
    
        public System.IObservable<GammaDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new GammaDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class GammaDistributionParameters
    {
    
        private string _family = "Gamma";
    
        private double _shape = 1D;
    
        private double _rate = 1D;
    
        public GammaDistributionParameters()
        {
        }
    
        protected GammaDistributionParameters(GammaDistributionParameters other)
        {
            _family = other._family;
            _shape = other._shape;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Shape parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shape")]
        [System.ComponentModel.DescriptionAttribute("Shape parameter of the distribution")]
        public double Shape
        {
            get
            {
                return _shape;
            }
            set
            {
                _shape = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<GammaDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new GammaDistributionParameters(this)));
        }
    
        public System.IObservable<GammaDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new GammaDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("shape = " + _shape + ", ");
            stringBuilder.Append("rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HabituationSettings : TaskModeSettings
    {
    
        private Distribution _distanceToReward;
    
        private RenderSpecification _renderSpecification;
    
        public HabituationSettings()
        {
        }
    
        protected HabituationSettings(HabituationSettings other) : 
                base(other)
        {
            _distanceToReward = other._distanceToReward;
            _renderSpecification = other._renderSpecification;
        }
    
        /// <summary>
        /// Distance (cm) to the reward
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distance_to_reward", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Distance (cm) to the reward")]
        public Distribution DistanceToReward
        {
            get
            {
                return _distanceToReward;
            }
            set
            {
                _distanceToReward = value;
            }
        }
    
        /// <summary>
        /// The optional render specification of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("render_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional render specification of the virtual site")]
        public RenderSpecification RenderSpecification
        {
            get
            {
                return _renderSpecification;
            }
            set
            {
                _renderSpecification = value;
            }
        }
    
        public System.IObservable<HabituationSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HabituationSettings(this)));
        }
    
        public System.IObservable<HabituationSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HabituationSettings(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distance_to_reward = " + _distanceToReward + ", ");
            stringBuilder.Append("render_specification = " + _renderSpecification);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LinearFunction : RewardFunction
    {
    
        private double _mininum = 0D;
    
        private double _maximum = 9999D;
    
        private double _a = 1D;
    
        private double _b = 0D;
    
        public LinearFunction()
        {
        }
    
        protected LinearFunction(LinearFunction other) : 
                base(other)
        {
            _mininum = other._mininum;
            _maximum = other._maximum;
            _a = other._a;
            _b = other._b;
        }
    
        /// <summary>
        /// Minimum value of the function
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mininum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the function")]
        public double Mininum
        {
            get
            {
                return _mininum;
            }
            set
            {
                _mininum = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the function
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maximum")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the function")]
        public double Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        /// <summary>
        /// Coefficient a of the function: value = a * x + b
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("a")]
        [System.ComponentModel.DescriptionAttribute("Coefficient a of the function: value = a * x + b")]
        public double A
        {
            get
            {
                return _a;
            }
            set
            {
                _a = value;
            }
        }
    
        /// <summary>
        /// Coefficient b of the function: value = a * x + b
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("b")]
        [System.ComponentModel.DescriptionAttribute("Coefficient b of the function: value = a * x + b")]
        public double B
        {
            get
            {
                return _b;
            }
            set
            {
                _b = value;
            }
        }
    
        public System.IObservable<LinearFunction> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LinearFunction(this)));
        }
    
        public System.IObservable<LinearFunction> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LinearFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("mininum = " + _mininum + ", ");
            stringBuilder.Append("maximum = " + _maximum + ", ");
            stringBuilder.Append("a = " + _a + ", ");
            stringBuilder.Append("b = " + _b);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LogNormalDistribution : Distribution
    {
    
        private LogNormalDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public LogNormalDistribution()
        {
        }
    
        protected LogNormalDistribution(LogNormalDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public LogNormalDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<LogNormalDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogNormalDistribution(this)));
        }
    
        public System.IObservable<LogNormalDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogNormalDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LogNormalDistributionParameters
    {
    
        private string _family = "LogNormal";
    
        private double _mean = 0D;
    
        private double _std = 0D;
    
        public LogNormalDistributionParameters()
        {
        }
    
        protected LogNormalDistributionParameters(LogNormalDistributionParameters other)
        {
            _family = other._family;
            _mean = other._mean;
            _std = other._std;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Mean of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [System.ComponentModel.DescriptionAttribute("Mean of the distribution")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        /// <summary>
        /// Standard deviation of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [System.ComponentModel.DescriptionAttribute("Standard deviation of the distribution")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        public System.IObservable<LogNormalDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogNormalDistributionParameters(this)));
        }
    
        public System.IObservable<LogNormalDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogNormalDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("mean = " + _mean + ", ");
            stringBuilder.Append("std = " + _std);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Matrix2D
    {
    
        private System.Collections.Generic.List<System.Collections.Generic.List<double>> _data = new System.Collections.Generic.List<System.Collections.Generic.List<double>>();
    
        public Matrix2D()
        {
        }
    
        protected Matrix2D(Matrix2D other)
        {
            _data = other._data;
        }
    
        /// <summary>
        /// Defines a 2D matrix
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("data")]
        [System.ComponentModel.DescriptionAttribute("Defines a 2D matrix")]
        public System.Collections.Generic.List<System.Collections.Generic.List<double>> Data
        {
            get
            {
                return _data;
            }
            set
            {
                _data = value;
            }
        }
    
        public System.IObservable<Matrix2D> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Matrix2D(this)));
        }
    
        public System.IObservable<Matrix2D> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Matrix2D(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("data = " + _data);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class MovableSpoutControl
    {
    
        private bool _enabled = false;
    
        private double _timeToCollectAfterReward = 1D;
    
        private ServoMotor _servoMotor;
    
        public MovableSpoutControl()
        {
        }
    
        protected MovableSpoutControl(MovableSpoutControl other)
        {
            _enabled = other._enabled;
            _timeToCollectAfterReward = other._timeToCollectAfterReward;
            _servoMotor = other._servoMotor;
        }
    
        /// <summary>
        /// Whether the movable spout is enabled
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
        [System.ComponentModel.DescriptionAttribute("Whether the movable spout is enabled")]
        public bool Enabled
        {
            get
            {
                return _enabled;
            }
            set
            {
                _enabled = value;
            }
        }
    
        /// <summary>
        /// Time (s) to collect after reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_to_collect_after_reward")]
        [System.ComponentModel.DescriptionAttribute("Time (s) to collect after reward")]
        public double TimeToCollectAfterReward
        {
            get
            {
                return _timeToCollectAfterReward;
            }
            set
            {
                _timeToCollectAfterReward = value;
            }
        }
    
        /// <summary>
        /// Servo motor settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("servo_motor")]
        [System.ComponentModel.DescriptionAttribute("Servo motor settings")]
        public ServoMotor ServoMotor
        {
            get
            {
                return _servoMotor;
            }
            set
            {
                _servoMotor = value;
            }
        }
    
        public System.IObservable<MovableSpoutControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new MovableSpoutControl(this)));
        }
    
        public System.IObservable<MovableSpoutControl> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new MovableSpoutControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("enabled = " + _enabled + ", ");
            stringBuilder.Append("time_to_collect_after_reward = " + _timeToCollectAfterReward + ", ");
            stringBuilder.Append("servo_motor = " + _servoMotor);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NormalDistribution : Distribution
    {
    
        private NormalDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public NormalDistribution()
        {
        }
    
        protected NormalDistribution(NormalDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public NormalDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<NormalDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NormalDistribution(this)));
        }
    
        public System.IObservable<NormalDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NormalDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NormalDistributionParameters
    {
    
        private string _family = "Normal";
    
        private double _mean = 0D;
    
        private double _std = 0D;
    
        public NormalDistributionParameters()
        {
        }
    
        protected NormalDistributionParameters(NormalDistributionParameters other)
        {
            _family = other._family;
            _mean = other._mean;
            _std = other._std;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Mean of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [System.ComponentModel.DescriptionAttribute("Mean of the distribution")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        /// <summary>
        /// Standard deviation of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [System.ComponentModel.DescriptionAttribute("Standard deviation of the distribution")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        public System.IObservable<NormalDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NormalDistributionParameters(this)));
        }
    
        public System.IObservable<NormalDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NormalDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("mean = " + _mean + ", ");
            stringBuilder.Append("std = " + _std);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NumericalUpdater
    {
    
        private NumericalUpdaterOperation _operation = AindVrForagingDataSchema.TaskLogic.NumericalUpdaterOperation.None;
    
        private NumericalUpdaterParameters _parameters;
    
        public NumericalUpdater()
        {
        }
    
        protected NumericalUpdater(NumericalUpdater other)
        {
            _operation = other._operation;
            _parameters = other._parameters;
        }
    
        /// <summary>
        /// Operation to perform on the parameter
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation")]
        [System.ComponentModel.DescriptionAttribute("Operation to perform on the parameter")]
        public NumericalUpdaterOperation Operation
        {
            get
            {
                return _operation;
            }
            set
            {
                _operation = value;
            }
        }
    
        /// <summary>
        /// Parameters of the updater
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the updater")]
        public NumericalUpdaterParameters Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value;
            }
        }
    
        public System.IObservable<NumericalUpdater> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NumericalUpdater(this)));
        }
    
        public System.IObservable<NumericalUpdater> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NumericalUpdater(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("operation = " + _operation + ", ");
            stringBuilder.Append("parameters = " + _parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum NumericalUpdaterOperation
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Offset")]
        Offset = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Gain")]
        Gain = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Set")]
        Set = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OffsetPercentage")]
        OffsetPercentage = 4,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NumericalUpdaterParameters
    {
    
        private double _initialValue = 0D;
    
        private double _increment = 0D;
    
        private double _decrement = 0D;
    
        private double _minimum = 0D;
    
        private double _maximum = 0D;
    
        public NumericalUpdaterParameters()
        {
        }
    
        protected NumericalUpdaterParameters(NumericalUpdaterParameters other)
        {
            _initialValue = other._initialValue;
            _increment = other._increment;
            _decrement = other._decrement;
            _minimum = other._minimum;
            _maximum = other._maximum;
        }
    
        /// <summary>
        /// Initial value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("initial_value")]
        [System.ComponentModel.DescriptionAttribute("Initial value of the parameter")]
        public double InitialValue
        {
            get
            {
                return _initialValue;
            }
            set
            {
                _initialValue = value;
            }
        }
    
        /// <summary>
        /// Value to increment the parameter by
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("increment")]
        [System.ComponentModel.DescriptionAttribute("Value to increment the parameter by")]
        public double Increment
        {
            get
            {
                return _increment;
            }
            set
            {
                _increment = value;
            }
        }
    
        /// <summary>
        /// Value to decrement the parameter by
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("decrement")]
        [System.ComponentModel.DescriptionAttribute("Value to decrement the parameter by")]
        public double Decrement
        {
            get
            {
                return _decrement;
            }
            set
            {
                _decrement = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("minimum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the parameter")]
        public double Minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maximum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the parameter")]
        public double Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        public System.IObservable<NumericalUpdaterParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NumericalUpdaterParameters(this)));
        }
    
        public System.IObservable<NumericalUpdaterParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NumericalUpdaterParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("initial_value = " + _initialValue + ", ");
            stringBuilder.Append("increment = " + _increment + ", ");
            stringBuilder.Append("decrement = " + _decrement + ", ");
            stringBuilder.Append("minimum = " + _minimum + ", ");
            stringBuilder.Append("maximum = " + _maximum);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OdorControl
    {
    
        private double _valveMaxOpenTime = 10D;
    
        private double _targetTotalFlow = 1000D;
    
        private bool _useChannel3AsCarrier = true;
    
        private double _targetOdorFlow = 100D;
    
        public OdorControl()
        {
        }
    
        protected OdorControl(OdorControl other)
        {
            _valveMaxOpenTime = other._valveMaxOpenTime;
            _targetTotalFlow = other._targetTotalFlow;
            _useChannel3AsCarrier = other._useChannel3AsCarrier;
            _targetOdorFlow = other._targetOdorFlow;
        }
    
        /// <summary>
        /// Maximum time (s) the valve can be open continuously
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_max_open_time")]
        [System.ComponentModel.DescriptionAttribute("Maximum time (s) the valve can be open continuously")]
        public double ValveMaxOpenTime
        {
            get
            {
                return _valveMaxOpenTime;
            }
            set
            {
                _valveMaxOpenTime = value;
            }
        }
    
        /// <summary>
        /// Target total flow (ml/s) of the odor mixture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_total_flow")]
        [System.ComponentModel.DescriptionAttribute("Target total flow (ml/s) of the odor mixture")]
        public double TargetTotalFlow
        {
            get
            {
                return _targetTotalFlow;
            }
            set
            {
                _targetTotalFlow = value;
            }
        }
    
        /// <summary>
        /// Whether to use channel 3 as carrier
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_channel_3_as_carrier")]
        [System.ComponentModel.DescriptionAttribute("Whether to use channel 3 as carrier")]
        public bool UseChannel3AsCarrier
        {
            get
            {
                return _useChannel3AsCarrier;
            }
            set
            {
                _useChannel3AsCarrier = value;
            }
        }
    
        /// <summary>
        /// Target odor flow (ml/s) in the odor mixture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_odor_flow")]
        [System.ComponentModel.DescriptionAttribute("Target odor flow (ml/s) in the odor mixture")]
        public double TargetOdorFlow
        {
            get
            {
                return _targetOdorFlow;
            }
            set
            {
                _targetOdorFlow = value;
            }
        }
    
        public System.IObservable<OdorControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OdorControl(this)));
        }
    
        public System.IObservable<OdorControl> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OdorControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("valve_max_open_time = " + _valveMaxOpenTime + ", ");
            stringBuilder.Append("target_total_flow = " + _targetTotalFlow + ", ");
            stringBuilder.Append("use_channel_3_as_carrier = " + _useChannel3AsCarrier + ", ");
            stringBuilder.Append("target_odor_flow = " + _targetOdorFlow);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OdorSpecification
    {
    
        private int _index;
    
        private double _concentration = 1D;
    
        public OdorSpecification()
        {
        }
    
        protected OdorSpecification(OdorSpecification other)
        {
            _index = other._index;
            _concentration = other._concentration;
        }
    
        /// <summary>
        /// Index of the odor to be used
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("index", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Index of the odor to be used")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        /// <summary>
        /// Concentration of the odor
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("concentration")]
        [System.ComponentModel.DescriptionAttribute("Concentration of the odor")]
        public double Concentration
        {
            get
            {
                return _concentration;
            }
            set
            {
                _concentration = value;
            }
        }
    
        public System.IObservable<OdorSpecification> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OdorSpecification(this)));
        }
    
        public System.IObservable<OdorSpecification> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OdorSpecification(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("index = " + _index + ", ");
            stringBuilder.Append("concentration = " + _concentration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OperantLogic
    {
    
        private bool _isOperant = true;
    
        private double _stopDuration = 0D;
    
        private double _timeToCollectReward = 100000D;
    
        private double _graceDistanceThreshold = 10D;
    
        public OperantLogic()
        {
        }
    
        protected OperantLogic(OperantLogic other)
        {
            _isOperant = other._isOperant;
            _stopDuration = other._stopDuration;
            _timeToCollectReward = other._timeToCollectReward;
            _graceDistanceThreshold = other._graceDistanceThreshold;
        }
    
        /// <summary>
        /// Will the trial implement operant logic
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("is_operant")]
        [System.ComponentModel.DescriptionAttribute("Will the trial implement operant logic")]
        public bool IsOperant
        {
            get
            {
                return _isOperant;
            }
            set
            {
                _isOperant = value;
            }
        }
    
        /// <summary>
        /// Duration (s) the animal must stop for to lock its choice
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stop_duration")]
        [System.ComponentModel.DescriptionAttribute("Duration (s) the animal must stop for to lock its choice")]
        public double StopDuration
        {
            get
            {
                return _stopDuration;
            }
            set
            {
                _stopDuration = value;
            }
        }
    
        /// <summary>
        /// Time(s) the animal has to collect the reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_to_collect_reward")]
        [System.ComponentModel.DescriptionAttribute("Time(s) the animal has to collect the reward")]
        public double TimeToCollectReward
        {
            get
            {
                return _timeToCollectReward;
            }
            set
            {
                _timeToCollectReward = value;
            }
        }
    
        /// <summary>
        /// Virtual distance (cm) the animal must be within to not abort the current choice
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("grace_distance_threshold")]
        [System.ComponentModel.DescriptionAttribute("Virtual distance (cm) the animal must be within to not abort the current choice")]
        public double GraceDistanceThreshold
        {
            get
            {
                return _graceDistanceThreshold;
            }
            set
            {
                _graceDistanceThreshold = value;
            }
        }
    
        public System.IObservable<OperantLogic> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OperantLogic(this)));
        }
    
        public System.IObservable<OperantLogic> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OperantLogic(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("is_operant = " + _isOperant + ", ");
            stringBuilder.Append("stop_duration = " + _stopDuration + ", ");
            stringBuilder.Append("time_to_collect_reward = " + _timeToCollectReward + ", ");
            stringBuilder.Append("grace_distance_threshold = " + _graceDistanceThreshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OperationControl
    {
    
        private MovableSpoutControl _movableSpoutControl;
    
        private OdorControl _odorControl;
    
        private PositionControl _positionControl;
    
        private AudioControl _audioControl;
    
        public OperationControl()
        {
        }
    
        protected OperationControl(OperationControl other)
        {
            _movableSpoutControl = other._movableSpoutControl;
            _odorControl = other._odorControl;
            _positionControl = other._positionControl;
            _audioControl = other._audioControl;
        }
    
        /// <summary>
        /// Control of the movable spout
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("movable_spout_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the movable spout")]
        public MovableSpoutControl MovableSpoutControl
        {
            get
            {
                return _movableSpoutControl;
            }
            set
            {
                _movableSpoutControl = value;
            }
        }
    
        /// <summary>
        /// Control of the odor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the odor")]
        public OdorControl OdorControl
        {
            get
            {
                return _odorControl;
            }
            set
            {
                _odorControl = value;
            }
        }
    
        /// <summary>
        /// Control of the position
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("position_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the position")]
        public PositionControl PositionControl
        {
            get
            {
                return _positionControl;
            }
            set
            {
                _positionControl = value;
            }
        }
    
        /// <summary>
        /// Control of the audio
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("audio_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the audio")]
        public AudioControl AudioControl
        {
            get
            {
                return _audioControl;
            }
            set
            {
                _audioControl = value;
            }
        }
    
        public System.IObservable<OperationControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OperationControl(this)));
        }
    
        public System.IObservable<OperationControl> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OperationControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("movable_spout_control = " + _movableSpoutControl + ", ");
            stringBuilder.Append("odor_control = " + _odorControl + ", ");
            stringBuilder.Append("position_control = " + _positionControl + ", ");
            stringBuilder.Append("audio_control = " + _audioControl);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PatchRewardFunction
    {
    
        private RewardFunction _amount;
    
        private RewardFunction _probability;
    
        private RewardFunction _available;
    
        private DepletionRule _depletionRule = AindVrForagingDataSchema.TaskLogic.DepletionRule.OnChoice;
    
        public PatchRewardFunction()
        {
        }
    
        protected PatchRewardFunction(PatchRewardFunction other)
        {
            _amount = other._amount;
            _probability = other._probability;
            _available = other._available;
            _depletionRule = other._depletionRule;
        }
    
        /// <summary>
        /// Determines the amount of reward to be delivered. The value is in microliters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [System.ComponentModel.DescriptionAttribute("Determines the amount of reward to be delivered. The value is in microliters")]
        public RewardFunction Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// Determines the probability that a reward will be delivered
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [System.ComponentModel.DescriptionAttribute("Determines the probability that a reward will be delivered")]
        public RewardFunction Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        /// <summary>
        /// Determines the total amount of reward available left in the patch. The value is in microliters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("available")]
        [System.ComponentModel.DescriptionAttribute("Determines the total amount of reward available left in the patch. The value is i" +
            "n microliters")]
        public RewardFunction Available
        {
            get
            {
                return _available;
            }
            set
            {
                _available = value;
            }
        }
    
        /// <summary>
        /// Depletion
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("depletion_rule")]
        [System.ComponentModel.DescriptionAttribute("Depletion")]
        public DepletionRule DepletionRule
        {
            get
            {
                return _depletionRule;
            }
            set
            {
                _depletionRule = value;
            }
        }
    
        public System.IObservable<PatchRewardFunction> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchRewardFunction(this)));
        }
    
        public System.IObservable<PatchRewardFunction> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchRewardFunction(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("amount = " + _amount + ", ");
            stringBuilder.Append("probability = " + _probability + ", ");
            stringBuilder.Append("available = " + _available + ", ");
            stringBuilder.Append("depletion_rule = " + _depletionRule);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PatchStatistics
    {
    
        private string _label = "";
    
        private int _stateIndex = 0;
    
        private OdorSpecification _odorSpecification;
    
        private RewardSpecification _rewardSpecification;
    
        private VirtualSiteGeneration _virtualSiteGeneration;
    
        public PatchStatistics()
        {
        }
    
        protected PatchStatistics(PatchStatistics other)
        {
            _label = other._label;
            _stateIndex = other._stateIndex;
            _odorSpecification = other._odorSpecification;
            _rewardSpecification = other._rewardSpecification;
            _virtualSiteGeneration = other._virtualSiteGeneration;
        }
    
        /// <summary>
        /// Label of the patch
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [System.ComponentModel.DescriptionAttribute("Label of the patch")]
        public string Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        /// <summary>
        /// Index of the state
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("state_index")]
        [System.ComponentModel.DescriptionAttribute("Index of the state")]
        public int StateIndex
        {
            get
            {
                return _stateIndex;
            }
            set
            {
                _stateIndex = value;
            }
        }
    
        /// <summary>
        /// The optional odor specification of the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional odor specification of the patch")]
        public OdorSpecification OdorSpecification
        {
            get
            {
                return _odorSpecification;
            }
            set
            {
                _odorSpecification = value;
            }
        }
    
        /// <summary>
        /// The optional reward specification of the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional reward specification of the patch")]
        public RewardSpecification RewardSpecification
        {
            get
            {
                return _rewardSpecification;
            }
            set
            {
                _rewardSpecification = value;
            }
        }
    
        /// <summary>
        /// Virtual site generation specification
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("virtual_site_generation")]
        [System.ComponentModel.DescriptionAttribute("Virtual site generation specification")]
        public VirtualSiteGeneration VirtualSiteGeneration
        {
            get
            {
                return _virtualSiteGeneration;
            }
            set
            {
                _virtualSiteGeneration = value;
            }
        }
    
        public System.IObservable<PatchStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchStatistics(this)));
        }
    
        public System.IObservable<PatchStatistics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchStatistics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("label = " + _label + ", ");
            stringBuilder.Append("state_index = " + _stateIndex + ", ");
            stringBuilder.Append("odor_specification = " + _odorSpecification + ", ");
            stringBuilder.Append("reward_specification = " + _rewardSpecification + ", ");
            stringBuilder.Append("virtual_site_generation = " + _virtualSiteGeneration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PoissonDistribution : Distribution
    {
    
        private PoissonDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public PoissonDistribution()
        {
        }
    
        protected PoissonDistribution(PoissonDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public PoissonDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<PoissonDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PoissonDistribution(this)));
        }
    
        public System.IObservable<PoissonDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PoissonDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PoissonDistributionParameters
    {
    
        private string _family = "Poisson";
    
        private double _rate = 1D;
    
        public PoissonDistributionParameters()
        {
        }
    
        protected PoissonDistributionParameters(PoissonDistributionParameters other)
        {
            _family = other._family;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the Poisson process that generates the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the Poisson process that generates the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<PoissonDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PoissonDistributionParameters(this)));
        }
    
        public System.IObservable<PoissonDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PoissonDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PositionControl
    {
    
        private Vector3 _gain;
    
        private Vector3 _initialPosition;
    
        private double _frequencyFilterCutoff = 0.5D;
    
        private double _velocityThreshold = 1D;
    
        public PositionControl()
        {
        }
    
        protected PositionControl(PositionControl other)
        {
            _gain = other._gain;
            _initialPosition = other._initialPosition;
            _frequencyFilterCutoff = other._frequencyFilterCutoff;
            _velocityThreshold = other._velocityThreshold;
        }
    
        /// <summary>
        /// Gain of the position control.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("Gain of the position control.")]
        public Vector3 Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Gain of the position control.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("initial_position")]
        [System.ComponentModel.DescriptionAttribute("Gain of the position control.")]
        public Vector3 InitialPosition
        {
            get
            {
                return _initialPosition;
            }
            set
            {
                _initialPosition = value;
            }
        }
    
        /// <summary>
        /// Cutoff frequency (Hz) of the low-pass filter used to filter the velocity signal.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frequency_filter_cutoff")]
        [System.ComponentModel.DescriptionAttribute("Cutoff frequency (Hz) of the low-pass filter used to filter the velocity signal.")]
        public double FrequencyFilterCutoff
        {
            get
            {
                return _frequencyFilterCutoff;
            }
            set
            {
                _frequencyFilterCutoff = value;
            }
        }
    
        /// <summary>
        /// Threshold (cm/s) of the velocity signal used to detect when the animal is moving.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("velocity_threshold")]
        [System.ComponentModel.DescriptionAttribute("Threshold (cm/s) of the velocity signal used to detect when the animal is moving." +
            "")]
        public double VelocityThreshold
        {
            get
            {
                return _velocityThreshold;
            }
            set
            {
                _velocityThreshold = value;
            }
        }
    
        public System.IObservable<PositionControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PositionControl(this)));
        }
    
        public System.IObservable<PositionControl> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PositionControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("gain = " + _gain + ", ");
            stringBuilder.Append("initial_position = " + _initialPosition + ", ");
            stringBuilder.Append("frequency_filter_cutoff = " + _frequencyFilterCutoff + ", ");
            stringBuilder.Append("velocity_threshold = " + _velocityThreshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PowerFunction : RewardFunction
    {
    
        private double _mininum = 0D;
    
        private double _maximum = 1D;
    
        private double _a = 1D;
    
        private double _b = 2.718281828459045D;
    
        private double _c = -1D;
    
        private double _d = 0D;
    
        public PowerFunction()
        {
        }
    
        protected PowerFunction(PowerFunction other) : 
                base(other)
        {
            _mininum = other._mininum;
            _maximum = other._maximum;
            _a = other._a;
            _b = other._b;
            _c = other._c;
            _d = other._d;
        }
    
        /// <summary>
        /// Minimum value of the function
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mininum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the function")]
        public double Mininum
        {
            get
            {
                return _mininum;
            }
            set
            {
                _mininum = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the function
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maximum")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the function")]
        public double Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        /// <summary>
        /// Coefficient a of the function: value = a * pow(b, c * x) + d
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("a")]
        [System.ComponentModel.DescriptionAttribute("Coefficient a of the function: value = a * pow(b, c * x) + d")]
        public double A
        {
            get
            {
                return _a;
            }
            set
            {
                _a = value;
            }
        }
    
        /// <summary>
        /// Coefficient b of the function: value = a * pow(b, c * x) + d
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("b")]
        [System.ComponentModel.DescriptionAttribute("Coefficient b of the function: value = a * pow(b, c * x) + d")]
        public double B
        {
            get
            {
                return _b;
            }
            set
            {
                _b = value;
            }
        }
    
        /// <summary>
        /// Coefficient c of the function: value = a * pow(b, c * x) + d
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("c")]
        [System.ComponentModel.DescriptionAttribute("Coefficient c of the function: value = a * pow(b, c * x) + d")]
        public double C
        {
            get
            {
                return _c;
            }
            set
            {
                _c = value;
            }
        }
    
        /// <summary>
        /// Coefficient d of the function: value = a * pow(b, c * x) + d
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("d")]
        [System.ComponentModel.DescriptionAttribute("Coefficient d of the function: value = a * pow(b, c * x) + d")]
        public double D
        {
            get
            {
                return _d;
            }
            set
            {
                _d = value;
            }
        }
    
        public System.IObservable<PowerFunction> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PowerFunction(this)));
        }
    
        public System.IObservable<PowerFunction> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PowerFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("mininum = " + _mininum + ", ");
            stringBuilder.Append("maximum = " + _maximum + ", ");
            stringBuilder.Append("a = " + _a + ", ");
            stringBuilder.Append("b = " + _b + ", ");
            stringBuilder.Append("c = " + _c + ", ");
            stringBuilder.Append("d = " + _d);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RenderSpecification
    {
    
        private double? _contrast;
    
        public RenderSpecification()
        {
        }
    
        protected RenderSpecification(RenderSpecification other)
        {
            _contrast = other._contrast;
        }
    
        /// <summary>
        /// Contrast of the texture
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("contrast")]
        [System.ComponentModel.DescriptionAttribute("Contrast of the texture")]
        public double? Contrast
        {
            get
            {
                return _contrast;
            }
            set
            {
                _contrast = value;
            }
        }
    
        public System.IObservable<RenderSpecification> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RenderSpecification(this)));
        }
    
        public System.IObservable<RenderSpecification> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RenderSpecification(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("contrast = " + _contrast);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "function_type")]
    [JsonInheritanceAttribute("ConstantFunction", typeof(ConstantFunction))]
    [JsonInheritanceAttribute("LinearFunction", typeof(LinearFunction))]
    [JsonInheritanceAttribute("PowerFunction", typeof(PowerFunction))]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardFunction
    {
    
        public RewardFunction()
        {
        }
    
        protected RewardFunction(RewardFunction other)
        {
        }
    
        public System.IObservable<RewardFunction> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardFunction(this)));
        }
    
        public System.IObservable<RewardFunction> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardFunction(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardSpecification
    {
    
        private OperantLogic _operantLogic;
    
        private Distribution _delay;
    
        private PatchRewardFunction _rewardFunction;
    
        public RewardSpecification()
        {
        }
    
        protected RewardSpecification(RewardSpecification other)
        {
            _operantLogic = other._operantLogic;
            _delay = other._delay;
            _rewardFunction = other._rewardFunction;
        }
    
        /// <summary>
        /// The optional operant logic of the reward
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operant_logic")]
        [System.ComponentModel.DescriptionAttribute("The optional operant logic of the reward")]
        public OperantLogic OperantLogic
        {
            get
            {
                return _operantLogic;
            }
            set
            {
                _operantLogic = value;
            }
        }
    
        /// <summary>
        /// The optional distribution where the delay to reward will be drawn from
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("delay")]
        [System.ComponentModel.DescriptionAttribute("The optional distribution where the delay to reward will be drawn from")]
        public Distribution Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        /// <summary>
        /// Reward function of the patch.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_function")]
        [System.ComponentModel.DescriptionAttribute("Reward function of the patch.")]
        public PatchRewardFunction RewardFunction
        {
            get
            {
                return _rewardFunction;
            }
            set
            {
                _rewardFunction = value;
            }
        }
    
        public System.IObservable<RewardSpecification> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardSpecification(this)));
        }
    
        public System.IObservable<RewardSpecification> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardSpecification(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("operant_logic = " + _operantLogic + ", ");
            stringBuilder.Append("delay = " + _delay + ", ");
            stringBuilder.Append("reward_function = " + _rewardFunction);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Scalar : Distribution
    {
    
        private ScalarDistributionParameter _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public Scalar()
        {
        }
    
        protected Scalar(Scalar other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public ScalarDistributionParameter DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<Scalar> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Scalar(this)));
        }
    
        public System.IObservable<Scalar> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Scalar(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ScalarDistributionParameter
    {
    
        private string _family = "Scalar";
    
        private double _value = 0D;
    
        private TruncationParameters2 _truncationParameters;
    
        private ScalingParameters2 _scalingParameters;
    
        public ScalarDistributionParameter()
        {
        }
    
        protected ScalarDistributionParameter(ScalarDistributionParameter other)
        {
            _family = other._family;
            _value = other._value;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// The static value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("value")]
        [System.ComponentModel.DescriptionAttribute("The static value of the distribution")]
        public double Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        public TruncationParameters2 TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        public ScalingParameters2 ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<ScalarDistributionParameter> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalarDistributionParameter(this)));
        }
    
        public System.IObservable<ScalarDistributionParameter> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalarDistributionParameter(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("value = " + _value + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ScalingParameters
    {
    
        private double _scale = 1D;
    
        private double _offset = 0D;
    
        public ScalingParameters()
        {
        }
    
        protected ScalingParameters(ScalingParameters other)
        {
            _scale = other._scale;
            _offset = other._offset;
        }
    
        /// <summary>
        /// Scaling factor to apply on the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [System.ComponentModel.DescriptionAttribute("Scaling factor to apply on the sampled distribution")]
        public double Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        /// <summary>
        /// Offset factor to apply on the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset")]
        [System.ComponentModel.DescriptionAttribute("Offset factor to apply on the sampled distribution")]
        public double Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        public System.IObservable<ScalingParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalingParameters(this)));
        }
    
        public System.IObservable<ScalingParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalingParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("scale = " + _scale + ", ");
            stringBuilder.Append("offset = " + _offset);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ServoMotor
    {
    
        private int _period = 20000;
    
        private int _minPulseDuration = 1000;
    
        private int _maxPulseDuration = 2000;
    
        private int _defaultPulseDuration = 2000;
    
        public ServoMotor()
        {
        }
    
        protected ServoMotor(ServoMotor other)
        {
            _period = other._period;
            _minPulseDuration = other._minPulseDuration;
            _maxPulseDuration = other._maxPulseDuration;
            _defaultPulseDuration = other._defaultPulseDuration;
        }
    
        /// <summary>
        /// Period
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("period")]
        [System.ComponentModel.DescriptionAttribute("Period")]
        public int Period
        {
            get
            {
                return _period;
            }
            set
            {
                _period = value;
            }
        }
    
        /// <summary>
        /// Minimum pulse duration
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min_pulse_duration")]
        [System.ComponentModel.DescriptionAttribute("Minimum pulse duration")]
        public int MinPulseDuration
        {
            get
            {
                return _minPulseDuration;
            }
            set
            {
                _minPulseDuration = value;
            }
        }
    
        /// <summary>
        /// Maximum pulse duration
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max_pulse_duration")]
        [System.ComponentModel.DescriptionAttribute("Maximum pulse duration")]
        public int MaxPulseDuration
        {
            get
            {
                return _maxPulseDuration;
            }
            set
            {
                _maxPulseDuration = value;
            }
        }
    
        /// <summary>
        /// Default pulse duration
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("default_pulse_duration")]
        [System.ComponentModel.DescriptionAttribute("Default pulse duration")]
        public int DefaultPulseDuration
        {
            get
            {
                return _defaultPulseDuration;
            }
            set
            {
                _defaultPulseDuration = value;
            }
        }
    
        public System.IObservable<ServoMotor> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ServoMotor(this)));
        }
    
        public System.IObservable<ServoMotor> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ServoMotor(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("period = " + _period + ", ");
            stringBuilder.Append("min_pulse_duration = " + _minPulseDuration + ", ");
            stringBuilder.Append("max_pulse_duration = " + _maxPulseDuration + ", ");
            stringBuilder.Append("default_pulse_duration = " + _defaultPulseDuration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Size
    {
    
        private double _width = 0D;
    
        private double _height = 0D;
    
        public Size()
        {
        }
    
        protected Size(Size other)
        {
            _width = other._width;
            _height = other._height;
        }
    
        /// <summary>
        /// Width of the texture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        [System.ComponentModel.DescriptionAttribute("Width of the texture")]
        public double Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
    
        /// <summary>
        /// Height of the texture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        [System.ComponentModel.DescriptionAttribute("Height of the texture")]
        public double Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    
        public System.IObservable<Size> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Size(this)));
        }
    
        public System.IObservable<Size> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Size(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("width = " + _width + ", ");
            stringBuilder.Append("height = " + _height);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "task_mode")]
    [JsonInheritanceAttribute("HABITUATION", typeof(HabituationSettings))]
    [JsonInheritanceAttribute("FORAGING", typeof(ForagingSettings))]
    [JsonInheritanceAttribute("DEBUG", typeof(DebugSettings))]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TaskModeSettings
    {
    
        public TaskModeSettings()
        {
        }
    
        protected TaskModeSettings(TaskModeSettings other)
        {
        }
    
        public System.IObservable<TaskModeSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TaskModeSettings(this)));
        }
    
        public System.IObservable<TaskModeSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TaskModeSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Texture
    {
    
        private string _name = "default";
    
        private Size _size;
    
        public Texture()
        {
        }
    
        protected Texture(Texture other)
        {
            _name = other._name;
            _size = other._size;
        }
    
        /// <summary>
        /// Name of the texture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [System.ComponentModel.DescriptionAttribute("Name of the texture")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// Size of the texture
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("size")]
        [System.ComponentModel.DescriptionAttribute("Size of the texture")]
        public Size Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
    
        public System.IObservable<Texture> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Texture(this)));
        }
    
        public System.IObservable<Texture> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Texture(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("size = " + _size);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TreadmillSpecification
    {
    
        private double? _friction;
    
        public TreadmillSpecification()
        {
        }
    
        protected TreadmillSpecification(TreadmillSpecification other)
        {
            _friction = other._friction;
        }
    
        /// <summary>
        /// Friction of the treadmill (0-1)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("friction")]
        [System.ComponentModel.DescriptionAttribute("Friction of the treadmill (0-1)")]
        public double? Friction
        {
            get
            {
                return _friction;
            }
            set
            {
                _friction = value;
            }
        }
    
        public System.IObservable<TreadmillSpecification> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TreadmillSpecification(this)));
        }
    
        public System.IObservable<TreadmillSpecification> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TreadmillSpecification(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("friction = " + _friction);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TruncationParameters
    {
    
        private bool _isTruncated = false;
    
        private double _min = 0D;
    
        private double _max = 0D;
    
        public TruncationParameters()
        {
        }
    
        protected TruncationParameters(TruncationParameters other)
        {
            _isTruncated = other._isTruncated;
            _min = other._min;
            _max = other._max;
        }
    
        /// <summary>
        /// Whether the distribution is truncated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("is_truncated")]
        [System.ComponentModel.DescriptionAttribute("Whether the distribution is truncated")]
        public bool IsTruncated
        {
            get
            {
                return _isTruncated;
            }
            set
            {
                _isTruncated = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the sampled distribution")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the sampled distribution")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        public System.IObservable<TruncationParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TruncationParameters(this)));
        }
    
        public System.IObservable<TruncationParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TruncationParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("is_truncated = " + _isTruncated + ", ");
            stringBuilder.Append("min = " + _min + ", ");
            stringBuilder.Append("max = " + _max);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class UniformDistribution : Distribution
    {
    
        private UniformDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public UniformDistribution()
        {
        }
    
        protected UniformDistribution(UniformDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public UniformDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<UniformDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new UniformDistribution(this)));
        }
    
        public System.IObservable<UniformDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new UniformDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class UniformDistributionParameters
    {
    
        private string _family = "Uniform";
    
        private double _min = 0D;
    
        private double _max = 0D;
    
        public UniformDistributionParameters()
        {
        }
    
        protected UniformDistributionParameters(UniformDistributionParameters other)
        {
            _family = other._family;
            _min = other._min;
            _max = other._max;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the distribution")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the distribution")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        public System.IObservable<UniformDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new UniformDistributionParameters(this)));
        }
    
        public System.IObservable<UniformDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new UniformDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("min = " + _min + ", ");
            stringBuilder.Append("max = " + _max);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Vector3
    {
    
        private double _x = 0D;
    
        private double _y = 0D;
    
        private double _z = 0D;
    
        public Vector3()
        {
        }
    
        protected Vector3(Vector3 other)
        {
            _x = other._x;
            _y = other._y;
            _z = other._z;
        }
    
        /// <summary>
        /// X coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the point")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the point")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Z coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("z")]
        [System.ComponentModel.DescriptionAttribute("Z coordinate of the point")]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<Vector3> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Vector3(this)));
        }
    
        public System.IObservable<Vector3> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Vector3(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y + ", ");
            stringBuilder.Append("z = " + _z);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VirtualSite
    {
    
        private int _id = 0;
    
        private VirtualSiteLabels _label = AindVrForagingDataSchema.TaskLogic.VirtualSiteLabels.Unspecified;
    
        private double _length = 20D;
    
        private double _startPosition = 0D;
    
        private OdorSpecification _odorSpecification;
    
        private RewardSpecification _rewardSpecification;
    
        private RenderSpecification _renderSpecification;
    
        private TreadmillSpecification _treadmillSpecification;
    
        public VirtualSite()
        {
        }
    
        protected VirtualSite(VirtualSite other)
        {
            _id = other._id;
            _label = other._label;
            _length = other._length;
            _startPosition = other._startPosition;
            _odorSpecification = other._odorSpecification;
            _rewardSpecification = other._rewardSpecification;
            _renderSpecification = other._renderSpecification;
            _treadmillSpecification = other._treadmillSpecification;
        }
    
        /// <summary>
        /// Id of the virtual site
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        [System.ComponentModel.DescriptionAttribute("Id of the virtual site")]
        public int Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
    
        /// <summary>
        /// Label of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [System.ComponentModel.DescriptionAttribute("Label of the virtual site")]
        public VirtualSiteLabels Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        /// <summary>
        /// Length of the virtual site (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("length")]
        [System.ComponentModel.DescriptionAttribute("Length of the virtual site (cm)")]
        public double Length
        {
            get
            {
                return _length;
            }
            set
            {
                _length = value;
            }
        }
    
        /// <summary>
        /// Start position of the virtual site (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("start_position")]
        [System.ComponentModel.DescriptionAttribute("Start position of the virtual site (cm)")]
        public double StartPosition
        {
            get
            {
                return _startPosition;
            }
            set
            {
                _startPosition = value;
            }
        }
    
        /// <summary>
        /// The optional odor specification of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional odor specification of the virtual site")]
        public OdorSpecification OdorSpecification
        {
            get
            {
                return _odorSpecification;
            }
            set
            {
                _odorSpecification = value;
            }
        }
    
        /// <summary>
        /// The optional reward specification of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional reward specification of the virtual site")]
        public RewardSpecification RewardSpecification
        {
            get
            {
                return _rewardSpecification;
            }
            set
            {
                _rewardSpecification = value;
            }
        }
    
        /// <summary>
        /// The optional render specification of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("render_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional render specification of the virtual site")]
        public RenderSpecification RenderSpecification
        {
            get
            {
                return _renderSpecification;
            }
            set
            {
                _renderSpecification = value;
            }
        }
    
        /// <summary>
        /// Treadmill specification
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("treadmill_specification")]
        [System.ComponentModel.DescriptionAttribute("Treadmill specification")]
        public TreadmillSpecification TreadmillSpecification
        {
            get
            {
                return _treadmillSpecification;
            }
            set
            {
                _treadmillSpecification = value;
            }
        }
    
        public System.IObservable<VirtualSite> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VirtualSite(this)));
        }
    
        public System.IObservable<VirtualSite> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VirtualSite(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("id = " + _id + ", ");
            stringBuilder.Append("label = " + _label + ", ");
            stringBuilder.Append("length = " + _length + ", ");
            stringBuilder.Append("start_position = " + _startPosition + ", ");
            stringBuilder.Append("odor_specification = " + _odorSpecification + ", ");
            stringBuilder.Append("reward_specification = " + _rewardSpecification + ", ");
            stringBuilder.Append("render_specification = " + _renderSpecification + ", ");
            stringBuilder.Append("treadmill_specification = " + _treadmillSpecification);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VirtualSiteGeneration
    {
    
        private VirtualSiteGenerator _interSite;
    
        private VirtualSiteGenerator _interPatch;
    
        private VirtualSiteGenerator _postPatch;
    
        private VirtualSiteGenerator _rewardSite;
    
        public VirtualSiteGeneration()
        {
        }
    
        protected VirtualSiteGeneration(VirtualSiteGeneration other)
        {
            _interSite = other._interSite;
            _interPatch = other._interPatch;
            _postPatch = other._postPatch;
            _rewardSite = other._rewardSite;
        }
    
        /// <summary>
        /// Generator of the inter-site virtual sites
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_site")]
        [System.ComponentModel.DescriptionAttribute("Generator of the inter-site virtual sites")]
        public VirtualSiteGenerator InterSite
        {
            get
            {
                return _interSite;
            }
            set
            {
                _interSite = value;
            }
        }
    
        /// <summary>
        /// Generator of the inter-patch virtual sites
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_patch")]
        [System.ComponentModel.DescriptionAttribute("Generator of the inter-patch virtual sites")]
        public VirtualSiteGenerator InterPatch
        {
            get
            {
                return _interPatch;
            }
            set
            {
                _interPatch = value;
            }
        }
    
        /// <summary>
        /// Generator of the post-patch virtual sites
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("post_patch")]
        [System.ComponentModel.DescriptionAttribute("Generator of the post-patch virtual sites")]
        public VirtualSiteGenerator PostPatch
        {
            get
            {
                return _postPatch;
            }
            set
            {
                _postPatch = value;
            }
        }
    
        /// <summary>
        /// Generator of the reward-site virtual sites
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_site")]
        [System.ComponentModel.DescriptionAttribute("Generator of the reward-site virtual sites")]
        public VirtualSiteGenerator RewardSite
        {
            get
            {
                return _rewardSite;
            }
            set
            {
                _rewardSite = value;
            }
        }
    
        public System.IObservable<VirtualSiteGeneration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VirtualSiteGeneration(this)));
        }
    
        public System.IObservable<VirtualSiteGeneration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VirtualSiteGeneration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("inter_site = " + _interSite + ", ");
            stringBuilder.Append("inter_patch = " + _interPatch + ", ");
            stringBuilder.Append("post_patch = " + _postPatch + ", ");
            stringBuilder.Append("reward_site = " + _rewardSite);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VirtualSiteGenerator
    {
    
        private RenderSpecification _renderSpecification;
    
        private VirtualSiteLabels _label = AindVrForagingDataSchema.TaskLogic.VirtualSiteLabels.Unspecified;
    
        private Distribution _lengthDistribution;
    
        public VirtualSiteGenerator()
        {
        }
    
        protected VirtualSiteGenerator(VirtualSiteGenerator other)
        {
            _renderSpecification = other._renderSpecification;
            _label = other._label;
            _lengthDistribution = other._lengthDistribution;
        }
    
        /// <summary>
        /// Contrast of the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("render_specification")]
        [System.ComponentModel.DescriptionAttribute("Contrast of the environment")]
        public RenderSpecification RenderSpecification
        {
            get
            {
                return _renderSpecification;
            }
            set
            {
                _renderSpecification = value;
            }
        }
    
        /// <summary>
        /// Label of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [System.ComponentModel.DescriptionAttribute("Label of the virtual site")]
        public VirtualSiteLabels Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        /// <summary>
        /// Distribution of the length of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("length_distribution")]
        [System.ComponentModel.DescriptionAttribute("Distribution of the length of the virtual site")]
        public Distribution LengthDistribution
        {
            get
            {
                return _lengthDistribution;
            }
            set
            {
                _lengthDistribution = value;
            }
        }
    
        public System.IObservable<VirtualSiteGenerator> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VirtualSiteGenerator(this)));
        }
    
        public System.IObservable<VirtualSiteGenerator> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VirtualSiteGenerator(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("render_specification = " + _renderSpecification + ", ");
            stringBuilder.Append("label = " + _label + ", ");
            stringBuilder.Append("length_distribution = " + _lengthDistribution);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum VirtualSiteLabels
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Unspecified")]
        Unspecified = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="InterPatch")]
        InterPatch = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="PostPatch")]
        PostPatch = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="RewardSite")]
        RewardSite = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="InterSite")]
        InterSite = 4,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VisualCorridor
    {
    
        private int _id = 0;
    
        private Size _size;
    
        private double _startPosition = 0D;
    
        private double _length = 120D;
    
        private WallTextures _textures = new WallTextures();
    
        public VisualCorridor()
        {
        }
    
        protected VisualCorridor(VisualCorridor other)
        {
            _id = other._id;
            _size = other._size;
            _startPosition = other._startPosition;
            _length = other._length;
            _textures = other._textures;
        }
    
        /// <summary>
        /// Id of the visual corridor object
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        [System.ComponentModel.DescriptionAttribute("Id of the visual corridor object")]
        public int Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
    
        /// <summary>
        /// Size of the corridor (cm)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("size")]
        [System.ComponentModel.DescriptionAttribute("Size of the corridor (cm)")]
        public Size Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
    
        /// <summary>
        /// Start position of the corridor (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("start_position")]
        [System.ComponentModel.DescriptionAttribute("Start position of the corridor (cm)")]
        public double StartPosition
        {
            get
            {
                return _startPosition;
            }
            set
            {
                _startPosition = value;
            }
        }
    
        /// <summary>
        /// Length of the corridor site (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("length")]
        [System.ComponentModel.DescriptionAttribute("Length of the corridor site (cm)")]
        public double Length
        {
            get
            {
                return _length;
            }
            set
            {
                _length = value;
            }
        }
    
        /// <summary>
        /// The textures of the corridor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("textures", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The textures of the corridor")]
        public WallTextures Textures
        {
            get
            {
                return _textures;
            }
            set
            {
                _textures = value;
            }
        }
    
        public System.IObservable<VisualCorridor> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VisualCorridor(this)));
        }
    
        public System.IObservable<VisualCorridor> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VisualCorridor(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("id = " + _id + ", ");
            stringBuilder.Append("size = " + _size + ", ");
            stringBuilder.Append("start_position = " + _startPosition + ", ");
            stringBuilder.Append("length = " + _length + ", ");
            stringBuilder.Append("textures = " + _textures);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WallTextures
    {
    
        private Texture _floor = new Texture();
    
        private Texture _ceiling = new Texture();
    
        private Texture _left = new Texture();
    
        private Texture _right = new Texture();
    
        public WallTextures()
        {
        }
    
        protected WallTextures(WallTextures other)
        {
            _floor = other._floor;
            _ceiling = other._ceiling;
            _left = other._left;
            _right = other._right;
        }
    
        /// <summary>
        /// The texture of the floor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("floor", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The texture of the floor")]
        public Texture Floor
        {
            get
            {
                return _floor;
            }
            set
            {
                _floor = value;
            }
        }
    
        /// <summary>
        /// The texture of the ceiling
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ceiling", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The texture of the ceiling")]
        public Texture Ceiling
        {
            get
            {
                return _ceiling;
            }
            set
            {
                _ceiling = value;
            }
        }
    
        /// <summary>
        /// The texture of the left
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("left", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The texture of the left")]
        public Texture Left
        {
            get
            {
                return _left;
            }
            set
            {
                _left = value;
            }
        }
    
        /// <summary>
        /// The texture of the right
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("right", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The texture of the right")]
        public Texture Right
        {
            get
            {
                return _right;
            }
            set
            {
                _right = value;
            }
        }
    
        public System.IObservable<WallTextures> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WallTextures(this)));
        }
    
        public System.IObservable<WallTextures> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WallTextures(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("floor = " + _floor + ", ");
            stringBuilder.Append("ceiling = " + _ceiling + ", ");
            stringBuilder.Append("left = " + _left + ", ");
            stringBuilder.Append("right = " + _right);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingTaskLogic
    {
    
        private string _name = "AindVrForaging";
    
        private string _description = "";
    
        private AindVrForagingTaskParameters _taskParameters = new AindVrForagingTaskParameters();
    
        private string _version = "0.4.0";
    
        private string _stageName;
    
        public AindVrForagingTaskLogic()
        {
        }
    
        protected AindVrForagingTaskLogic(AindVrForagingTaskLogic other)
        {
            _name = other._name;
            _description = other._description;
            _taskParameters = other._taskParameters;
            _version = other._version;
            _stageName = other._stageName;
        }
    
        /// <summary>
        /// Name of the task logic
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [System.ComponentModel.DescriptionAttribute("Name of the task logic")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// Description of the task.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        [System.ComponentModel.DescriptionAttribute("Description of the task.")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        /// <summary>
        /// Parameters of the task logic
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("task_parameters", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Parameters of the task logic")]
        public AindVrForagingTaskParameters TaskParameters
        {
            get
            {
                return _taskParameters;
            }
            set
            {
                _taskParameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Optional stage name the `Task` object instance represents.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stage_name")]
        [System.ComponentModel.DescriptionAttribute("Optional stage name the `Task` object instance represents.")]
        public string StageName
        {
            get
            {
                return _stageName;
            }
            set
            {
                _stageName = value;
            }
        }
    
        public System.IObservable<AindVrForagingTaskLogic> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindVrForagingTaskLogic(this)));
        }
    
        public System.IObservable<AindVrForagingTaskLogic> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindVrForagingTaskLogic(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("task_parameters = " + _taskParameters + ", ");
            stringBuilder.Append("version = " + _version + ", ");
            stringBuilder.Append("stage_name = " + _stageName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TruncationParameters2
    {
    
        public TruncationParameters2()
        {
        }
    
        protected TruncationParameters2(TruncationParameters2 other)
        {
        }
    
        public System.IObservable<TruncationParameters2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TruncationParameters2(this)));
        }
    
        public System.IObservable<TruncationParameters2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TruncationParameters2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ScalingParameters2
    {
    
        public ScalingParameters2()
        {
        }
    
        protected ScalingParameters2(ScalingParameters2 other)
        {
        }
    
        public System.IObservable<ScalingParameters2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalingParameters2(this)));
        }
    
        public System.IObservable<ScalingParameters2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalingParameters2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; private set; }

        public System.Type Type { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Scalar>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    public partial class MatchDistribution : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Distribution);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchDistribution),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Distribution> source)
            where TResult : Distribution
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Distribution>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ConstantFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LinearFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PowerFunction>))]
    public partial class MatchRewardFunction : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(RewardFunction);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchRewardFunction),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<RewardFunction> source)
            where TResult : RewardFunction
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<RewardFunction>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HabituationSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ForagingSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DebugSettings>))]
    public partial class MatchTaskModeSettings : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(TaskModeSettings);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchTaskModeSettings),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<TaskModeSettings> source)
            where TResult : TaskModeSettings
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<TaskModeSettings>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingTaskParameters> source)
        {
            return Process<AindVrForagingTaskParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AudioControl> source)
        {
            return Process<AudioControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistribution> source)
        {
            return Process<BetaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistributionParameters> source)
        {
            return Process<BetaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistribution> source)
        {
            return Process<BinomialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistributionParameters> source)
        {
            return Process<BinomialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ConstantFunction> source)
        {
            return Process<ConstantFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DebugSettings> source)
        {
            return Process<DebugSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Distribution> source)
        {
            return Process<Distribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EnvironmentStatistics> source)
        {
            return Process<EnvironmentStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistribution> source)
        {
            return Process<ExponentialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistributionParameters> source)
        {
            return Process<ExponentialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ForagingSettings> source)
        {
            return Process<ForagingSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistribution> source)
        {
            return Process<GammaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistributionParameters> source)
        {
            return Process<GammaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HabituationSettings> source)
        {
            return Process<HabituationSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LinearFunction> source)
        {
            return Process<LinearFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistribution> source)
        {
            return Process<LogNormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistributionParameters> source)
        {
            return Process<LogNormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Matrix2D> source)
        {
            return Process<Matrix2D>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MovableSpoutControl> source)
        {
            return Process<MovableSpoutControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistribution> source)
        {
            return Process<NormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistributionParameters> source)
        {
            return Process<NormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdater> source)
        {
            return Process<NumericalUpdater>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdaterParameters> source)
        {
            return Process<NumericalUpdaterParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorControl> source)
        {
            return Process<OdorControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorSpecification> source)
        {
            return Process<OdorSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperantLogic> source)
        {
            return Process<OperantLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperationControl> source)
        {
            return Process<OperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchRewardFunction> source)
        {
            return Process<PatchRewardFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchStatistics> source)
        {
            return Process<PatchStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistribution> source)
        {
            return Process<PoissonDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistributionParameters> source)
        {
            return Process<PoissonDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PositionControl> source)
        {
            return Process<PositionControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PowerFunction> source)
        {
            return Process<PowerFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RenderSpecification> source)
        {
            return Process<RenderSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardFunction> source)
        {
            return Process<RewardFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSpecification> source)
        {
            return Process<RewardSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Scalar> source)
        {
            return Process<Scalar>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalarDistributionParameter> source)
        {
            return Process<ScalarDistributionParameter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters> source)
        {
            return Process<ScalingParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ServoMotor> source)
        {
            return Process<ServoMotor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Size> source)
        {
            return Process<Size>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TaskModeSettings> source)
        {
            return Process<TaskModeSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Texture> source)
        {
            return Process<Texture>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TreadmillSpecification> source)
        {
            return Process<TreadmillSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters> source)
        {
            return Process<TruncationParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistribution> source)
        {
            return Process<UniformDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistributionParameters> source)
        {
            return Process<UniformDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Vector3> source)
        {
            return Process<Vector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSite> source)
        {
            return Process<VirtualSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSiteGeneration> source)
        {
            return Process<VirtualSiteGeneration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSiteGenerator> source)
        {
            return Process<VirtualSiteGenerator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VisualCorridor> source)
        {
            return Process<VisualCorridor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WallTextures> source)
        {
            return Process<WallTextures>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingTaskLogic> source)
        {
            return Process<AindVrForagingTaskLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters2> source)
        {
            return Process<TruncationParameters2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters2> source)
        {
            return Process<ScalingParameters2>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingTaskParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AudioControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ConstantFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DebugSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Distribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EnvironmentStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ForagingSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HabituationSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LinearFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Matrix2D>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MovableSpoutControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdater>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdaterParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperantLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchRewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PositionControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PowerFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RenderSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Scalar>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalarDistributionParameter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ServoMotor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Size>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TaskModeSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Texture>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TreadmillSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Vector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSiteGeneration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSiteGenerator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VisualCorridor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WallTextures>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingTaskLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters2>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingTaskLogic>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}