//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema.AindVrForagingSession
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Enumeration of Angle Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum AngleUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="radians")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="radians")]
        Radians = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="degrees")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="degrees")]
        Degrees = 1,
    }


    /// <summary>
    /// A simple model associating a name with an abbreviation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A simple model associating a name with an abbreviation")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BaseName
    {
    
        private string _name;
    
        private string _abbreviation;
    
        public BaseName()
        {
        }
    
        protected BaseName(BaseName other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<BaseName> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BaseName(this)));
        }
    
        public System.IObservable<BaseName> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BaseName(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of behavior parameters. Provides a high level description of stimulus.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of behavior parameters. Provides a high level description of stimulus" +
        ".")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BehaviorStimulation
    {
    
        private object _stimulus_type;
    
        private string _behavior_name;
    
        private int _session_number;
    
        private System.Collections.Generic.List<Software> _behavior_software = new System.Collections.Generic.List<Software>();
    
        private Software _behavior_script = new Software();
    
        private object _output_parameters = new object();
    
        private Reward_consumed_during_epoch _reward_consumed_during_epoch;
    
        private VolumeUnit _reward_consumed_unit = AindVrForagingDataSchema.AindVrForagingSession.VolumeUnit.Microliter;
    
        private int? _trials_total;
    
        private int? _trials_finished;
    
        private int? _trials_rewarded;
    
        private string _notes;
    
        public BehaviorStimulation()
        {
        }
    
        protected BehaviorStimulation(BehaviorStimulation other)
        {
            _stimulus_type = other._stimulus_type;
            _behavior_name = other._behavior_name;
            _session_number = other._session_number;
            _behavior_software = other._behavior_software;
            _behavior_script = other._behavior_script;
            _output_parameters = other._output_parameters;
            _reward_consumed_during_epoch = other._reward_consumed_during_epoch;
            _reward_consumed_unit = other._reward_consumed_unit;
            _trials_total = other._trials_total;
            _trials_finished = other._trials_finished;
            _trials_rewarded = other._trials_rewarded;
            _notes = other._notes;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_type")]
        public object Stimulus_type
        {
            get
            {
                return _stimulus_type;
            }
            set
            {
                _stimulus_type = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_name")]
        public string Behavior_name
        {
            get
            {
                return _behavior_name;
            }
            set
            {
                _behavior_name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("session_number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_number")]
        public int Session_number
        {
            get
            {
                return _session_number;
            }
            set
            {
                _session_number = value;
            }
        }
    
        /// <summary>
        /// The software used to control the behavior (e.g. Bonsai)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_software", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_software")]
        [System.ComponentModel.DescriptionAttribute("The software used to control the behavior (e.g. Bonsai)")]
        public System.Collections.Generic.List<Software> Behavior_software
        {
            get
            {
                return _behavior_software;
            }
            set
            {
                _behavior_software = value;
            }
        }
    
        /// <summary>
        /// provide URL to the commit of the script and the parameters used
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_script", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_script")]
        [System.ComponentModel.DescriptionAttribute("provide URL to the commit of the script and the parameters used")]
        public Software Behavior_script
        {
            get
            {
                return _behavior_script;
            }
            set
            {
                _behavior_script = value;
            }
        }
    
        /// <summary>
        /// Performance metrics from session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output_parameters", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output_parameters")]
        [System.ComponentModel.DescriptionAttribute("Performance metrics from session")]
        public object Output_parameters
        {
            get
            {
                return _output_parameters;
            }
            set
            {
                _output_parameters = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consumed_during_epoch", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_consumed_during_epoch")]
        public Reward_consumed_during_epoch Reward_consumed_during_epoch
        {
            get
            {
                return _reward_consumed_during_epoch;
            }
            set
            {
                _reward_consumed_during_epoch = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consumed_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_consumed_unit")]
        public VolumeUnit Reward_consumed_unit
        {
            get
            {
                return _reward_consumed_unit;
            }
            set
            {
                _reward_consumed_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trials_total")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials_total")]
        public int? Trials_total
        {
            get
            {
                return _trials_total;
            }
            set
            {
                _trials_total = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trials_finished")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials_finished")]
        public int? Trials_finished
        {
            get
            {
                return _trials_finished;
            }
            set
            {
                _trials_finished = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trials_rewarded")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials_rewarded")]
        public int? Trials_rewarded
        {
            get
            {
                return _trials_rewarded;
            }
            set
            {
                _trials_rewarded = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<BehaviorStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BehaviorStimulation(this)));
        }
    
        public System.IObservable<BehaviorStimulation> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BehaviorStimulation(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("stimulus_type = " + _stimulus_type + ", ");
            stringBuilder.Append("behavior_name = " + _behavior_name + ", ");
            stringBuilder.Append("session_number = " + _session_number + ", ");
            stringBuilder.Append("behavior_software = " + _behavior_software + ", ");
            stringBuilder.Append("behavior_script = " + _behavior_script + ", ");
            stringBuilder.Append("output_parameters = " + _output_parameters + ", ");
            stringBuilder.Append("reward_consumed_during_epoch = " + _reward_consumed_during_epoch + ", ");
            stringBuilder.Append("reward_consumed_unit = " + _reward_consumed_unit + ", ");
            stringBuilder.Append("trials_total = " + _trials_total + ", ");
            stringBuilder.Append("trials_finished = " + _trials_finished + ", ");
            stringBuilder.Append("trials_rewarded = " + _trials_rewarded + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// BehaviorVideos
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("BehaviorVideos")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BehaviorVideos
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public BehaviorVideos()
        {
        }
    
        protected BehaviorVideos(BehaviorVideos other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<BehaviorVideos> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BehaviorVideos(this)));
        }
    
        public System.IObservable<BehaviorVideos> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BehaviorVideos(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Generic calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Generic calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Calibration
    {
    
        private System.DateTimeOffset _calibration_date;
    
        private string _device_name;
    
        private string _description;
    
        private object _input;
    
        private object _output;
    
        private string _notes;
    
        public Calibration()
        {
        }
    
        protected Calibration(Calibration other)
        {
            _calibration_date = other._calibration_date;
            _device_name = other._device_name;
            _description = other._description;
            _input = other._input;
            _output = other._output;
            _notes = other._notes;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_date")]
        public System.DateTimeOffset Calibration_date
        {
            get
            {
                return _calibration_date;
            }
            set
            {
                _calibration_date = value;
            }
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string Device_name
        {
            get
            {
                return _device_name;
            }
            set
            {
                _device_name = value;
            }
        }
    
        /// <summary>
        /// Brief description of what is being calibrated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="description")]
        [System.ComponentModel.DescriptionAttribute("Brief description of what is being calibrated")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        /// <summary>
        /// Calibration input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="input")]
        [System.ComponentModel.DescriptionAttribute("Calibration input")]
        public object Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        /// <summary>
        /// Calibration output
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output")]
        [System.ComponentModel.DescriptionAttribute("Calibration output")]
        public object Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<Calibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Calibration(this)));
        }
    
        public System.IObservable<Calibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Calibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("calibration_date = " + _calibration_date + ", ");
            stringBuilder.Append("device_name = " + _device_name + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("input = " + _input + ", ");
            stringBuilder.Append("output = " + _output + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Coordinates in CCF template space
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Coordinates in CCF template space")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CcfCoords
    {
    
        private Ml _ml;
    
        private Ap _ap;
    
        private Dv _dv;
    
        private SizeUnit _unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _ccf_version;
    
        public CcfCoords()
        {
        }
    
        protected CcfCoords(CcfCoords other)
        {
            _ml = other._ml;
            _ap = other._ap;
            _dv = other._dv;
            _unit = other._unit;
            _ccf_version = other._ccf_version;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ml", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ml")]
        public Ml Ml
        {
            get
            {
                return _ml;
            }
            set
            {
                _ml = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ap", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ap")]
        public Ap Ap
        {
            get
            {
                return _ap;
            }
            set
            {
                _ap = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dv", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dv")]
        public Dv Dv
        {
            get
            {
                return _dv;
            }
            set
            {
                _dv = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="unit")]
        public SizeUnit Unit
        {
            get
            {
                return _unit;
            }
            set
            {
                _unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("ccf_version")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ccf_version")]
        public string Ccf_version
        {
            get
            {
                return _ccf_version;
            }
            set
            {
                _ccf_version = value;
            }
        }
    
        public System.IObservable<CcfCoords> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CcfCoords(this)));
        }
    
        public System.IObservable<CcfCoords> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CcfCoords(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("ml = " + _ml + ", ");
            stringBuilder.Append("ap = " + _ap + ", ");
            stringBuilder.Append("dv = " + _dv + ", ");
            stringBuilder.Append("unit = " + _unit + ", ");
            stringBuilder.Append("ccf_version = " + _ccf_version);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Concentraion units
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ConcentrationUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="molar")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="molar")]
        Molar = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="micromolar")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="micromolar")]
        Micromolar = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanomolar")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanomolar")]
        Nanomolar = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="% m/m")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="% m/m")]
        @__m_m = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="% v/v")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="% v/v")]
        @__v_v = 4,
    }


    /// <summary>
    /// Confocal
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Confocal")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Confocal
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public Confocal()
        {
        }
    
        protected Confocal(Confocal other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Confocal> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Confocal(this)));
        }
    
        public System.IObservable<Confocal> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Confocal(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Coordinates in a 3D grid
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Coordinates in a 3D grid")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Coordinates3d
    {
    
        private X _x;
    
        private Y _y;
    
        private Z _z;
    
        private SizeUnit _unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        public Coordinates3d()
        {
        }
    
        protected Coordinates3d(Coordinates3d other)
        {
            _x = other._x;
            _y = other._y;
            _z = other._z;
            _unit = other._unit;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("x", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="x")]
        public X X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("y", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="y")]
        public Y Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("z", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="z")]
        public Z Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="unit")]
        public SizeUnit Unit
        {
            get
            {
                return _unit;
            }
            set
            {
                _unit = value;
            }
        }
    
        public System.IObservable<Coordinates3d> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Coordinates3d(this)));
        }
    
        public System.IObservable<Coordinates3d> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Coordinates3d(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y + ", ");
            stringBuilder.Append("z = " + _z + ", ");
            stringBuilder.Append("unit = " + _unit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of detector settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of detector settings")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DetectorConfig
    {
    
        private string _name;
    
        private Exposure_time _exposure_time;
    
        private TimeUnit _exposure_time_unit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Millisecond;
    
        private TriggerType _trigger_type;
    
        public DetectorConfig()
        {
        }
    
        protected DetectorConfig(DetectorConfig other)
        {
            _name = other._name;
            _exposure_time = other._exposure_time;
            _exposure_time_unit = other._exposure_time_unit;
            _trigger_type = other._trigger_type;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exposure_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposure_time")]
        public Exposure_time Exposure_time
        {
            get
            {
                return _exposure_time;
            }
            set
            {
                _exposure_time = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exposure_time_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposure_time_unit")]
        public TimeUnit Exposure_time_unit
        {
            get
            {
                return _exposure_time_unit;
            }
            set
            {
                _exposure_time_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trigger_type", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trigger_type")]
        public TriggerType Trigger_type
        {
            get
            {
                return _trigger_type;
            }
            set
            {
                _trigger_type = value;
            }
        }
    
        public System.IObservable<DetectorConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DetectorConfig(this)));
        }
    
        public System.IObservable<DetectorConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DetectorConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("exposure_time = " + _exposure_time + ", ");
            stringBuilder.Append("exposure_time_unit = " + _exposure_time_unit + ", ");
            stringBuilder.Append("trigger_type = " + _trigger_type);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Movable module that is mounted on the ephys dome insertion system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Movable module that is mounted on the ephys dome insertion system")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DomeModule
    {
    
        private string _assembly_name;
    
        private Arc_angle _arc_angle;
    
        private Module_angle _module_angle;
    
        private AngleUnit _angle_unit = AindVrForagingDataSchema.AindVrForagingSession.AngleUnit.Degrees;
    
        private Rotation_angle _rotation_angle;
    
        private string _coordinate_transform;
    
        private System.DateTimeOffset? _calibration_date;
    
        private string _notes;
    
        public DomeModule()
        {
        }
    
        protected DomeModule(DomeModule other)
        {
            _assembly_name = other._assembly_name;
            _arc_angle = other._arc_angle;
            _module_angle = other._module_angle;
            _angle_unit = other._angle_unit;
            _rotation_angle = other._rotation_angle;
            _coordinate_transform = other._coordinate_transform;
            _calibration_date = other._calibration_date;
            _notes = other._notes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("assembly_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="assembly_name")]
        public string Assembly_name
        {
            get
            {
                return _assembly_name;
            }
            set
            {
                _assembly_name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("arc_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="arc_angle")]
        public Arc_angle Arc_angle
        {
            get
            {
                return _arc_angle;
            }
            set
            {
                _arc_angle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("module_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="module_angle")]
        public Module_angle Module_angle
        {
            get
            {
                return _module_angle;
            }
            set
            {
                _module_angle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("angle_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="angle_unit")]
        public AngleUnit Angle_unit
        {
            get
            {
                return _angle_unit;
            }
            set
            {
                _angle_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rotation_angle")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rotation_angle")]
        public Rotation_angle Rotation_angle
        {
            get
            {
                return _rotation_angle;
            }
            set
            {
                _rotation_angle = value;
            }
        }
    
        /// <summary>
        /// Path to coordinate transform
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("coordinate_transform")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coordinate_transform")]
        [System.ComponentModel.DescriptionAttribute("Path to coordinate transform")]
        public string Coordinate_transform
        {
            get
            {
                return _coordinate_transform;
            }
            set
            {
                _coordinate_transform = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_date")]
        public System.DateTimeOffset? Calibration_date
        {
            get
            {
                return _calibration_date;
            }
            set
            {
                _calibration_date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<DomeModule> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DomeModule(this)));
        }
    
        public System.IObservable<DomeModule> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DomeModule(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("assembly_name = " + _assembly_name + ", ");
            stringBuilder.Append("arc_angle = " + _arc_angle + ", ");
            stringBuilder.Append("module_angle = " + _module_angle + ", ");
            stringBuilder.Append("angle_unit = " + _angle_unit + ", ");
            stringBuilder.Append("rotation_angle = " + _rotation_angle + ", ");
            stringBuilder.Append("coordinate_transform = " + _coordinate_transform + ", ");
            stringBuilder.Append("calibration_date = " + _calibration_date + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Ecephys
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Ecephys")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Ecephys
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public Ecephys()
        {
        }
    
        protected Ecephys(Ecephys other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Ecephys> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Ecephys(this)));
        }
    
        public System.IObservable<Ecephys> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Ecephys(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Electromyography
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Electromyography")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Electromyography
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public Electromyography()
        {
        }
    
        protected Electromyography(Electromyography other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Electromyography> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Electromyography(this)));
        }
    
        public System.IObservable<Electromyography> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Electromyography(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Probe recorded in a Stream
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Probe recorded in a Stream")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class EphysModule
    {
    
        private string _assembly_name;
    
        private Arc_angle2 _arc_angle;
    
        private Module_angle2 _module_angle;
    
        private AngleUnit _angle_unit = AindVrForagingDataSchema.AindVrForagingSession.AngleUnit.Degrees;
    
        private Rotation_angle2 _rotation_angle;
    
        private string _coordinate_transform;
    
        private System.DateTimeOffset? _calibration_date;
    
        private string _notes;
    
        private string _primary_targeted_structure;
    
        private System.Collections.Generic.List<CcfCoords> _targeted_ccf_coordinates = new System.Collections.Generic.List<CcfCoords>();
    
        private Coordinates3d _manipulator_coordinates = new Coordinates3d();
    
        private System.Collections.Generic.List<EphysProbeConfig> _ephys_probes = new System.Collections.Generic.List<EphysProbeConfig>();
    
        public EphysModule()
        {
        }
    
        protected EphysModule(EphysModule other)
        {
            _assembly_name = other._assembly_name;
            _arc_angle = other._arc_angle;
            _module_angle = other._module_angle;
            _angle_unit = other._angle_unit;
            _rotation_angle = other._rotation_angle;
            _coordinate_transform = other._coordinate_transform;
            _calibration_date = other._calibration_date;
            _notes = other._notes;
            _primary_targeted_structure = other._primary_targeted_structure;
            _targeted_ccf_coordinates = other._targeted_ccf_coordinates;
            _manipulator_coordinates = other._manipulator_coordinates;
            _ephys_probes = other._ephys_probes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("assembly_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="assembly_name")]
        public string Assembly_name
        {
            get
            {
                return _assembly_name;
            }
            set
            {
                _assembly_name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("arc_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="arc_angle")]
        public Arc_angle2 Arc_angle
        {
            get
            {
                return _arc_angle;
            }
            set
            {
                _arc_angle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("module_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="module_angle")]
        public Module_angle2 Module_angle
        {
            get
            {
                return _module_angle;
            }
            set
            {
                _module_angle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("angle_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="angle_unit")]
        public AngleUnit Angle_unit
        {
            get
            {
                return _angle_unit;
            }
            set
            {
                _angle_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rotation_angle")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rotation_angle")]
        public Rotation_angle2 Rotation_angle
        {
            get
            {
                return _rotation_angle;
            }
            set
            {
                _rotation_angle = value;
            }
        }
    
        /// <summary>
        /// Path to coordinate transform
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("coordinate_transform")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coordinate_transform")]
        [System.ComponentModel.DescriptionAttribute("Path to coordinate transform")]
        public string Coordinate_transform
        {
            get
            {
                return _coordinate_transform;
            }
            set
            {
                _coordinate_transform = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_date")]
        public System.DateTimeOffset? Calibration_date
        {
            get
            {
                return _calibration_date;
            }
            set
            {
                _calibration_date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("primary_targeted_structure", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="primary_targeted_structure")]
        public string Primary_targeted_structure
        {
            get
            {
                return _primary_targeted_structure;
            }
            set
            {
                _primary_targeted_structure = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_ccf_coordinates")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_ccf_coordinates")]
        public System.Collections.Generic.List<CcfCoords> Targeted_ccf_coordinates
        {
            get
            {
                return _targeted_ccf_coordinates;
            }
            set
            {
                _targeted_ccf_coordinates = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator_coordinates", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="manipulator_coordinates")]
        public Coordinates3d Manipulator_coordinates
        {
            get
            {
                return _manipulator_coordinates;
            }
            set
            {
                _manipulator_coordinates = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ephys_probes", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ephys_probes")]
        public System.Collections.Generic.List<EphysProbeConfig> Ephys_probes
        {
            get
            {
                return _ephys_probes;
            }
            set
            {
                _ephys_probes = value;
            }
        }
    
        public System.IObservable<EphysModule> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new EphysModule(this)));
        }
    
        public System.IObservable<EphysModule> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new EphysModule(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("assembly_name = " + _assembly_name + ", ");
            stringBuilder.Append("arc_angle = " + _arc_angle + ", ");
            stringBuilder.Append("module_angle = " + _module_angle + ", ");
            stringBuilder.Append("angle_unit = " + _angle_unit + ", ");
            stringBuilder.Append("rotation_angle = " + _rotation_angle + ", ");
            stringBuilder.Append("coordinate_transform = " + _coordinate_transform + ", ");
            stringBuilder.Append("calibration_date = " + _calibration_date + ", ");
            stringBuilder.Append("notes = " + _notes + ", ");
            stringBuilder.Append("primary_targeted_structure = " + _primary_targeted_structure + ", ");
            stringBuilder.Append("targeted_ccf_coordinates = " + _targeted_ccf_coordinates + ", ");
            stringBuilder.Append("manipulator_coordinates = " + _manipulator_coordinates + ", ");
            stringBuilder.Append("ephys_probes = " + _ephys_probes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Probes in a EphysProbeModule
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Probes in a EphysProbeModule")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class EphysProbeConfig
    {
    
        private string _name;
    
        private System.Collections.Generic.List<string> _other_targeted_structures = new System.Collections.Generic.List<string>();
    
        public EphysProbeConfig()
        {
        }
    
        protected EphysProbeConfig(EphysProbeConfig other)
        {
            _name = other._name;
            _other_targeted_structures = other._other_targeted_structures;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("other_targeted_structures")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="other_targeted_structures")]
        public System.Collections.Generic.List<string> Other_targeted_structures
        {
            get
            {
                return _other_targeted_structures;
            }
            set
            {
                _other_targeted_structures = value;
            }
        }
    
        public System.IObservable<EphysProbeConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new EphysProbeConfig(this)));
        }
    
        public System.IObservable<EphysProbeConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new EphysProbeConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("other_targeted_structures = " + _other_targeted_structures);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Fib
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Fib")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Fib
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public Fib()
        {
        }
    
        protected Fib(Fib other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Fib> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Fib(this)));
        }
    
        public System.IObservable<Fib> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Fib(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description for a fiber photometry configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description for a fiber photometry configuration")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FiberConnectionConfig
    {
    
        private string _patch_cord_name;
    
        private Patch_cord_output_power _patch_cord_output_power;
    
        private PowerUnit _output_power_unit = AindVrForagingDataSchema.AindVrForagingSession.PowerUnit.Microwatt;
    
        private string _fiber_name;
    
        public FiberConnectionConfig()
        {
        }
    
        protected FiberConnectionConfig(FiberConnectionConfig other)
        {
            _patch_cord_name = other._patch_cord_name;
            _patch_cord_output_power = other._patch_cord_output_power;
            _output_power_unit = other._output_power_unit;
            _fiber_name = other._fiber_name;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("patch_cord_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="patch_cord_name")]
        public string Patch_cord_name
        {
            get
            {
                return _patch_cord_name;
            }
            set
            {
                _patch_cord_name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("patch_cord_output_power", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="patch_cord_output_power")]
        public Patch_cord_output_power Patch_cord_output_power
        {
            get
            {
                return _patch_cord_output_power;
            }
            set
            {
                _patch_cord_output_power = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output_power_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output_power_unit")]
        public PowerUnit Output_power_unit
        {
            get
            {
                return _output_power_unit;
            }
            set
            {
                _output_power_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fiber_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fiber_name")]
        public string Fiber_name
        {
            get
            {
                return _fiber_name;
            }
            set
            {
                _fiber_name = value;
            }
        }
    
        public System.IObservable<FiberConnectionConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FiberConnectionConfig(this)));
        }
    
        public System.IObservable<FiberConnectionConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FiberConnectionConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("patch_cord_name = " + _patch_cord_name + ", ");
            stringBuilder.Append("patch_cord_output_power = " + _patch_cord_output_power + ", ");
            stringBuilder.Append("output_power_unit = " + _output_power_unit + ", ");
            stringBuilder.Append("fiber_name = " + _fiber_name);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Inserted fiber photometry probe recorded in a stream
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Inserted fiber photometry probe recorded in a stream")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FiberModule
    {
    
        private string _assembly_name;
    
        private Arc_angle3 _arc_angle;
    
        private Module_angle3 _module_angle;
    
        private AngleUnit _angle_unit = AindVrForagingDataSchema.AindVrForagingSession.AngleUnit.Degrees;
    
        private Rotation_angle3 _rotation_angle;
    
        private string _coordinate_transform;
    
        private System.DateTimeOffset? _calibration_date;
    
        private string _notes;
    
        private string _primary_targeted_structure;
    
        private System.Collections.Generic.List<CcfCoords> _targeted_ccf_coordinates = new System.Collections.Generic.List<CcfCoords>();
    
        private Coordinates3d _manipulator_coordinates = new Coordinates3d();
    
        private System.Collections.Generic.List<FiberConnectionConfig> _fiber_connections = new System.Collections.Generic.List<FiberConnectionConfig>();
    
        public FiberModule()
        {
        }
    
        protected FiberModule(FiberModule other)
        {
            _assembly_name = other._assembly_name;
            _arc_angle = other._arc_angle;
            _module_angle = other._module_angle;
            _angle_unit = other._angle_unit;
            _rotation_angle = other._rotation_angle;
            _coordinate_transform = other._coordinate_transform;
            _calibration_date = other._calibration_date;
            _notes = other._notes;
            _primary_targeted_structure = other._primary_targeted_structure;
            _targeted_ccf_coordinates = other._targeted_ccf_coordinates;
            _manipulator_coordinates = other._manipulator_coordinates;
            _fiber_connections = other._fiber_connections;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("assembly_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="assembly_name")]
        public string Assembly_name
        {
            get
            {
                return _assembly_name;
            }
            set
            {
                _assembly_name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("arc_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="arc_angle")]
        public Arc_angle3 Arc_angle
        {
            get
            {
                return _arc_angle;
            }
            set
            {
                _arc_angle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("module_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="module_angle")]
        public Module_angle3 Module_angle
        {
            get
            {
                return _module_angle;
            }
            set
            {
                _module_angle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("angle_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="angle_unit")]
        public AngleUnit Angle_unit
        {
            get
            {
                return _angle_unit;
            }
            set
            {
                _angle_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rotation_angle")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rotation_angle")]
        public Rotation_angle3 Rotation_angle
        {
            get
            {
                return _rotation_angle;
            }
            set
            {
                _rotation_angle = value;
            }
        }
    
        /// <summary>
        /// Path to coordinate transform
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("coordinate_transform")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coordinate_transform")]
        [System.ComponentModel.DescriptionAttribute("Path to coordinate transform")]
        public string Coordinate_transform
        {
            get
            {
                return _coordinate_transform;
            }
            set
            {
                _coordinate_transform = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_date")]
        public System.DateTimeOffset? Calibration_date
        {
            get
            {
                return _calibration_date;
            }
            set
            {
                _calibration_date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("primary_targeted_structure", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="primary_targeted_structure")]
        public string Primary_targeted_structure
        {
            get
            {
                return _primary_targeted_structure;
            }
            set
            {
                _primary_targeted_structure = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_ccf_coordinates")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_ccf_coordinates")]
        public System.Collections.Generic.List<CcfCoords> Targeted_ccf_coordinates
        {
            get
            {
                return _targeted_ccf_coordinates;
            }
            set
            {
                _targeted_ccf_coordinates = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator_coordinates", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="manipulator_coordinates")]
        public Coordinates3d Manipulator_coordinates
        {
            get
            {
                return _manipulator_coordinates;
            }
            set
            {
                _manipulator_coordinates = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fiber_connections")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fiber_connections")]
        public System.Collections.Generic.List<FiberConnectionConfig> Fiber_connections
        {
            get
            {
                return _fiber_connections;
            }
            set
            {
                _fiber_connections = value;
            }
        }
    
        public System.IObservable<FiberModule> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FiberModule(this)));
        }
    
        public System.IObservable<FiberModule> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FiberModule(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("assembly_name = " + _assembly_name + ", ");
            stringBuilder.Append("arc_angle = " + _arc_angle + ", ");
            stringBuilder.Append("module_angle = " + _module_angle + ", ");
            stringBuilder.Append("angle_unit = " + _angle_unit + ", ");
            stringBuilder.Append("rotation_angle = " + _rotation_angle + ", ");
            stringBuilder.Append("coordinate_transform = " + _coordinate_transform + ", ");
            stringBuilder.Append("calibration_date = " + _calibration_date + ", ");
            stringBuilder.Append("notes = " + _notes + ", ");
            stringBuilder.Append("primary_targeted_structure = " + _primary_targeted_structure + ", ");
            stringBuilder.Append("targeted_ccf_coordinates = " + _targeted_ccf_coordinates + ", ");
            stringBuilder.Append("manipulator_coordinates = " + _manipulator_coordinates + ", ");
            stringBuilder.Append("fiber_connections = " + _fiber_connections);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of an imaging field of view
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of an imaging field of view")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FieldOfView
    {
    
        private int _index;
    
        private int _imaging_depth;
    
        private SizeUnit _imaging_depth_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _targeted_structure;
    
        private Fov_coordinate_ml _fov_coordinate_ml;
    
        private Fov_coordinate_ap _fov_coordinate_ap;
    
        private SizeUnit _fov_coordinate_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _fov_reference;
    
        private int _fov_width;
    
        private int _fov_height;
    
        private SizeUnit _fov_size_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Pixel;
    
        private string _magnification;
    
        private Fov_scale_factor _fov_scale_factor;
    
        private string _fov_scale_factor_unit = "um/pixel";
    
        private Frame_rate _frame_rate;
    
        private FrequencyUnit _frame_rate_unit = AindVrForagingDataSchema.AindVrForagingSession.FrequencyUnit.Hertz;
    
        private int? _coupled_fov_index;
    
        public FieldOfView()
        {
        }
    
        protected FieldOfView(FieldOfView other)
        {
            _index = other._index;
            _imaging_depth = other._imaging_depth;
            _imaging_depth_unit = other._imaging_depth_unit;
            _targeted_structure = other._targeted_structure;
            _fov_coordinate_ml = other._fov_coordinate_ml;
            _fov_coordinate_ap = other._fov_coordinate_ap;
            _fov_coordinate_unit = other._fov_coordinate_unit;
            _fov_reference = other._fov_reference;
            _fov_width = other._fov_width;
            _fov_height = other._fov_height;
            _fov_size_unit = other._fov_size_unit;
            _magnification = other._magnification;
            _fov_scale_factor = other._fov_scale_factor;
            _fov_scale_factor_unit = other._fov_scale_factor_unit;
            _frame_rate = other._frame_rate;
            _frame_rate_unit = other._frame_rate_unit;
            _coupled_fov_index = other._coupled_fov_index;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("imaging_depth", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="imaging_depth")]
        public int Imaging_depth
        {
            get
            {
                return _imaging_depth;
            }
            set
            {
                _imaging_depth = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("imaging_depth_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="imaging_depth_unit")]
        public SizeUnit Imaging_depth_unit
        {
            get
            {
                return _imaging_depth_unit;
            }
            set
            {
                _imaging_depth_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_structure", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_structure")]
        public string Targeted_structure
        {
            get
            {
                return _targeted_structure;
            }
            set
            {
                _targeted_structure = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ml", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ml")]
        public Fov_coordinate_ml Fov_coordinate_ml
        {
            get
            {
                return _fov_coordinate_ml;
            }
            set
            {
                _fov_coordinate_ml = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ap", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ap")]
        public Fov_coordinate_ap Fov_coordinate_ap
        {
            get
            {
                return _fov_coordinate_ap;
            }
            set
            {
                _fov_coordinate_ap = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_unit")]
        public SizeUnit Fov_coordinate_unit
        {
            get
            {
                return _fov_coordinate_unit;
            }
            set
            {
                _fov_coordinate_unit = value;
            }
        }
    
        /// <summary>
        /// Reference for ML/AP coordinates
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fov_reference", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_reference")]
        [System.ComponentModel.DescriptionAttribute("Reference for ML/AP coordinates")]
        public string Fov_reference
        {
            get
            {
                return _fov_reference;
            }
            set
            {
                _fov_reference = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_width", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_width")]
        public int Fov_width
        {
            get
            {
                return _fov_width;
            }
            set
            {
                _fov_width = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_height", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_height")]
        public int Fov_height
        {
            get
            {
                return _fov_height;
            }
            set
            {
                _fov_height = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_size_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_size_unit")]
        public SizeUnit Fov_size_unit
        {
            get
            {
                return _fov_size_unit;
            }
            set
            {
                _fov_size_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("magnification", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="magnification")]
        public string Magnification
        {
            get
            {
                return _magnification;
            }
            set
            {
                _magnification = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor")]
        public Fov_scale_factor Fov_scale_factor
        {
            get
            {
                return _fov_scale_factor;
            }
            set
            {
                _fov_scale_factor = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor_unit")]
        public string Fov_scale_factor_unit
        {
            get
            {
                return _fov_scale_factor_unit;
            }
            set
            {
                _fov_scale_factor_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate")]
        public Frame_rate Frame_rate
        {
            get
            {
                return _frame_rate;
            }
            set
            {
                _frame_rate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate_unit")]
        public FrequencyUnit Frame_rate_unit
        {
            get
            {
                return _frame_rate_unit;
            }
            set
            {
                _frame_rate_unit = value;
            }
        }
    
        /// <summary>
        /// Coupled planes for multiscope
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("coupled_fov_index")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coupled_fov_index")]
        [System.ComponentModel.DescriptionAttribute("Coupled planes for multiscope")]
        public int? Coupled_fov_index
        {
            get
            {
                return _coupled_fov_index;
            }
            set
            {
                _coupled_fov_index = value;
            }
        }
    
        public System.IObservable<FieldOfView> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FieldOfView(this)));
        }
    
        public System.IObservable<FieldOfView> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FieldOfView(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("index = " + _index + ", ");
            stringBuilder.Append("imaging_depth = " + _imaging_depth + ", ");
            stringBuilder.Append("imaging_depth_unit = " + _imaging_depth_unit + ", ");
            stringBuilder.Append("targeted_structure = " + _targeted_structure + ", ");
            stringBuilder.Append("fov_coordinate_ml = " + _fov_coordinate_ml + ", ");
            stringBuilder.Append("fov_coordinate_ap = " + _fov_coordinate_ap + ", ");
            stringBuilder.Append("fov_coordinate_unit = " + _fov_coordinate_unit + ", ");
            stringBuilder.Append("fov_reference = " + _fov_reference + ", ");
            stringBuilder.Append("fov_width = " + _fov_width + ", ");
            stringBuilder.Append("fov_height = " + _fov_height + ", ");
            stringBuilder.Append("fov_size_unit = " + _fov_size_unit + ", ");
            stringBuilder.Append("magnification = " + _magnification + ", ");
            stringBuilder.Append("fov_scale_factor = " + _fov_scale_factor + ", ");
            stringBuilder.Append("fov_scale_factor_unit = " + _fov_scale_factor_unit + ", ");
            stringBuilder.Append("frame_rate = " + _frame_rate + ", ");
            stringBuilder.Append("frame_rate_unit = " + _frame_rate_unit + ", ");
            stringBuilder.Append("coupled_fov_index = " + _coupled_fov_index);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Fmost
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Fmost")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Fmost
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public Fmost()
        {
        }
    
        protected Fmost(Fmost other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Fmost> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Fmost(this)));
        }
    
        public System.IObservable<Fmost> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Fmost(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of Frequency Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FrequencyUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="kilohertz")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="kilohertz")]
        Kilohertz = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="hertz")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="hertz")]
        Hertz = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="millihertz")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="millihertz")]
        Millihertz = 2,
    }


    /// <summary>
    /// Icephys
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Icephys")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Icephys
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public Icephys()
        {
        }
    
        protected Icephys(Icephys other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Icephys> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Icephys(this)));
        }
    
        public System.IObservable<Icephys> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Icephys(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Intrinsic signal imaging
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Intrinsic signal imaging")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Isi
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public Isi()
        {
        }
    
        protected Isi(Isi other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Isi> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Isi(this)));
        }
    
        public System.IObservable<Isi> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Isi(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of laser settings in a session
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of laser settings in a session")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LaserConfig
    {
    
        private object _device_type;
    
        private string _name;
    
        private int _wavelength;
    
        private SizeUnit _wavelength_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Nanometer;
    
        private Excitation_power _excitation_power;
    
        private PowerUnit _excitation_power_unit = AindVrForagingDataSchema.AindVrForagingSession.PowerUnit.Milliwatt;
    
        public LaserConfig()
        {
        }
    
        protected LaserConfig(LaserConfig other)
        {
            _device_type = other._device_type;
            _name = other._name;
            _wavelength = other._wavelength;
            _wavelength_unit = other._wavelength_unit;
            _excitation_power = other._excitation_power;
            _excitation_power_unit = other._excitation_power_unit;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_type")]
        public object Device_type
        {
            get
            {
                return _device_type;
            }
            set
            {
                _device_type = value;
            }
        }
    
        /// <summary>
        /// Must match rig json
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("Must match rig json")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("wavelength", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="wavelength")]
        public int Wavelength
        {
            get
            {
                return _wavelength;
            }
            set
            {
                _wavelength = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("wavelength_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="wavelength_unit")]
        public SizeUnit Wavelength_unit
        {
            get
            {
                return _wavelength_unit;
            }
            set
            {
                _wavelength_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power")]
        public Excitation_power Excitation_power
        {
            get
            {
                return _excitation_power;
            }
            set
            {
                _excitation_power = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power_unit")]
        public PowerUnit Excitation_power_unit
        {
            get
            {
                return _excitation_power_unit;
            }
            set
            {
                _excitation_power_unit = value;
            }
        }
    
        public System.IObservable<LaserConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LaserConfig(this)));
        }
    
        public System.IObservable<LaserConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LaserConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _device_type + ", ");
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("wavelength = " + _wavelength + ", ");
            stringBuilder.Append("wavelength_unit = " + _wavelength_unit + ", ");
            stringBuilder.Append("excitation_power = " + _excitation_power + ", ");
            stringBuilder.Append("excitation_power_unit = " + _excitation_power_unit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of LED settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of LED settings")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LightEmittingDiodeConfig
    {
    
        private object _device_type;
    
        private string _name;
    
        private Excitation_power2 _excitation_power;
    
        private PowerUnit _excitation_power_unit = AindVrForagingDataSchema.AindVrForagingSession.PowerUnit.Milliwatt;
    
        public LightEmittingDiodeConfig()
        {
        }
    
        protected LightEmittingDiodeConfig(LightEmittingDiodeConfig other)
        {
            _device_type = other._device_type;
            _name = other._name;
            _excitation_power = other._excitation_power;
            _excitation_power_unit = other._excitation_power_unit;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_type")]
        public object Device_type
        {
            get
            {
                return _device_type;
            }
            set
            {
                _device_type = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power")]
        public Excitation_power2 Excitation_power
        {
            get
            {
                return _excitation_power;
            }
            set
            {
                _excitation_power = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power_unit")]
        public PowerUnit Excitation_power_unit
        {
            get
            {
                return _excitation_power_unit;
            }
            set
            {
                _excitation_power_unit = value;
            }
        }
    
        public System.IObservable<LightEmittingDiodeConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LightEmittingDiodeConfig(this)));
        }
    
        public System.IObservable<LightEmittingDiodeConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LightEmittingDiodeConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _device_type + ", ");
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("excitation_power = " + _excitation_power + ", ");
            stringBuilder.Append("excitation_power_unit = " + _excitation_power_unit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Generic maintenance class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Generic maintenance class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Maintenance
    {
    
        private System.DateTimeOffset _maintenance_date;
    
        private string _device_name;
    
        private string _description;
    
        private string _protocol_id;
    
        private System.Collections.Generic.List<Reagent> _reagents = new System.Collections.Generic.List<Reagent>();
    
        private string _notes;
    
        public Maintenance()
        {
        }
    
        protected Maintenance(Maintenance other)
        {
            _maintenance_date = other._maintenance_date;
            _device_name = other._device_name;
            _description = other._description;
            _protocol_id = other._protocol_id;
            _reagents = other._reagents;
            _notes = other._notes;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("maintenance_date", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maintenance_date")]
        public System.DateTimeOffset Maintenance_date
        {
            get
            {
                return _maintenance_date;
            }
            set
            {
                _maintenance_date = value;
            }
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string Device_name
        {
            get
            {
                return _device_name;
            }
            set
            {
                _device_name = value;
            }
        }
    
        /// <summary>
        /// Description on maintenance procedure
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="description")]
        [System.ComponentModel.DescriptionAttribute("Description on maintenance procedure")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("protocol_id")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="protocol_id")]
        public string Protocol_id
        {
            get
            {
                return _protocol_id;
            }
            set
            {
                _protocol_id = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reagents")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reagents")]
        public System.Collections.Generic.List<Reagent> Reagents
        {
            get
            {
                return _reagents;
            }
            set
            {
                _reagents = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<Maintenance> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Maintenance(this)));
        }
    
        public System.IObservable<Maintenance> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Maintenance(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("maintenance_date = " + _maintenance_date + ", ");
            stringBuilder.Append("device_name = " + _device_name + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("protocol_id = " + _protocol_id + ", ");
            stringBuilder.Append("reagents = " + _reagents + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A dome module connected to a 3-axis manipulator
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A dome module connected to a 3-axis manipulator")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ManipulatorModule
    {
    
        private string _assembly_name;
    
        private Arc_angle4 _arc_angle;
    
        private Module_angle4 _module_angle;
    
        private AngleUnit _angle_unit = AindVrForagingDataSchema.AindVrForagingSession.AngleUnit.Degrees;
    
        private Rotation_angle4 _rotation_angle;
    
        private string _coordinate_transform;
    
        private System.DateTimeOffset? _calibration_date;
    
        private string _notes;
    
        private string _primary_targeted_structure;
    
        private System.Collections.Generic.List<CcfCoords> _targeted_ccf_coordinates = new System.Collections.Generic.List<CcfCoords>();
    
        private Coordinates3d _manipulator_coordinates = new Coordinates3d();
    
        public ManipulatorModule()
        {
        }
    
        protected ManipulatorModule(ManipulatorModule other)
        {
            _assembly_name = other._assembly_name;
            _arc_angle = other._arc_angle;
            _module_angle = other._module_angle;
            _angle_unit = other._angle_unit;
            _rotation_angle = other._rotation_angle;
            _coordinate_transform = other._coordinate_transform;
            _calibration_date = other._calibration_date;
            _notes = other._notes;
            _primary_targeted_structure = other._primary_targeted_structure;
            _targeted_ccf_coordinates = other._targeted_ccf_coordinates;
            _manipulator_coordinates = other._manipulator_coordinates;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("assembly_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="assembly_name")]
        public string Assembly_name
        {
            get
            {
                return _assembly_name;
            }
            set
            {
                _assembly_name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("arc_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="arc_angle")]
        public Arc_angle4 Arc_angle
        {
            get
            {
                return _arc_angle;
            }
            set
            {
                _arc_angle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("module_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="module_angle")]
        public Module_angle4 Module_angle
        {
            get
            {
                return _module_angle;
            }
            set
            {
                _module_angle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("angle_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="angle_unit")]
        public AngleUnit Angle_unit
        {
            get
            {
                return _angle_unit;
            }
            set
            {
                _angle_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rotation_angle")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rotation_angle")]
        public Rotation_angle4 Rotation_angle
        {
            get
            {
                return _rotation_angle;
            }
            set
            {
                _rotation_angle = value;
            }
        }
    
        /// <summary>
        /// Path to coordinate transform
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("coordinate_transform")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coordinate_transform")]
        [System.ComponentModel.DescriptionAttribute("Path to coordinate transform")]
        public string Coordinate_transform
        {
            get
            {
                return _coordinate_transform;
            }
            set
            {
                _coordinate_transform = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_date")]
        public System.DateTimeOffset? Calibration_date
        {
            get
            {
                return _calibration_date;
            }
            set
            {
                _calibration_date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("primary_targeted_structure", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="primary_targeted_structure")]
        public string Primary_targeted_structure
        {
            get
            {
                return _primary_targeted_structure;
            }
            set
            {
                _primary_targeted_structure = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_ccf_coordinates")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_ccf_coordinates")]
        public System.Collections.Generic.List<CcfCoords> Targeted_ccf_coordinates
        {
            get
            {
                return _targeted_ccf_coordinates;
            }
            set
            {
                _targeted_ccf_coordinates = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator_coordinates", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="manipulator_coordinates")]
        public Coordinates3d Manipulator_coordinates
        {
            get
            {
                return _manipulator_coordinates;
            }
            set
            {
                _manipulator_coordinates = value;
            }
        }
    
        public System.IObservable<ManipulatorModule> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ManipulatorModule(this)));
        }
    
        public System.IObservable<ManipulatorModule> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ManipulatorModule(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("assembly_name = " + _assembly_name + ", ");
            stringBuilder.Append("arc_angle = " + _arc_angle + ", ");
            stringBuilder.Append("module_angle = " + _module_angle + ", ");
            stringBuilder.Append("angle_unit = " + _angle_unit + ", ");
            stringBuilder.Append("rotation_angle = " + _rotation_angle + ", ");
            stringBuilder.Append("coordinate_transform = " + _coordinate_transform + ", ");
            stringBuilder.Append("calibration_date = " + _calibration_date + ", ");
            stringBuilder.Append("notes = " + _notes + ", ");
            stringBuilder.Append("primary_targeted_structure = " + _primary_targeted_structure + ", ");
            stringBuilder.Append("targeted_ccf_coordinates = " + _targeted_ccf_coordinates + ", ");
            stringBuilder.Append("manipulator_coordinates = " + _manipulator_coordinates);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of Mass Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum MassUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="kilogram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="kilogram")]
        Kilogram = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="gram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gram")]
        Gram = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="milligram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="milligram")]
        Milligram = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microgram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microgram")]
        Microgram = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanogram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanogram")]
        Nanogram = 4,
    }


    /// <summary>
    /// Merfish
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Merfish")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Merfish
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public Merfish()
        {
        }
    
        protected Merfish(Merfish other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Merfish> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Merfish(this)));
        }
    
        public System.IObservable<Merfish> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Merfish(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _experiment;
    
        private string _root_path;
    
        private string _remote_path;
    
        private string _subject;
    
        private string _version;
    
        private double? _rng_seed;
    
        private string _notes;
    
        private string _commit_hash;
    
        private bool _allow_dirty_repo = false;
    
        private bool _skip_hardware_validation = false;
    
        public Metadata()
        {
        }
    
        protected Metadata(Metadata other)
        {
            _experiment = other._experiment;
            _root_path = other._root_path;
            _remote_path = other._remote_path;
            _subject = other._subject;
            _version = other._version;
            _rng_seed = other._rng_seed;
            _notes = other._notes;
            _commit_hash = other._commit_hash;
            _allow_dirty_repo = other._allow_dirty_repo;
            _skip_hardware_validation = other._skip_hardware_validation;
        }
    
        /// <summary>
        /// Name of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("experiment", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="experiment")]
        [System.ComponentModel.DescriptionAttribute("Name of the experiment")]
        public string Experiment
        {
            get
            {
                return _experiment;
            }
            set
            {
                _experiment = value;
            }
        }
    
        /// <summary>
        /// Root path where data will be logged
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("root_path", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="root_path")]
        [System.ComponentModel.DescriptionAttribute("Root path where data will be logged")]
        public string Root_path
        {
            get
            {
                return _root_path;
            }
            set
            {
                _root_path = value;
            }
        }
    
        /// <summary>
        /// Remote path where data will be attempted to be copied to after experiment is done
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("remote_path")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="remote_path")]
        [System.ComponentModel.DescriptionAttribute("Remote path where data will be attempted to be copied to after experiment is done" +
            "")]
        public string Remote_path
        {
            get
            {
                return _remote_path;
            }
            set
            {
                _remote_path = value;
            }
        }
    
        /// <summary>
        /// Name of the subject
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("subject", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="subject")]
        [System.ComponentModel.DescriptionAttribute("Name of the subject")]
        public string Subject
        {
            get
            {
                return _subject;
            }
            set
            {
                _subject = value;
            }
        }
    
        /// <summary>
        /// Version of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="version")]
        [System.ComponentModel.DescriptionAttribute("Version of the experiment")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Seed of the random number generator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rng_seed")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rng_seed")]
        [System.ComponentModel.DescriptionAttribute("Seed of the random number generator")]
        public double? Rng_seed
        {
            get
            {
                return _rng_seed;
            }
            set
            {
                _rng_seed = value;
            }
        }
    
        /// <summary>
        /// Notes about the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        [System.ComponentModel.DescriptionAttribute("Notes about the experiment")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        /// <summary>
        /// Commit hash of the repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("commit_hash")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="commit_hash")]
        [System.ComponentModel.DescriptionAttribute("Commit hash of the repository")]
        public string Commit_hash
        {
            get
            {
                return _commit_hash;
            }
            set
            {
                _commit_hash = value;
            }
        }
    
        /// <summary>
        /// Allow running from a dirty repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("allow_dirty_repo")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="allow_dirty_repo")]
        [System.ComponentModel.DescriptionAttribute("Allow running from a dirty repository")]
        public bool Allow_dirty_repo
        {
            get
            {
                return _allow_dirty_repo;
            }
            set
            {
                _allow_dirty_repo = value;
            }
        }
    
        /// <summary>
        /// Skip hardware validation
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("skip_hardware_validation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="skip_hardware_validation")]
        [System.ComponentModel.DescriptionAttribute("Skip hardware validation")]
        public bool Skip_hardware_validation
        {
            get
            {
                return _skip_hardware_validation;
            }
            set
            {
                _skip_hardware_validation = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Metadata(this)));
        }
    
        public System.IObservable<Metadata> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Metadata(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("experiment = " + _experiment + ", ");
            stringBuilder.Append("root_path = " + _root_path + ", ");
            stringBuilder.Append("remote_path = " + _remote_path + ", ");
            stringBuilder.Append("subject = " + _subject + ", ");
            stringBuilder.Append("version = " + _version + ", ");
            stringBuilder.Append("rng_seed = " + _rng_seed + ", ");
            stringBuilder.Append("notes = " + _notes + ", ");
            stringBuilder.Append("commit_hash = " + _commit_hash + ", ");
            stringBuilder.Append("allow_dirty_repo = " + _allow_dirty_repo + ", ");
            stringBuilder.Append("skip_hardware_validation = " + _skip_hardware_validation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Mri
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Mri")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Mri
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public Mri()
        {
        }
    
        protected Mri(Mri other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Mri> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Mri(this)));
        }
    
        public System.IObservable<Mri> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Mri(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of olfactometer channel configurations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of olfactometer channel configurations")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerChannelConfig
    {
    
        private int _channel_index;
    
        private string _odorant;
    
        private Odorant_dilution _odorant_dilution;
    
        private ConcentrationUnit _odorant_dilution_unit = AindVrForagingDataSchema.AindVrForagingSession.ConcentrationUnit.__v_v;
    
        public OlfactometerChannelConfig()
        {
        }
    
        protected OlfactometerChannelConfig(OlfactometerChannelConfig other)
        {
            _channel_index = other._channel_index;
            _odorant = other._odorant;
            _odorant_dilution = other._odorant_dilution;
            _odorant_dilution_unit = other._odorant_dilution_unit;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("channel_index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channel_index")]
        public int Channel_index
        {
            get
            {
                return _channel_index;
            }
            set
            {
                _channel_index = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("odorant", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorant")]
        public string Odorant
        {
            get
            {
                return _odorant;
            }
            set
            {
                _odorant = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorant_dilution", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorant_dilution")]
        public Odorant_dilution Odorant_dilution
        {
            get
            {
                return _odorant_dilution;
            }
            set
            {
                _odorant_dilution = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorant_dilution_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorant_dilution_unit")]
        public ConcentrationUnit Odorant_dilution_unit
        {
            get
            {
                return _odorant_dilution_unit;
            }
            set
            {
                _odorant_dilution_unit = value;
            }
        }
    
        public System.IObservable<OlfactometerChannelConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerChannelConfig(this)));
        }
    
        public System.IObservable<OlfactometerChannelConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerChannelConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channel_index = " + _channel_index + ", ");
            stringBuilder.Append("odorant = " + _odorant + ", ");
            stringBuilder.Append("odorant_dilution = " + _odorant_dilution + ", ");
            stringBuilder.Append("odorant_dilution_unit = " + _odorant_dilution_unit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of a olfactory stimulus
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a olfactory stimulus")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactoryStimulation
    {
    
        private object _stimulus_type;
    
        private System.Collections.Generic.List<OlfactometerChannelConfig> _channels = new System.Collections.Generic.List<OlfactometerChannelConfig>();
    
        public OlfactoryStimulation()
        {
        }
    
        protected OlfactoryStimulation(OlfactoryStimulation other)
        {
            _stimulus_type = other._stimulus_type;
            _channels = other._channels;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_type")]
        public object Stimulus_type
        {
            get
            {
                return _stimulus_type;
            }
            set
            {
                _stimulus_type = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channels", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channels")]
        public System.Collections.Generic.List<OlfactometerChannelConfig> Channels
        {
            get
            {
                return _channels;
            }
            set
            {
                _channels = value;
            }
        }
    
        public System.IObservable<OlfactoryStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactoryStimulation(this)));
        }
    
        public System.IObservable<OlfactoryStimulation> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactoryStimulation(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("stimulus_type = " + _stimulus_type + ", ");
            stringBuilder.Append("channels = " + _channels);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of opto stimulation parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of opto stimulation parameters")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OptoStimulation
    {
    
        private object _stimulus_type;
    
        private string _stimulus_name;
    
        private PulseShape _pulse_shape;
    
        private int _pulse_frequency;
    
        private FrequencyUnit _pulse_frequency_unit = AindVrForagingDataSchema.AindVrForagingSession.FrequencyUnit.Hertz;
    
        private int _number_pulse_trains;
    
        private int _pulse_width;
    
        private TimeUnit _pulse_width_unit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Millisecond;
    
        private Pulse_train_duration _pulse_train_duration;
    
        private TimeUnit _pulse_train_duration_unit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private bool _fixed_pulse_train_interval;
    
        private Pulse_train_interval _pulse_train_interval;
    
        private TimeUnit _pulse_train_interval_unit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private Baseline_duration _baseline_duration;
    
        private TimeUnit _baseline_duration_unit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private object _other_parameters;
    
        private string _notes;
    
        public OptoStimulation()
        {
        }
    
        protected OptoStimulation(OptoStimulation other)
        {
            _stimulus_type = other._stimulus_type;
            _stimulus_name = other._stimulus_name;
            _pulse_shape = other._pulse_shape;
            _pulse_frequency = other._pulse_frequency;
            _pulse_frequency_unit = other._pulse_frequency_unit;
            _number_pulse_trains = other._number_pulse_trains;
            _pulse_width = other._pulse_width;
            _pulse_width_unit = other._pulse_width_unit;
            _pulse_train_duration = other._pulse_train_duration;
            _pulse_train_duration_unit = other._pulse_train_duration_unit;
            _fixed_pulse_train_interval = other._fixed_pulse_train_interval;
            _pulse_train_interval = other._pulse_train_interval;
            _pulse_train_interval_unit = other._pulse_train_interval_unit;
            _baseline_duration = other._baseline_duration;
            _baseline_duration_unit = other._baseline_duration_unit;
            _other_parameters = other._other_parameters;
            _notes = other._notes;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_type")]
        public object Stimulus_type
        {
            get
            {
                return _stimulus_type;
            }
            set
            {
                _stimulus_type = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_name")]
        public string Stimulus_name
        {
            get
            {
                return _stimulus_name;
            }
            set
            {
                _stimulus_name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_shape", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_shape")]
        public PulseShape Pulse_shape
        {
            get
            {
                return _pulse_shape;
            }
            set
            {
                _pulse_shape = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_frequency", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_frequency")]
        public int Pulse_frequency
        {
            get
            {
                return _pulse_frequency;
            }
            set
            {
                _pulse_frequency = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_frequency_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_frequency_unit")]
        public FrequencyUnit Pulse_frequency_unit
        {
            get
            {
                return _pulse_frequency_unit;
            }
            set
            {
                _pulse_frequency_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_pulse_trains", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_pulse_trains")]
        public int Number_pulse_trains
        {
            get
            {
                return _number_pulse_trains;
            }
            set
            {
                _number_pulse_trains = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_width", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_width")]
        public int Pulse_width
        {
            get
            {
                return _pulse_width;
            }
            set
            {
                _pulse_width = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_width_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_width_unit")]
        public TimeUnit Pulse_width_unit
        {
            get
            {
                return _pulse_width_unit;
            }
            set
            {
                _pulse_width_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_duration")]
        public Pulse_train_duration Pulse_train_duration
        {
            get
            {
                return _pulse_train_duration;
            }
            set
            {
                _pulse_train_duration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_duration_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_duration_unit")]
        public TimeUnit Pulse_train_duration_unit
        {
            get
            {
                return _pulse_train_duration_unit;
            }
            set
            {
                _pulse_train_duration_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fixed_pulse_train_interval", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fixed_pulse_train_interval")]
        public bool Fixed_pulse_train_interval
        {
            get
            {
                return _fixed_pulse_train_interval;
            }
            set
            {
                _fixed_pulse_train_interval = value;
            }
        }
    
        /// <summary>
        /// Time between pulse trains
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_interval")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_interval")]
        [System.ComponentModel.DescriptionAttribute("Time between pulse trains")]
        public Pulse_train_interval Pulse_train_interval
        {
            get
            {
                return _pulse_train_interval;
            }
            set
            {
                _pulse_train_interval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_interval_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_interval_unit")]
        public TimeUnit Pulse_train_interval_unit
        {
            get
            {
                return _pulse_train_interval_unit;
            }
            set
            {
                _pulse_train_interval_unit = value;
            }
        }
    
        /// <summary>
        /// Duration of baseline recording prior to first pulse train
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("baseline_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="baseline_duration")]
        [System.ComponentModel.DescriptionAttribute("Duration of baseline recording prior to first pulse train")]
        public Baseline_duration Baseline_duration
        {
            get
            {
                return _baseline_duration;
            }
            set
            {
                _baseline_duration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("baseline_duration_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="baseline_duration_unit")]
        public TimeUnit Baseline_duration_unit
        {
            get
            {
                return _baseline_duration_unit;
            }
            set
            {
                _baseline_duration_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("other_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="other_parameters")]
        public object Other_parameters
        {
            get
            {
                return _other_parameters;
            }
            set
            {
                _other_parameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<OptoStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OptoStimulation(this)));
        }
    
        public System.IObservable<OptoStimulation> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OptoStimulation(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("stimulus_type = " + _stimulus_type + ", ");
            stringBuilder.Append("stimulus_name = " + _stimulus_name + ", ");
            stringBuilder.Append("pulse_shape = " + _pulse_shape + ", ");
            stringBuilder.Append("pulse_frequency = " + _pulse_frequency + ", ");
            stringBuilder.Append("pulse_frequency_unit = " + _pulse_frequency_unit + ", ");
            stringBuilder.Append("number_pulse_trains = " + _number_pulse_trains + ", ");
            stringBuilder.Append("pulse_width = " + _pulse_width + ", ");
            stringBuilder.Append("pulse_width_unit = " + _pulse_width_unit + ", ");
            stringBuilder.Append("pulse_train_duration = " + _pulse_train_duration + ", ");
            stringBuilder.Append("pulse_train_duration_unit = " + _pulse_train_duration_unit + ", ");
            stringBuilder.Append("fixed_pulse_train_interval = " + _fixed_pulse_train_interval + ", ");
            stringBuilder.Append("pulse_train_interval = " + _pulse_train_interval + ", ");
            stringBuilder.Append("pulse_train_interval_unit = " + _pulse_train_interval_unit + ", ");
            stringBuilder.Append("baseline_duration = " + _baseline_duration + ", ");
            stringBuilder.Append("baseline_duration_unit = " + _baseline_duration_unit + ", ");
            stringBuilder.Append("other_parameters = " + _other_parameters + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Model for associate a name with a persistent identifier (PID),
    ///the registry for that PID, and abbreviation for that registry
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Model for associate a name with a persistent identifier (PID),\nthe registry for t" +
        "hat PID, and abbreviation for that registry")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PIDName
    {
    
        private string _name;
    
        private string _abbreviation;
    
        private BaseName _registry;
    
        private string _registry_identifier;
    
        public PIDName()
        {
        }
    
        protected PIDName(PIDName other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
            _registry = other._registry;
            _registry_identifier = other._registry_identifier;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("registry")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="registry")]
        public BaseName Registry
        {
            get
            {
                return _registry;
            }
            set
            {
                _registry = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("registry_identifier")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="registry_identifier")]
        public string Registry_identifier
        {
            get
            {
                return _registry_identifier;
            }
            set
            {
                _registry_identifier = value;
            }
        }
    
        public System.IObservable<PIDName> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PIDName(this)));
        }
    
        public System.IObservable<PIDName> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PIDName(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation + ", ");
            stringBuilder.Append("registry = " + _registry + ", ");
            stringBuilder.Append("registry_identifier = " + _registry_identifier);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// POphys
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("POphys")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class POphys
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public POphys()
        {
        }
    
        protected POphys(POphys other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<POphys> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new POphys(this)));
        }
    
        public System.IObservable<POphys> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new POphys(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of a photostimulation session
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a photostimulation session")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PhotoStimulation
    {
    
        private object _stimulus_type;
    
        private string _stimulus_name;
    
        private int _number_groups;
    
        private System.Collections.Generic.List<PhotoStimulationGroup> _groups = new System.Collections.Generic.List<PhotoStimulationGroup>();
    
        private Inter_trial_interval _inter_trial_interval;
    
        private TimeUnit _inter_trial_interval_unit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private object _other_parameters;
    
        private string _notes;
    
        public PhotoStimulation()
        {
        }
    
        protected PhotoStimulation(PhotoStimulation other)
        {
            _stimulus_type = other._stimulus_type;
            _stimulus_name = other._stimulus_name;
            _number_groups = other._number_groups;
            _groups = other._groups;
            _inter_trial_interval = other._inter_trial_interval;
            _inter_trial_interval_unit = other._inter_trial_interval_unit;
            _other_parameters = other._other_parameters;
            _notes = other._notes;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_type")]
        public object Stimulus_type
        {
            get
            {
                return _stimulus_type;
            }
            set
            {
                _stimulus_type = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_name")]
        public string Stimulus_name
        {
            get
            {
                return _stimulus_name;
            }
            set
            {
                _stimulus_name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_groups", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_groups")]
        public int Number_groups
        {
            get
            {
                return _number_groups;
            }
            set
            {
                _number_groups = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("groups", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="groups")]
        public System.Collections.Generic.List<PhotoStimulationGroup> Groups
        {
            get
            {
                return _groups;
            }
            set
            {
                _groups = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_trial_interval", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_trial_interval")]
        public Inter_trial_interval Inter_trial_interval
        {
            get
            {
                return _inter_trial_interval;
            }
            set
            {
                _inter_trial_interval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_trial_interval_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_trial_interval_unit")]
        public TimeUnit Inter_trial_interval_unit
        {
            get
            {
                return _inter_trial_interval_unit;
            }
            set
            {
                _inter_trial_interval_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("other_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="other_parameters")]
        public object Other_parameters
        {
            get
            {
                return _other_parameters;
            }
            set
            {
                _other_parameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<PhotoStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PhotoStimulation(this)));
        }
    
        public System.IObservable<PhotoStimulation> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PhotoStimulation(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("stimulus_type = " + _stimulus_type + ", ");
            stringBuilder.Append("stimulus_name = " + _stimulus_name + ", ");
            stringBuilder.Append("number_groups = " + _number_groups + ", ");
            stringBuilder.Append("groups = " + _groups + ", ");
            stringBuilder.Append("inter_trial_interval = " + _inter_trial_interval + ", ");
            stringBuilder.Append("inter_trial_interval_unit = " + _inter_trial_interval_unit + ", ");
            stringBuilder.Append("other_parameters = " + _other_parameters + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of a photostimulation group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a photostimulation group")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PhotoStimulationGroup
    {
    
        private int _group_index;
    
        private int _number_of_neurons;
    
        private Stimulation_laser_power _stimulation_laser_power;
    
        private PowerUnit _stimulation_laser_power_unit = AindVrForagingDataSchema.AindVrForagingSession.PowerUnit.Milliwatt;
    
        private int _number_trials;
    
        private int _number_spirals;
    
        private Spiral_duration _spiral_duration;
    
        private TimeUnit _spiral_duration_unit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private Inter_spiral_interval _inter_spiral_interval;
    
        private TimeUnit _inter_spiral_interval_unit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private object _other_parameters;
    
        private string _notes;
    
        public PhotoStimulationGroup()
        {
        }
    
        protected PhotoStimulationGroup(PhotoStimulationGroup other)
        {
            _group_index = other._group_index;
            _number_of_neurons = other._number_of_neurons;
            _stimulation_laser_power = other._stimulation_laser_power;
            _stimulation_laser_power_unit = other._stimulation_laser_power_unit;
            _number_trials = other._number_trials;
            _number_spirals = other._number_spirals;
            _spiral_duration = other._spiral_duration;
            _spiral_duration_unit = other._spiral_duration_unit;
            _inter_spiral_interval = other._inter_spiral_interval;
            _inter_spiral_interval_unit = other._inter_spiral_interval_unit;
            _other_parameters = other._other_parameters;
            _notes = other._notes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("group_index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="group_index")]
        public int Group_index
        {
            get
            {
                return _group_index;
            }
            set
            {
                _group_index = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_of_neurons", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_of_neurons")]
        public int Number_of_neurons
        {
            get
            {
                return _number_of_neurons;
            }
            set
            {
                _number_of_neurons = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulation_laser_power", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulation_laser_power")]
        public Stimulation_laser_power Stimulation_laser_power
        {
            get
            {
                return _stimulation_laser_power;
            }
            set
            {
                _stimulation_laser_power = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulation_laser_power_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulation_laser_power_unit")]
        public PowerUnit Stimulation_laser_power_unit
        {
            get
            {
                return _stimulation_laser_power_unit;
            }
            set
            {
                _stimulation_laser_power_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_trials", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_trials")]
        public int Number_trials
        {
            get
            {
                return _number_trials;
            }
            set
            {
                _number_trials = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_spirals", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_spirals")]
        public int Number_spirals
        {
            get
            {
                return _number_spirals;
            }
            set
            {
                _number_spirals = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("spiral_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="spiral_duration")]
        public Spiral_duration Spiral_duration
        {
            get
            {
                return _spiral_duration;
            }
            set
            {
                _spiral_duration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("spiral_duration_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="spiral_duration_unit")]
        public TimeUnit Spiral_duration_unit
        {
            get
            {
                return _spiral_duration_unit;
            }
            set
            {
                _spiral_duration_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_spiral_interval", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_spiral_interval")]
        public Inter_spiral_interval Inter_spiral_interval
        {
            get
            {
                return _inter_spiral_interval;
            }
            set
            {
                _inter_spiral_interval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_spiral_interval_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_spiral_interval_unit")]
        public TimeUnit Inter_spiral_interval_unit
        {
            get
            {
                return _inter_spiral_interval_unit;
            }
            set
            {
                _inter_spiral_interval_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("other_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="other_parameters")]
        public object Other_parameters
        {
            get
            {
                return _other_parameters;
            }
            set
            {
                _other_parameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<PhotoStimulationGroup> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PhotoStimulationGroup(this)));
        }
    
        public System.IObservable<PhotoStimulationGroup> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PhotoStimulationGroup(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("group_index = " + _group_index + ", ");
            stringBuilder.Append("number_of_neurons = " + _number_of_neurons + ", ");
            stringBuilder.Append("stimulation_laser_power = " + _stimulation_laser_power + ", ");
            stringBuilder.Append("stimulation_laser_power_unit = " + _stimulation_laser_power_unit + ", ");
            stringBuilder.Append("number_trials = " + _number_trials + ", ");
            stringBuilder.Append("number_spirals = " + _number_spirals + ", ");
            stringBuilder.Append("spiral_duration = " + _spiral_duration + ", ");
            stringBuilder.Append("spiral_duration_unit = " + _spiral_duration_unit + ", ");
            stringBuilder.Append("inter_spiral_interval = " + _inter_spiral_interval + ", ");
            stringBuilder.Append("inter_spiral_interval_unit = " + _inter_spiral_interval_unit + ", ");
            stringBuilder.Append("other_parameters = " + _other_parameters + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Unit for power, set or measured
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum PowerUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microwatt")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microwatt")]
        Microwatt = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="milliwatt")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="milliwatt")]
        Milliwatt = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="percent")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="percent")]
        Percent = 2,
    }


    /// <summary>
    /// Types of Opto stim pulse shapes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum PulseShape
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Square")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Square")]
        Square = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Ramp")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Ramp")]
        Ramp = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Sinusoidal")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Sinusoidal")]
        Sinusoidal = 2,
    }


    /// <summary>
    /// Description of reagent used in procedure
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of reagent used in procedure")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Reagent
    {
    
        private string _name;
    
        private string _source;
    
        private PIDName _rrid;
    
        private string _lot_number;
    
        private System.DateTimeOffset? _expiration_date;
    
        public Reagent()
        {
        }
    
        protected Reagent(Reagent other)
        {
            _name = other._name;
            _source = other._source;
            _rrid = other._rrid;
            _lot_number = other._lot_number;
            _expiration_date = other._expiration_date;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("source", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="source")]
        public string Source
        {
            get
            {
                return _source;
            }
            set
            {
                _source = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rrid")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rrid")]
        public PIDName Rrid
        {
            get
            {
                return _rrid;
            }
            set
            {
                _rrid = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("lot_number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lot_number")]
        public string Lot_number
        {
            get
            {
                return _lot_number;
            }
            set
            {
                _lot_number = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("expiration_date")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="expiration_date")]
        public System.DateTimeOffset? Expiration_date
        {
            get
            {
                return _expiration_date;
            }
            set
            {
                _expiration_date = value;
            }
        }
    
        public System.IObservable<Reagent> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Reagent(this)));
        }
    
        public System.IObservable<Reagent> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Reagent(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("source = " + _source + ", ");
            stringBuilder.Append("rrid = " + _rrid + ", ");
            stringBuilder.Append("lot_number = " + _lot_number + ", ");
            stringBuilder.Append("expiration_date = " + _expiration_date);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Set of 6 values describing relative position on a rig
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Set of 6 values describing relative position on a rig")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RelativePosition
    {
    
        private Pitch _pitch;
    
        private Yaw _yaw;
    
        private Roll _roll;
    
        private AngleUnit _angle_unit = AindVrForagingDataSchema.AindVrForagingSession.AngleUnit.Degrees;
    
        private X2 _x;
    
        private Y2 _y;
    
        private Z2 _z;
    
        private SizeUnit _position_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Millimeter;
    
        private string _coordinate_system;
    
        public RelativePosition()
        {
        }
    
        protected RelativePosition(RelativePosition other)
        {
            _pitch = other._pitch;
            _yaw = other._yaw;
            _roll = other._roll;
            _angle_unit = other._angle_unit;
            _x = other._x;
            _y = other._y;
            _z = other._z;
            _position_unit = other._position_unit;
            _coordinate_system = other._coordinate_system;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pitch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pitch")]
        public Pitch Pitch
        {
            get
            {
                return _pitch;
            }
            set
            {
                _pitch = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("yaw")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="yaw")]
        public Yaw Yaw
        {
            get
            {
                return _yaw;
            }
            set
            {
                _yaw = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("roll")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="roll")]
        public Roll Roll
        {
            get
            {
                return _roll;
            }
            set
            {
                _roll = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("angle_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="angle_unit")]
        public AngleUnit Angle_unit
        {
            get
            {
                return _angle_unit;
            }
            set
            {
                _angle_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="x")]
        public X2 X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="y")]
        public Y2 Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("z")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="z")]
        public Z2 Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("position_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="position_unit")]
        public SizeUnit Position_unit
        {
            get
            {
                return _position_unit;
            }
            set
            {
                _position_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("coordinate_system")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coordinate_system")]
        public string Coordinate_system
        {
            get
            {
                return _coordinate_system;
            }
            set
            {
                _coordinate_system = value;
            }
        }
    
        public System.IObservable<RelativePosition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RelativePosition(this)));
        }
    
        public System.IObservable<RelativePosition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RelativePosition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("pitch = " + _pitch + ", ");
            stringBuilder.Append("yaw = " + _yaw + ", ");
            stringBuilder.Append("roll = " + _roll + ", ");
            stringBuilder.Append("angle_unit = " + _angle_unit + ", ");
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y + ", ");
            stringBuilder.Append("z = " + _z + ", ");
            stringBuilder.Append("position_unit = " + _position_unit + ", ");
            stringBuilder.Append("coordinate_system = " + _coordinate_system);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of reward delivery configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of reward delivery configuration")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardDeliveryConfig
    {
    
        private RewardSolution _reward_solution;
    
        private System.Collections.Generic.List<RewardSpoutConfig> _reward_spouts = new System.Collections.Generic.List<RewardSpoutConfig>();
    
        private string _notes;
    
        public RewardDeliveryConfig()
        {
        }
    
        protected RewardDeliveryConfig(RewardDeliveryConfig other)
        {
            _reward_solution = other._reward_solution;
            _reward_spouts = other._reward_spouts;
            _notes = other._notes;
        }
    
        /// <summary>
        /// If Other use notes
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_solution", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_solution")]
        [System.ComponentModel.DescriptionAttribute("If Other use notes")]
        public RewardSolution Reward_solution
        {
            get
            {
                return _reward_solution;
            }
            set
            {
                _reward_solution = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_spouts", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_spouts")]
        public System.Collections.Generic.List<RewardSpoutConfig> Reward_spouts
        {
            get
            {
                return _reward_spouts;
            }
            set
            {
                _reward_spouts = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<RewardDeliveryConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardDeliveryConfig(this)));
        }
    
        public System.IObservable<RewardDeliveryConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardDeliveryConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("reward_solution = " + _reward_solution + ", ");
            stringBuilder.Append("reward_spouts = " + _reward_spouts + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Reward solution name
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum RewardSolution
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Water")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Water")]
        Water = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Other")]
        Other = 1,
    }


    /// <summary>
    /// Reward spout session information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Reward spout session information")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardSpoutConfig
    {
    
        private SpoutSide _side;
    
        private RelativePosition _starting_position = new RelativePosition();
    
        private bool _variable_position;
    
        public RewardSpoutConfig()
        {
        }
    
        protected RewardSpoutConfig(RewardSpoutConfig other)
        {
            _side = other._side;
            _starting_position = other._starting_position;
            _variable_position = other._variable_position;
        }
    
        /// <summary>
        /// Must match rig
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("side", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="side")]
        [System.ComponentModel.DescriptionAttribute("Must match rig")]
        public SpoutSide Side
        {
            get
            {
                return _side;
            }
            set
            {
                _side = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("starting_position", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="starting_position")]
        public RelativePosition Starting_position
        {
            get
            {
                return _starting_position;
            }
            set
            {
                _starting_position = value;
            }
        }
    
        /// <summary>
        /// True if spout position changes during session as tracked in data
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("variable_position", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="variable_position")]
        [System.ComponentModel.DescriptionAttribute("True if spout position changes during session as tracked in data")]
        public bool Variable_position
        {
            get
            {
                return _variable_position;
            }
            set
            {
                _variable_position = value;
            }
        }
    
        public System.IObservable<RewardSpoutConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardSpoutConfig(this)));
        }
    
        public System.IObservable<RewardSpoutConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardSpoutConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("side = " + _side + ", ");
            stringBuilder.Append("starting_position = " + _starting_position + ", ");
            stringBuilder.Append("variable_position = " + _variable_position);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of a physiology and/or behavior session
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a physiology and/or behavior session")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Session
    {
    
        private string _describedBy = "https://raw.githubusercontent.com/AllenNeuralDynamics/aind-data-schema/main/src/aind_data_schema/core/session.py";
    
        private object _schema_version;
    
        private System.Collections.Generic.List<string> _experimenter_full_name = new System.Collections.Generic.List<string>();
    
        private System.DateTimeOffset _session_start_time;
    
        private System.DateTimeOffset? _session_end_time;
    
        private string _session_type;
    
        private string _iacuc_protocol;
    
        private string _rig_id;
    
        private System.Collections.Generic.List<Calibration> _calibrations = new System.Collections.Generic.List<Calibration>();
    
        private System.Collections.Generic.List<Maintenance> _maintenance = new System.Collections.Generic.List<Maintenance>();
    
        private string _subject_id;
    
        private Animal_weight_prior _animal_weight_prior;
    
        private Animal_weight_post _animal_weight_post;
    
        private MassUnit _weight_unit = AindVrForagingDataSchema.AindVrForagingSession.MassUnit.Gram;
    
        private System.Collections.Generic.List<Stream> _data_streams = new System.Collections.Generic.List<Stream>();
    
        private System.Collections.Generic.List<StimulusEpoch> _stimulus_epochs = new System.Collections.Generic.List<StimulusEpoch>();
    
        private RewardDeliveryConfig _reward_delivery;
    
        private Reward_consumed_total _reward_consumed_total;
    
        private VolumeUnit _reward_consumed_unit = AindVrForagingDataSchema.AindVrForagingSession.VolumeUnit.Microliter;
    
        private string _notes;
    
        public Session()
        {
        }
    
        protected Session(Session other)
        {
            _describedBy = other._describedBy;
            _schema_version = other._schema_version;
            _experimenter_full_name = other._experimenter_full_name;
            _session_start_time = other._session_start_time;
            _session_end_time = other._session_end_time;
            _session_type = other._session_type;
            _iacuc_protocol = other._iacuc_protocol;
            _rig_id = other._rig_id;
            _calibrations = other._calibrations;
            _maintenance = other._maintenance;
            _subject_id = other._subject_id;
            _animal_weight_prior = other._animal_weight_prior;
            _animal_weight_post = other._animal_weight_post;
            _weight_unit = other._weight_unit;
            _data_streams = other._data_streams;
            _stimulus_epochs = other._stimulus_epochs;
            _reward_delivery = other._reward_delivery;
            _reward_consumed_total = other._reward_consumed_total;
            _reward_consumed_unit = other._reward_consumed_unit;
            _notes = other._notes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="describedBy")]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="schema_version")]
        public object Schema_version
        {
            get
            {
                return _schema_version;
            }
            set
            {
                _schema_version = value;
            }
        }
    
        /// <summary>
        /// First and last name of the experimenter(s).
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("experimenter_full_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="experimenter_full_name")]
        [System.ComponentModel.DescriptionAttribute("First and last name of the experimenter(s).")]
        public System.Collections.Generic.List<string> Experimenter_full_name
        {
            get
            {
                return _experimenter_full_name;
            }
            set
            {
                _experimenter_full_name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session_start_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_start_time")]
        public System.DateTimeOffset Session_start_time
        {
            get
            {
                return _session_start_time;
            }
            set
            {
                _session_start_time = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session_end_time")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_end_time")]
        public System.DateTimeOffset? Session_end_time
        {
            get
            {
                return _session_end_time;
            }
            set
            {
                _session_end_time = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("session_type", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_type")]
        public string Session_type
        {
            get
            {
                return _session_type;
            }
            set
            {
                _session_type = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("iacuc_protocol")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="iacuc_protocol")]
        public string Iacuc_protocol
        {
            get
            {
                return _iacuc_protocol;
            }
            set
            {
                _iacuc_protocol = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("rig_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rig_id")]
        public string Rig_id
        {
            get
            {
                return _rig_id;
            }
            set
            {
                _rig_id = value;
            }
        }
    
        /// <summary>
        /// Calibrations of rig devices prior to session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibrations")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibrations")]
        [System.ComponentModel.DescriptionAttribute("Calibrations of rig devices prior to session")]
        public System.Collections.Generic.List<Calibration> Calibrations
        {
            get
            {
                return _calibrations;
            }
            set
            {
                _calibrations = value;
            }
        }
    
        /// <summary>
        /// Maintenance of rig devices prior to session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("maintenance")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maintenance")]
        [System.ComponentModel.DescriptionAttribute("Maintenance of rig devices prior to session")]
        public System.Collections.Generic.List<Maintenance> Maintenance
        {
            get
            {
                return _maintenance;
            }
            set
            {
                _maintenance = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("subject_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="subject_id")]
        public string Subject_id
        {
            get
            {
                return _subject_id;
            }
            set
            {
                _subject_id = value;
            }
        }
    
        /// <summary>
        /// Animal weight before procedure
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("animal_weight_prior")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animal_weight_prior")]
        [System.ComponentModel.DescriptionAttribute("Animal weight before procedure")]
        public Animal_weight_prior Animal_weight_prior
        {
            get
            {
                return _animal_weight_prior;
            }
            set
            {
                _animal_weight_prior = value;
            }
        }
    
        /// <summary>
        /// Animal weight after procedure
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("animal_weight_post")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animal_weight_post")]
        [System.ComponentModel.DescriptionAttribute("Animal weight after procedure")]
        public Animal_weight_post Animal_weight_post
        {
            get
            {
                return _animal_weight_post;
            }
            set
            {
                _animal_weight_post = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("weight_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="weight_unit")]
        public MassUnit Weight_unit
        {
            get
            {
                return _weight_unit;
            }
            set
            {
                _weight_unit = value;
            }
        }
    
        /// <summary>
        /// A data stream is a collection of devices that are recorded simultaneously. Each session can include multiple streams (e.g., if the manipulators are moved to a new location)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("data_streams", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="data_streams")]
        [System.ComponentModel.DescriptionAttribute("A data stream is a collection of devices that are recorded simultaneously. Each s" +
            "ession can include multiple streams (e.g., if the manipulators are moved to a ne" +
            "w location)")]
        public System.Collections.Generic.List<Stream> Data_streams
        {
            get
            {
                return _data_streams;
            }
            set
            {
                _data_streams = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_epochs")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_epochs")]
        public System.Collections.Generic.List<StimulusEpoch> Stimulus_epochs
        {
            get
            {
                return _stimulus_epochs;
            }
            set
            {
                _stimulus_epochs = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_delivery")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_delivery")]
        public RewardDeliveryConfig Reward_delivery
        {
            get
            {
                return _reward_delivery;
            }
            set
            {
                _reward_delivery = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consumed_total")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_consumed_total")]
        public Reward_consumed_total Reward_consumed_total
        {
            get
            {
                return _reward_consumed_total;
            }
            set
            {
                _reward_consumed_total = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consumed_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_consumed_unit")]
        public VolumeUnit Reward_consumed_unit
        {
            get
            {
                return _reward_consumed_unit;
            }
            set
            {
                _reward_consumed_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<Session> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Session(this)));
        }
    
        public System.IObservable<Session> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Session(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("describedBy = " + _describedBy + ", ");
            stringBuilder.Append("schema_version = " + _schema_version + ", ");
            stringBuilder.Append("experimenter_full_name = " + _experimenter_full_name + ", ");
            stringBuilder.Append("session_start_time = " + _session_start_time + ", ");
            stringBuilder.Append("session_end_time = " + _session_end_time + ", ");
            stringBuilder.Append("session_type = " + _session_type + ", ");
            stringBuilder.Append("iacuc_protocol = " + _iacuc_protocol + ", ");
            stringBuilder.Append("rig_id = " + _rig_id + ", ");
            stringBuilder.Append("calibrations = " + _calibrations + ", ");
            stringBuilder.Append("maintenance = " + _maintenance + ", ");
            stringBuilder.Append("subject_id = " + _subject_id + ", ");
            stringBuilder.Append("animal_weight_prior = " + _animal_weight_prior + ", ");
            stringBuilder.Append("animal_weight_post = " + _animal_weight_post + ", ");
            stringBuilder.Append("weight_unit = " + _weight_unit + ", ");
            stringBuilder.Append("data_streams = " + _data_streams + ", ");
            stringBuilder.Append("stimulus_epochs = " + _stimulus_epochs + ", ");
            stringBuilder.Append("reward_delivery = " + _reward_delivery + ", ");
            stringBuilder.Append("reward_consumed_total = " + _reward_consumed_total + ", ");
            stringBuilder.Append("reward_consumed_unit = " + _reward_consumed_unit + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of Length Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SizeUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="meter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="meter")]
        Meter = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="centimeter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="centimeter")]
        Centimeter = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="millimeter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="millimeter")]
        Millimeter = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="micrometer")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="micrometer")]
        Micrometer = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanometer")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanometer")]
        Nanometer = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="inch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inch")]
        Inch = 5,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="pixel")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pixel")]
        Pixel = 6,
    }


    /// <summary>
    /// Slap
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Slap")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Slap
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public Slap()
        {
        }
    
        protected Slap(Slap other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Slap> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Slap(this)));
        }
    
        public System.IObservable<Slap> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Slap(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of a Slap2 scan
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a Slap2 scan")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SlapFieldOfView
    {
    
        private int _index;
    
        private int _imaging_depth;
    
        private SizeUnit _imaging_depth_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _targeted_structure;
    
        private Fov_coordinate_ml2 _fov_coordinate_ml;
    
        private Fov_coordinate_ap2 _fov_coordinate_ap;
    
        private SizeUnit _fov_coordinate_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _fov_reference;
    
        private int _fov_width;
    
        private int _fov_height;
    
        private SizeUnit _fov_size_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Pixel;
    
        private string _magnification;
    
        private Fov_scale_factor2 _fov_scale_factor;
    
        private string _fov_scale_factor_unit = "um/pixel";
    
        private Frame_rate2 _frame_rate;
    
        private FrequencyUnit _frame_rate_unit = AindVrForagingDataSchema.AindVrForagingSession.FrequencyUnit.Hertz;
    
        private int? _coupled_fov_index;
    
        private SlapSessionType _session_type;
    
        private int _dmd_dilation_x;
    
        private int _dmd_dilation_y;
    
        private SizeUnit _dilation_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Pixel;
    
        private string _target_neuron;
    
        private string _target_branch;
    
        private string _path_to_array_of_frame_rates;
    
        public SlapFieldOfView()
        {
        }
    
        protected SlapFieldOfView(SlapFieldOfView other)
        {
            _index = other._index;
            _imaging_depth = other._imaging_depth;
            _imaging_depth_unit = other._imaging_depth_unit;
            _targeted_structure = other._targeted_structure;
            _fov_coordinate_ml = other._fov_coordinate_ml;
            _fov_coordinate_ap = other._fov_coordinate_ap;
            _fov_coordinate_unit = other._fov_coordinate_unit;
            _fov_reference = other._fov_reference;
            _fov_width = other._fov_width;
            _fov_height = other._fov_height;
            _fov_size_unit = other._fov_size_unit;
            _magnification = other._magnification;
            _fov_scale_factor = other._fov_scale_factor;
            _fov_scale_factor_unit = other._fov_scale_factor_unit;
            _frame_rate = other._frame_rate;
            _frame_rate_unit = other._frame_rate_unit;
            _coupled_fov_index = other._coupled_fov_index;
            _session_type = other._session_type;
            _dmd_dilation_x = other._dmd_dilation_x;
            _dmd_dilation_y = other._dmd_dilation_y;
            _dilation_unit = other._dilation_unit;
            _target_neuron = other._target_neuron;
            _target_branch = other._target_branch;
            _path_to_array_of_frame_rates = other._path_to_array_of_frame_rates;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("imaging_depth", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="imaging_depth")]
        public int Imaging_depth
        {
            get
            {
                return _imaging_depth;
            }
            set
            {
                _imaging_depth = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("imaging_depth_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="imaging_depth_unit")]
        public SizeUnit Imaging_depth_unit
        {
            get
            {
                return _imaging_depth_unit;
            }
            set
            {
                _imaging_depth_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_structure", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_structure")]
        public string Targeted_structure
        {
            get
            {
                return _targeted_structure;
            }
            set
            {
                _targeted_structure = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ml", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ml")]
        public Fov_coordinate_ml2 Fov_coordinate_ml
        {
            get
            {
                return _fov_coordinate_ml;
            }
            set
            {
                _fov_coordinate_ml = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ap", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ap")]
        public Fov_coordinate_ap2 Fov_coordinate_ap
        {
            get
            {
                return _fov_coordinate_ap;
            }
            set
            {
                _fov_coordinate_ap = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_unit")]
        public SizeUnit Fov_coordinate_unit
        {
            get
            {
                return _fov_coordinate_unit;
            }
            set
            {
                _fov_coordinate_unit = value;
            }
        }
    
        /// <summary>
        /// Reference for ML/AP coordinates
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fov_reference", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_reference")]
        [System.ComponentModel.DescriptionAttribute("Reference for ML/AP coordinates")]
        public string Fov_reference
        {
            get
            {
                return _fov_reference;
            }
            set
            {
                _fov_reference = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_width", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_width")]
        public int Fov_width
        {
            get
            {
                return _fov_width;
            }
            set
            {
                _fov_width = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_height", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_height")]
        public int Fov_height
        {
            get
            {
                return _fov_height;
            }
            set
            {
                _fov_height = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_size_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_size_unit")]
        public SizeUnit Fov_size_unit
        {
            get
            {
                return _fov_size_unit;
            }
            set
            {
                _fov_size_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("magnification", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="magnification")]
        public string Magnification
        {
            get
            {
                return _magnification;
            }
            set
            {
                _magnification = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor")]
        public Fov_scale_factor2 Fov_scale_factor
        {
            get
            {
                return _fov_scale_factor;
            }
            set
            {
                _fov_scale_factor = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor_unit")]
        public string Fov_scale_factor_unit
        {
            get
            {
                return _fov_scale_factor_unit;
            }
            set
            {
                _fov_scale_factor_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate")]
        public Frame_rate2 Frame_rate
        {
            get
            {
                return _frame_rate;
            }
            set
            {
                _frame_rate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate_unit")]
        public FrequencyUnit Frame_rate_unit
        {
            get
            {
                return _frame_rate_unit;
            }
            set
            {
                _frame_rate_unit = value;
            }
        }
    
        /// <summary>
        /// Coupled planes for multiscope
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("coupled_fov_index")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coupled_fov_index")]
        [System.ComponentModel.DescriptionAttribute("Coupled planes for multiscope")]
        public int? Coupled_fov_index
        {
            get
            {
                return _coupled_fov_index;
            }
            set
            {
                _coupled_fov_index = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session_type", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_type")]
        public SlapSessionType Session_type
        {
            get
            {
                return _session_type;
            }
            set
            {
                _session_type = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("dmd_dilation_x", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dmd_dilation_x")]
        public int Dmd_dilation_x
        {
            get
            {
                return _dmd_dilation_x;
            }
            set
            {
                _dmd_dilation_x = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("dmd_dilation_y", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dmd_dilation_y")]
        public int Dmd_dilation_y
        {
            get
            {
                return _dmd_dilation_y;
            }
            set
            {
                _dmd_dilation_y = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dilation_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dilation_unit")]
        public SizeUnit Dilation_unit
        {
            get
            {
                return _dilation_unit;
            }
            set
            {
                _dilation_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("target_neuron")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="target_neuron")]
        public string Target_neuron
        {
            get
            {
                return _target_neuron;
            }
            set
            {
                _target_neuron = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("target_branch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="target_branch")]
        public string Target_branch
        {
            get
            {
                return _target_branch;
            }
            set
            {
                _target_branch = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("path_to_array_of_frame_rates", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="path_to_array_of_frame_rates")]
        public string Path_to_array_of_frame_rates
        {
            get
            {
                return _path_to_array_of_frame_rates;
            }
            set
            {
                _path_to_array_of_frame_rates = value;
            }
        }
    
        public System.IObservable<SlapFieldOfView> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SlapFieldOfView(this)));
        }
    
        public System.IObservable<SlapFieldOfView> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SlapFieldOfView(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("index = " + _index + ", ");
            stringBuilder.Append("imaging_depth = " + _imaging_depth + ", ");
            stringBuilder.Append("imaging_depth_unit = " + _imaging_depth_unit + ", ");
            stringBuilder.Append("targeted_structure = " + _targeted_structure + ", ");
            stringBuilder.Append("fov_coordinate_ml = " + _fov_coordinate_ml + ", ");
            stringBuilder.Append("fov_coordinate_ap = " + _fov_coordinate_ap + ", ");
            stringBuilder.Append("fov_coordinate_unit = " + _fov_coordinate_unit + ", ");
            stringBuilder.Append("fov_reference = " + _fov_reference + ", ");
            stringBuilder.Append("fov_width = " + _fov_width + ", ");
            stringBuilder.Append("fov_height = " + _fov_height + ", ");
            stringBuilder.Append("fov_size_unit = " + _fov_size_unit + ", ");
            stringBuilder.Append("magnification = " + _magnification + ", ");
            stringBuilder.Append("fov_scale_factor = " + _fov_scale_factor + ", ");
            stringBuilder.Append("fov_scale_factor_unit = " + _fov_scale_factor_unit + ", ");
            stringBuilder.Append("frame_rate = " + _frame_rate + ", ");
            stringBuilder.Append("frame_rate_unit = " + _frame_rate_unit + ", ");
            stringBuilder.Append("coupled_fov_index = " + _coupled_fov_index + ", ");
            stringBuilder.Append("session_type = " + _session_type + ", ");
            stringBuilder.Append("dmd_dilation_x = " + _dmd_dilation_x + ", ");
            stringBuilder.Append("dmd_dilation_y = " + _dmd_dilation_y + ", ");
            stringBuilder.Append("dilation_unit = " + _dilation_unit + ", ");
            stringBuilder.Append("target_neuron = " + _target_neuron + ", ");
            stringBuilder.Append("target_branch = " + _target_branch + ", ");
            stringBuilder.Append("path_to_array_of_frame_rates = " + _path_to_array_of_frame_rates);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Type of slap session
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SlapSessionType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Parent")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Parent")]
        Parent = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Branch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Branch")]
        Branch = 1,
    }


    /// <summary>
    /// Description of generic software
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of generic software")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Software
    {
    
        private string _name;
    
        private string _version;
    
        private string _url;
    
        private object _parameters;
    
        public Software()
        {
        }
    
        protected Software(Software other)
        {
            _name = other._name;
            _version = other._version;
            _url = other._url;
            _parameters = other._parameters;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="url")]
        public string Url
        {
            get
            {
                return _url;
            }
            set
            {
                _url = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="parameters")]
        public object Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value;
            }
        }
    
        public System.IObservable<Software> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Software(this)));
        }
    
        public System.IObservable<Software> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Software(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("version = " + _version + ", ");
            stringBuilder.Append("url = " + _url + ", ");
            stringBuilder.Append("parameters = " + _parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Spim
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Spim")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Spim
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public Spim()
        {
        }
    
        protected Spim(Spim other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Spim> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Spim(this)));
        }
    
        public System.IObservable<Spim> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Spim(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Spout sides
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SpoutSide
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Left")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Left")]
        Left = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Right")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Right")]
        Right = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Center")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Center")]
        Center = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Other")]
        Other = 3,
    }


    /// <summary>
    /// Description of a two photon stack
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a two photon stack")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Stack
    {
    
        private System.Collections.Generic.List<StackChannel> _channels = new System.Collections.Generic.List<StackChannel>();
    
        private int _number_of_planes;
    
        private double _step_size;
    
        private SizeUnit _step_size_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private int _number_of_plane_repeats_per_volume;
    
        private int _number_of_volume_repeats;
    
        private double _fov_coordinate_ml;
    
        private double _fov_coordinate_ap;
    
        private SizeUnit _fov_coordinate_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _fov_reference;
    
        private int _fov_width;
    
        private int _fov_height;
    
        private SizeUnit _fov_size_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Pixel;
    
        private string _magnification;
    
        private double _fov_scale_factor;
    
        private string _fov_scale_factor_unit = "um/pixel";
    
        private Frame_rate3 _frame_rate;
    
        private FrequencyUnit _frame_rate_unit = AindVrForagingDataSchema.AindVrForagingSession.FrequencyUnit.Hertz;
    
        private string _targeted_structure;
    
        public Stack()
        {
        }
    
        protected Stack(Stack other)
        {
            _channels = other._channels;
            _number_of_planes = other._number_of_planes;
            _step_size = other._step_size;
            _step_size_unit = other._step_size_unit;
            _number_of_plane_repeats_per_volume = other._number_of_plane_repeats_per_volume;
            _number_of_volume_repeats = other._number_of_volume_repeats;
            _fov_coordinate_ml = other._fov_coordinate_ml;
            _fov_coordinate_ap = other._fov_coordinate_ap;
            _fov_coordinate_unit = other._fov_coordinate_unit;
            _fov_reference = other._fov_reference;
            _fov_width = other._fov_width;
            _fov_height = other._fov_height;
            _fov_size_unit = other._fov_size_unit;
            _magnification = other._magnification;
            _fov_scale_factor = other._fov_scale_factor;
            _fov_scale_factor_unit = other._fov_scale_factor_unit;
            _frame_rate = other._frame_rate;
            _frame_rate_unit = other._frame_rate_unit;
            _targeted_structure = other._targeted_structure;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channels", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channels")]
        public System.Collections.Generic.List<StackChannel> Channels
        {
            get
            {
                return _channels;
            }
            set
            {
                _channels = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_of_planes", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_of_planes")]
        public int Number_of_planes
        {
            get
            {
                return _number_of_planes;
            }
            set
            {
                _number_of_planes = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("step_size", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="step_size")]
        public double Step_size
        {
            get
            {
                return _step_size;
            }
            set
            {
                _step_size = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("step_size_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="step_size_unit")]
        public SizeUnit Step_size_unit
        {
            get
            {
                return _step_size_unit;
            }
            set
            {
                _step_size_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_of_plane_repeats_per_volume", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_of_plane_repeats_per_volume")]
        public int Number_of_plane_repeats_per_volume
        {
            get
            {
                return _number_of_plane_repeats_per_volume;
            }
            set
            {
                _number_of_plane_repeats_per_volume = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_of_volume_repeats", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_of_volume_repeats")]
        public int Number_of_volume_repeats
        {
            get
            {
                return _number_of_volume_repeats;
            }
            set
            {
                _number_of_volume_repeats = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ml", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ml")]
        public double Fov_coordinate_ml
        {
            get
            {
                return _fov_coordinate_ml;
            }
            set
            {
                _fov_coordinate_ml = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ap", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ap")]
        public double Fov_coordinate_ap
        {
            get
            {
                return _fov_coordinate_ap;
            }
            set
            {
                _fov_coordinate_ap = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_unit")]
        public SizeUnit Fov_coordinate_unit
        {
            get
            {
                return _fov_coordinate_unit;
            }
            set
            {
                _fov_coordinate_unit = value;
            }
        }
    
        /// <summary>
        /// Reference for ML/AP coordinates
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fov_reference", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_reference")]
        [System.ComponentModel.DescriptionAttribute("Reference for ML/AP coordinates")]
        public string Fov_reference
        {
            get
            {
                return _fov_reference;
            }
            set
            {
                _fov_reference = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_width", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_width")]
        public int Fov_width
        {
            get
            {
                return _fov_width;
            }
            set
            {
                _fov_width = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_height", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_height")]
        public int Fov_height
        {
            get
            {
                return _fov_height;
            }
            set
            {
                _fov_height = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_size_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_size_unit")]
        public SizeUnit Fov_size_unit
        {
            get
            {
                return _fov_size_unit;
            }
            set
            {
                _fov_size_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("magnification")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="magnification")]
        public string Magnification
        {
            get
            {
                return _magnification;
            }
            set
            {
                _magnification = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor")]
        public double Fov_scale_factor
        {
            get
            {
                return _fov_scale_factor;
            }
            set
            {
                _fov_scale_factor = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor_unit")]
        public string Fov_scale_factor_unit
        {
            get
            {
                return _fov_scale_factor_unit;
            }
            set
            {
                _fov_scale_factor_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate")]
        public Frame_rate3 Frame_rate
        {
            get
            {
                return _frame_rate;
            }
            set
            {
                _frame_rate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate_unit")]
        public FrequencyUnit Frame_rate_unit
        {
            get
            {
                return _frame_rate_unit;
            }
            set
            {
                _frame_rate_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_structure")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_structure")]
        public string Targeted_structure
        {
            get
            {
                return _targeted_structure;
            }
            set
            {
                _targeted_structure = value;
            }
        }
    
        public System.IObservable<Stack> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Stack(this)));
        }
    
        public System.IObservable<Stack> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Stack(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channels = " + _channels + ", ");
            stringBuilder.Append("number_of_planes = " + _number_of_planes + ", ");
            stringBuilder.Append("step_size = " + _step_size + ", ");
            stringBuilder.Append("step_size_unit = " + _step_size_unit + ", ");
            stringBuilder.Append("number_of_plane_repeats_per_volume = " + _number_of_plane_repeats_per_volume + ", ");
            stringBuilder.Append("number_of_volume_repeats = " + _number_of_volume_repeats + ", ");
            stringBuilder.Append("fov_coordinate_ml = " + _fov_coordinate_ml + ", ");
            stringBuilder.Append("fov_coordinate_ap = " + _fov_coordinate_ap + ", ");
            stringBuilder.Append("fov_coordinate_unit = " + _fov_coordinate_unit + ", ");
            stringBuilder.Append("fov_reference = " + _fov_reference + ", ");
            stringBuilder.Append("fov_width = " + _fov_width + ", ");
            stringBuilder.Append("fov_height = " + _fov_height + ", ");
            stringBuilder.Append("fov_size_unit = " + _fov_size_unit + ", ");
            stringBuilder.Append("magnification = " + _magnification + ", ");
            stringBuilder.Append("fov_scale_factor = " + _fov_scale_factor + ", ");
            stringBuilder.Append("fov_scale_factor_unit = " + _fov_scale_factor_unit + ", ");
            stringBuilder.Append("frame_rate = " + _frame_rate + ", ");
            stringBuilder.Append("frame_rate_unit = " + _frame_rate_unit + ", ");
            stringBuilder.Append("targeted_structure = " + _targeted_structure);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of a Channel used in a Stack
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a Channel used in a Stack")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class StackChannel
    {
    
        private string _channel_name;
    
        private string _light_source_name;
    
        private System.Collections.Generic.List<string> _filter_names = new System.Collections.Generic.List<string>();
    
        private string _detector_name;
    
        private System.Collections.Generic.List<string> _additional_device_names = new System.Collections.Generic.List<string>();
    
        private int _excitation_wavelength;
    
        private SizeUnit _excitation_wavelength_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Nanometer;
    
        private double _excitation_power;
    
        private PowerUnit _excitation_power_unit = AindVrForagingDataSchema.AindVrForagingSession.PowerUnit.Milliwatt;
    
        private int _filter_wheel_index;
    
        private int? _dilation;
    
        private SizeUnit _dilation_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Pixel;
    
        private string _description;
    
        private int _start_depth;
    
        private int _end_depth;
    
        private SizeUnit _depth_unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        public StackChannel()
        {
        }
    
        protected StackChannel(StackChannel other)
        {
            _channel_name = other._channel_name;
            _light_source_name = other._light_source_name;
            _filter_names = other._filter_names;
            _detector_name = other._detector_name;
            _additional_device_names = other._additional_device_names;
            _excitation_wavelength = other._excitation_wavelength;
            _excitation_wavelength_unit = other._excitation_wavelength_unit;
            _excitation_power = other._excitation_power;
            _excitation_power_unit = other._excitation_power_unit;
            _filter_wheel_index = other._filter_wheel_index;
            _dilation = other._dilation;
            _dilation_unit = other._dilation_unit;
            _description = other._description;
            _start_depth = other._start_depth;
            _end_depth = other._end_depth;
            _depth_unit = other._depth_unit;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("channel_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channel_name")]
        public string Channel_name
        {
            get
            {
                return _channel_name;
            }
            set
            {
                _channel_name = value;
            }
        }
    
        /// <summary>
        /// Must match device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("light_source_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="light_source_name")]
        [System.ComponentModel.DescriptionAttribute("Must match device name")]
        public string Light_source_name
        {
            get
            {
                return _light_source_name;
            }
            set
            {
                _light_source_name = value;
            }
        }
    
        /// <summary>
        /// Must match device names
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("filter_names", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="filter_names")]
        [System.ComponentModel.DescriptionAttribute("Must match device names")]
        public System.Collections.Generic.List<string> Filter_names
        {
            get
            {
                return _filter_names;
            }
            set
            {
                _filter_names = value;
            }
        }
    
        /// <summary>
        /// Must match device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("detector_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="detector_name")]
        [System.ComponentModel.DescriptionAttribute("Must match device name")]
        public string Detector_name
        {
            get
            {
                return _detector_name;
            }
            set
            {
                _detector_name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_device_names")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="additional_device_names")]
        public System.Collections.Generic.List<string> Additional_device_names
        {
            get
            {
                return _additional_device_names;
            }
            set
            {
                _additional_device_names = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_wavelength", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_wavelength")]
        public int Excitation_wavelength
        {
            get
            {
                return _excitation_wavelength;
            }
            set
            {
                _excitation_wavelength = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_wavelength_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_wavelength_unit")]
        public SizeUnit Excitation_wavelength_unit
        {
            get
            {
                return _excitation_wavelength_unit;
            }
            set
            {
                _excitation_wavelength_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power")]
        public double Excitation_power
        {
            get
            {
                return _excitation_power;
            }
            set
            {
                _excitation_power = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power_unit")]
        public PowerUnit Excitation_power_unit
        {
            get
            {
                return _excitation_power_unit;
            }
            set
            {
                _excitation_power_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("filter_wheel_index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="filter_wheel_index")]
        public int Filter_wheel_index
        {
            get
            {
                return _filter_wheel_index;
            }
            set
            {
                _filter_wheel_index = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dilation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dilation")]
        public int? Dilation
        {
            get
            {
                return _dilation;
            }
            set
            {
                _dilation = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dilation_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dilation_unit")]
        public SizeUnit Dilation_unit
        {
            get
            {
                return _dilation_unit;
            }
            set
            {
                _dilation_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("start_depth", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="start_depth")]
        public int Start_depth
        {
            get
            {
                return _start_depth;
            }
            set
            {
                _start_depth = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("end_depth", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="end_depth")]
        public int End_depth
        {
            get
            {
                return _end_depth;
            }
            set
            {
                _end_depth = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("depth_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="depth_unit")]
        public SizeUnit Depth_unit
        {
            get
            {
                return _depth_unit;
            }
            set
            {
                _depth_unit = value;
            }
        }
    
        public System.IObservable<StackChannel> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new StackChannel(this)));
        }
    
        public System.IObservable<StackChannel> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new StackChannel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channel_name = " + _channel_name + ", ");
            stringBuilder.Append("light_source_name = " + _light_source_name + ", ");
            stringBuilder.Append("filter_names = " + _filter_names + ", ");
            stringBuilder.Append("detector_name = " + _detector_name + ", ");
            stringBuilder.Append("additional_device_names = " + _additional_device_names + ", ");
            stringBuilder.Append("excitation_wavelength = " + _excitation_wavelength + ", ");
            stringBuilder.Append("excitation_wavelength_unit = " + _excitation_wavelength_unit + ", ");
            stringBuilder.Append("excitation_power = " + _excitation_power + ", ");
            stringBuilder.Append("excitation_power_unit = " + _excitation_power_unit + ", ");
            stringBuilder.Append("filter_wheel_index = " + _filter_wheel_index + ", ");
            stringBuilder.Append("dilation = " + _dilation + ", ");
            stringBuilder.Append("dilation_unit = " + _dilation_unit + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("start_depth = " + _start_depth + ", ");
            stringBuilder.Append("end_depth = " + _end_depth + ", ");
            stringBuilder.Append("depth_unit = " + _depth_unit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of stimulus used during session
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of stimulus used during session")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class StimulusEpoch
    {
    
        private object _stimulus;
    
        private System.DateTimeOffset _stimulus_start_time;
    
        private System.DateTimeOffset _stimulus_end_time;
    
        public StimulusEpoch()
        {
        }
    
        protected StimulusEpoch(StimulusEpoch other)
        {
            _stimulus = other._stimulus;
            _stimulus_start_time = other._stimulus_start_time;
            _stimulus_end_time = other._stimulus_end_time;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus")]
        public object Stimulus
        {
            get
            {
                return _stimulus;
            }
            set
            {
                _stimulus = value;
            }
        }
    
        /// <summary>
        /// When a specific stimulus begins. This might be the same as the session start time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_start_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_start_time")]
        [System.ComponentModel.DescriptionAttribute("When a specific stimulus begins. This might be the same as the session start time" +
            ".")]
        public System.DateTimeOffset Stimulus_start_time
        {
            get
            {
                return _stimulus_start_time;
            }
            set
            {
                _stimulus_start_time = value;
            }
        }
    
        /// <summary>
        /// When a specific stimulus ends. This might be the same as the session end time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_end_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_end_time")]
        [System.ComponentModel.DescriptionAttribute("When a specific stimulus ends. This might be the same as the session end time.")]
        public System.DateTimeOffset Stimulus_end_time
        {
            get
            {
                return _stimulus_end_time;
            }
            set
            {
                _stimulus_end_time = value;
            }
        }
    
        public System.IObservable<StimulusEpoch> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new StimulusEpoch(this)));
        }
    
        public System.IObservable<StimulusEpoch> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new StimulusEpoch(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("stimulus = " + _stimulus + ", ");
            stringBuilder.Append("stimulus_start_time = " + _stimulus_start_time + ", ");
            stringBuilder.Append("stimulus_end_time = " + _stimulus_end_time);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Data streams with a start and stop time
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Data streams with a start and stop time")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Stream
    {
    
        private System.DateTimeOffset _stream_start_time;
    
        private System.DateTimeOffset _stream_end_time;
    
        private System.Collections.Generic.List<string> _daq_names = new System.Collections.Generic.List<string>();
    
        private System.Collections.Generic.List<string> _camera_names = new System.Collections.Generic.List<string>();
    
        private System.Collections.Generic.List<object> _light_sources = new System.Collections.Generic.List<object>();
    
        private System.Collections.Generic.List<EphysModule> _ephys_modules = new System.Collections.Generic.List<EphysModule>();
    
        private System.Collections.Generic.List<DomeModule> _stick_microscopes = new System.Collections.Generic.List<DomeModule>();
    
        private System.Collections.Generic.List<ManipulatorModule> _manipulator_modules = new System.Collections.Generic.List<ManipulatorModule>();
    
        private System.Collections.Generic.List<DetectorConfig> _detectors = new System.Collections.Generic.List<DetectorConfig>();
    
        private System.Collections.Generic.List<FiberConnectionConfig> _fiber_connections = new System.Collections.Generic.List<FiberConnectionConfig>();
    
        private System.Collections.Generic.List<FiberModule> _fiber_modules = new System.Collections.Generic.List<FiberModule>();
    
        private System.Collections.Generic.List<FieldOfView> _ophys_fovs = new System.Collections.Generic.List<FieldOfView>();
    
        private SlapFieldOfView _slap_fovs;
    
        private Stack _stack_parameters;
    
        private System.Collections.Generic.List<string> _stimulus_device_names = new System.Collections.Generic.List<string>();
    
        private string _mouse_platform_name;
    
        private bool _active_mouse_platform;
    
        private System.Collections.Generic.List<object> _stream_modalities = new System.Collections.Generic.List<object>();
    
        private string _notes;
    
        public Stream()
        {
        }
    
        protected Stream(Stream other)
        {
            _stream_start_time = other._stream_start_time;
            _stream_end_time = other._stream_end_time;
            _daq_names = other._daq_names;
            _camera_names = other._camera_names;
            _light_sources = other._light_sources;
            _ephys_modules = other._ephys_modules;
            _stick_microscopes = other._stick_microscopes;
            _manipulator_modules = other._manipulator_modules;
            _detectors = other._detectors;
            _fiber_connections = other._fiber_connections;
            _fiber_modules = other._fiber_modules;
            _ophys_fovs = other._ophys_fovs;
            _slap_fovs = other._slap_fovs;
            _stack_parameters = other._stack_parameters;
            _stimulus_device_names = other._stimulus_device_names;
            _mouse_platform_name = other._mouse_platform_name;
            _active_mouse_platform = other._active_mouse_platform;
            _stream_modalities = other._stream_modalities;
            _notes = other._notes;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stream_start_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stream_start_time")]
        public System.DateTimeOffset Stream_start_time
        {
            get
            {
                return _stream_start_time;
            }
            set
            {
                _stream_start_time = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stream_end_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stream_end_time")]
        public System.DateTimeOffset Stream_end_time
        {
            get
            {
                return _stream_end_time;
            }
            set
            {
                _stream_end_time = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("daq_names")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="daq_names")]
        public System.Collections.Generic.List<string> Daq_names
        {
            get
            {
                return _daq_names;
            }
            set
            {
                _daq_names = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_names")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="camera_names")]
        public System.Collections.Generic.List<string> Camera_names
        {
            get
            {
                return _camera_names;
            }
            set
            {
                _camera_names = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("light_sources")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="light_sources")]
        public System.Collections.Generic.List<object> Light_sources
        {
            get
            {
                return _light_sources;
            }
            set
            {
                _light_sources = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ephys_modules")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ephys_modules")]
        public System.Collections.Generic.List<EphysModule> Ephys_modules
        {
            get
            {
                return _ephys_modules;
            }
            set
            {
                _ephys_modules = value;
            }
        }
    
        /// <summary>
        /// Must match stick microscope assemblies in rig file
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stick_microscopes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stick_microscopes")]
        [System.ComponentModel.DescriptionAttribute("Must match stick microscope assemblies in rig file")]
        public System.Collections.Generic.List<DomeModule> Stick_microscopes
        {
            get
            {
                return _stick_microscopes;
            }
            set
            {
                _stick_microscopes = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator_modules")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="manipulator_modules")]
        public System.Collections.Generic.List<ManipulatorModule> Manipulator_modules
        {
            get
            {
                return _manipulator_modules;
            }
            set
            {
                _manipulator_modules = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("detectors")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="detectors")]
        public System.Collections.Generic.List<DetectorConfig> Detectors
        {
            get
            {
                return _detectors;
            }
            set
            {
                _detectors = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fiber_connections")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fiber_connections")]
        public System.Collections.Generic.List<FiberConnectionConfig> Fiber_connections
        {
            get
            {
                return _fiber_connections;
            }
            set
            {
                _fiber_connections = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fiber_modules")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fiber_modules")]
        public System.Collections.Generic.List<FiberModule> Fiber_modules
        {
            get
            {
                return _fiber_modules;
            }
            set
            {
                _fiber_modules = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ophys_fovs")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ophys_fovs")]
        public System.Collections.Generic.List<FieldOfView> Ophys_fovs
        {
            get
            {
                return _ophys_fovs;
            }
            set
            {
                _ophys_fovs = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("slap_fovs")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="slap_fovs")]
        public SlapFieldOfView Slap_fovs
        {
            get
            {
                return _slap_fovs;
            }
            set
            {
                _slap_fovs = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stack_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stack_parameters")]
        public Stack Stack_parameters
        {
            get
            {
                return _stack_parameters;
            }
            set
            {
                _stack_parameters = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_device_names")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_device_names")]
        public System.Collections.Generic.List<string> Stimulus_device_names
        {
            get
            {
                return _stimulus_device_names;
            }
            set
            {
                _stimulus_device_names = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("mouse_platform_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="mouse_platform_name")]
        public string Mouse_platform_name
        {
            get
            {
                return _mouse_platform_name;
            }
            set
            {
                _mouse_platform_name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("active_mouse_platform", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="active_mouse_platform")]
        public bool Active_mouse_platform
        {
            get
            {
                return _active_mouse_platform;
            }
            set
            {
                _active_mouse_platform = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stream_modalities", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stream_modalities")]
        public System.Collections.Generic.List<object> Stream_modalities
        {
            get
            {
                return _stream_modalities;
            }
            set
            {
                _stream_modalities = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<Stream> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Stream(this)));
        }
    
        public System.IObservable<Stream> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Stream(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("stream_start_time = " + _stream_start_time + ", ");
            stringBuilder.Append("stream_end_time = " + _stream_end_time + ", ");
            stringBuilder.Append("daq_names = " + _daq_names + ", ");
            stringBuilder.Append("camera_names = " + _camera_names + ", ");
            stringBuilder.Append("light_sources = " + _light_sources + ", ");
            stringBuilder.Append("ephys_modules = " + _ephys_modules + ", ");
            stringBuilder.Append("stick_microscopes = " + _stick_microscopes + ", ");
            stringBuilder.Append("manipulator_modules = " + _manipulator_modules + ", ");
            stringBuilder.Append("detectors = " + _detectors + ", ");
            stringBuilder.Append("fiber_connections = " + _fiber_connections + ", ");
            stringBuilder.Append("fiber_modules = " + _fiber_modules + ", ");
            stringBuilder.Append("ophys_fovs = " + _ophys_fovs + ", ");
            stringBuilder.Append("slap_fovs = " + _slap_fovs + ", ");
            stringBuilder.Append("stack_parameters = " + _stack_parameters + ", ");
            stringBuilder.Append("stimulus_device_names = " + _stimulus_device_names + ", ");
            stringBuilder.Append("mouse_platform_name = " + _mouse_platform_name + ", ");
            stringBuilder.Append("active_mouse_platform = " + _active_mouse_platform + ", ");
            stringBuilder.Append("stream_modalities = " + _stream_modalities + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of Time Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TimeUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="hour")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="hour")]
        Hour = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="minute")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minute")]
        Minute = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="second")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="second")]
        Second = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="millisecond")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="millisecond")]
        Millisecond = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microsecond")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microsecond")]
        Microsecond = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanosecond")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanosecond")]
        Nanosecond = 5,
    }


    /// <summary>
    /// TrainedBehavior
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("TrainedBehavior")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TrainedBehavior
    {
    
        private object _name;
    
        private object _abbreviation;
    
        public TrainedBehavior()
        {
        }
    
        protected TrainedBehavior(TrainedBehavior other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public object Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public object Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<TrainedBehavior> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TrainedBehavior(this)));
        }
    
        public System.IObservable<TrainedBehavior> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TrainedBehavior(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Types of detector triggers
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TriggerType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Internal")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Internal")]
        Internal = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="External")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="External")]
        External = 1,
    }


    /// <summary>
    /// Description of visual stimulus parameters. Provides a high level description of stimulus.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of visual stimulus parameters. Provides a high level description of s" +
        "timulus.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VisualStimulation
    {
    
        private object _stimulus_type;
    
        private string _stimulus_name;
    
        private object _stimulus_parameters;
    
        private System.Collections.Generic.List<string> _stimulus_template_name = new System.Collections.Generic.List<string>();
    
        private string _stimulus_software;
    
        private string _stimulus_software_version;
    
        private string _stimulus_script;
    
        private string _stimulus_script_version;
    
        private string _notes;
    
        public VisualStimulation()
        {
        }
    
        protected VisualStimulation(VisualStimulation other)
        {
            _stimulus_type = other._stimulus_type;
            _stimulus_name = other._stimulus_name;
            _stimulus_parameters = other._stimulus_parameters;
            _stimulus_template_name = other._stimulus_template_name;
            _stimulus_software = other._stimulus_software;
            _stimulus_software_version = other._stimulus_software_version;
            _stimulus_script = other._stimulus_script;
            _stimulus_script_version = other._stimulus_script_version;
            _notes = other._notes;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_type")]
        public object Stimulus_type
        {
            get
            {
                return _stimulus_type;
            }
            set
            {
                _stimulus_type = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_name")]
        public string Stimulus_name
        {
            get
            {
                return _stimulus_name;
            }
            set
            {
                _stimulus_name = value;
            }
        }
    
        /// <summary>
        /// Define and list the parameter values used (e.g. all TF or orientation values)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_parameters")]
        [System.ComponentModel.DescriptionAttribute("Define and list the parameter values used (e.g. all TF or orientation values)")]
        public object Stimulus_parameters
        {
            get
            {
                return _stimulus_parameters;
            }
            set
            {
                _stimulus_parameters = value;
            }
        }
    
        /// <summary>
        /// Name of image set or movie displayed
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_template_name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_template_name")]
        [System.ComponentModel.DescriptionAttribute("Name of image set or movie displayed")]
        public System.Collections.Generic.List<string> Stimulus_template_name
        {
            get
            {
                return _stimulus_template_name;
            }
            set
            {
                _stimulus_template_name = value;
            }
        }
    
        /// <summary>
        /// The software used to control the stimulus (e.g. Bonsai)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_software", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_software")]
        [System.ComponentModel.DescriptionAttribute("The software used to control the stimulus (e.g. Bonsai)")]
        public string Stimulus_software
        {
            get
            {
                return _stimulus_software;
            }
            set
            {
                _stimulus_software = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_software_version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_software_version")]
        public string Stimulus_software_version
        {
            get
            {
                return _stimulus_software_version;
            }
            set
            {
                _stimulus_software_version = value;
            }
        }
    
        /// <summary>
        /// The specific code for this stimulus instance
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_script", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_script")]
        [System.ComponentModel.DescriptionAttribute("The specific code for this stimulus instance")]
        public string Stimulus_script
        {
            get
            {
                return _stimulus_script;
            }
            set
            {
                _stimulus_script = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_script_version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_script_version")]
        public string Stimulus_script_version
        {
            get
            {
                return _stimulus_script_version;
            }
            set
            {
                _stimulus_script_version = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<VisualStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VisualStimulation(this)));
        }
    
        public System.IObservable<VisualStimulation> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VisualStimulation(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("stimulus_type = " + _stimulus_type + ", ");
            stringBuilder.Append("stimulus_name = " + _stimulus_name + ", ");
            stringBuilder.Append("stimulus_parameters = " + _stimulus_parameters + ", ");
            stringBuilder.Append("stimulus_template_name = " + _stimulus_template_name + ", ");
            stringBuilder.Append("stimulus_software = " + _stimulus_software + ", ");
            stringBuilder.Append("stimulus_software_version = " + _stimulus_software_version + ", ");
            stringBuilder.Append("stimulus_script = " + _stimulus_script + ", ");
            stringBuilder.Append("stimulus_script_version = " + _stimulus_script_version + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of Volume Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum VolumeUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="liter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="liter")]
        Liter = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="milliliter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="milliliter")]
        Milliliter = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microliter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microliter")]
        Microliter = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanoliter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanoliter")]
        Nanoliter = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingSession
    {
    
        private Metadata _metadata = new Metadata();
    
        private Session _session = new Session();
    
        public AindVrForagingSession()
        {
        }
    
        protected AindVrForagingSession(AindVrForagingSession other)
        {
            _metadata = other._metadata;
            _session = other._session;
        }
    
        /// <summary>
        /// Metadata of the session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("metadata", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        [System.ComponentModel.DescriptionAttribute("Metadata of the session")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        /// <summary>
        /// Session data
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session")]
        [System.ComponentModel.DescriptionAttribute("Session data")]
        public Session Session
        {
            get
            {
                return _session;
            }
            set
            {
                _session = value;
            }
        }
    
        public System.IObservable<AindVrForagingSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindVrForagingSession(this)));
        }
    
        public System.IObservable<AindVrForagingSession> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindVrForagingSession(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("metadata = " + _metadata + ", ");
            stringBuilder.Append("session = " + _session);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Reward_consumed_during_epoch
    {
    
        public Reward_consumed_during_epoch()
        {
        }
    
        protected Reward_consumed_during_epoch(Reward_consumed_during_epoch other)
        {
        }
    
        public System.IObservable<Reward_consumed_during_epoch> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Reward_consumed_during_epoch(this)));
        }
    
        public System.IObservable<Reward_consumed_during_epoch> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Reward_consumed_during_epoch(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Ml
    {
    
        public Ml()
        {
        }
    
        protected Ml(Ml other)
        {
        }
    
        public System.IObservable<Ml> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Ml(this)));
        }
    
        public System.IObservable<Ml> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Ml(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Ap
    {
    
        public Ap()
        {
        }
    
        protected Ap(Ap other)
        {
        }
    
        public System.IObservable<Ap> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Ap(this)));
        }
    
        public System.IObservable<Ap> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Ap(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Dv
    {
    
        public Dv()
        {
        }
    
        protected Dv(Dv other)
        {
        }
    
        public System.IObservable<Dv> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Dv(this)));
        }
    
        public System.IObservable<Dv> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Dv(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class X
    {
    
        public X()
        {
        }
    
        protected X(X other)
        {
        }
    
        public System.IObservable<X> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new X(this)));
        }
    
        public System.IObservable<X> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new X(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Y
    {
    
        public Y()
        {
        }
    
        protected Y(Y other)
        {
        }
    
        public System.IObservable<Y> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Y(this)));
        }
    
        public System.IObservable<Y> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Y(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Z
    {
    
        public Z()
        {
        }
    
        protected Z(Z other)
        {
        }
    
        public System.IObservable<Z> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Z(this)));
        }
    
        public System.IObservable<Z> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Z(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Exposure_time
    {
    
        public Exposure_time()
        {
        }
    
        protected Exposure_time(Exposure_time other)
        {
        }
    
        public System.IObservable<Exposure_time> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Exposure_time(this)));
        }
    
        public System.IObservable<Exposure_time> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Exposure_time(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Arc_angle
    {
    
        public Arc_angle()
        {
        }
    
        protected Arc_angle(Arc_angle other)
        {
        }
    
        public System.IObservable<Arc_angle> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Arc_angle(this)));
        }
    
        public System.IObservable<Arc_angle> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Arc_angle(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Module_angle
    {
    
        public Module_angle()
        {
        }
    
        protected Module_angle(Module_angle other)
        {
        }
    
        public System.IObservable<Module_angle> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Module_angle(this)));
        }
    
        public System.IObservable<Module_angle> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Module_angle(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Rotation_angle
    {
    
        public Rotation_angle()
        {
        }
    
        protected Rotation_angle(Rotation_angle other)
        {
        }
    
        public System.IObservable<Rotation_angle> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Rotation_angle(this)));
        }
    
        public System.IObservable<Rotation_angle> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Rotation_angle(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Arc_angle2
    {
    
        public Arc_angle2()
        {
        }
    
        protected Arc_angle2(Arc_angle2 other)
        {
        }
    
        public System.IObservable<Arc_angle2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Arc_angle2(this)));
        }
    
        public System.IObservable<Arc_angle2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Arc_angle2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Module_angle2
    {
    
        public Module_angle2()
        {
        }
    
        protected Module_angle2(Module_angle2 other)
        {
        }
    
        public System.IObservable<Module_angle2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Module_angle2(this)));
        }
    
        public System.IObservable<Module_angle2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Module_angle2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Rotation_angle2
    {
    
        public Rotation_angle2()
        {
        }
    
        protected Rotation_angle2(Rotation_angle2 other)
        {
        }
    
        public System.IObservable<Rotation_angle2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Rotation_angle2(this)));
        }
    
        public System.IObservable<Rotation_angle2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Rotation_angle2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Patch_cord_output_power
    {
    
        public Patch_cord_output_power()
        {
        }
    
        protected Patch_cord_output_power(Patch_cord_output_power other)
        {
        }
    
        public System.IObservable<Patch_cord_output_power> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Patch_cord_output_power(this)));
        }
    
        public System.IObservable<Patch_cord_output_power> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Patch_cord_output_power(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Arc_angle3
    {
    
        public Arc_angle3()
        {
        }
    
        protected Arc_angle3(Arc_angle3 other)
        {
        }
    
        public System.IObservable<Arc_angle3> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Arc_angle3(this)));
        }
    
        public System.IObservable<Arc_angle3> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Arc_angle3(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Module_angle3
    {
    
        public Module_angle3()
        {
        }
    
        protected Module_angle3(Module_angle3 other)
        {
        }
    
        public System.IObservable<Module_angle3> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Module_angle3(this)));
        }
    
        public System.IObservable<Module_angle3> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Module_angle3(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Rotation_angle3
    {
    
        public Rotation_angle3()
        {
        }
    
        protected Rotation_angle3(Rotation_angle3 other)
        {
        }
    
        public System.IObservable<Rotation_angle3> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Rotation_angle3(this)));
        }
    
        public System.IObservable<Rotation_angle3> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Rotation_angle3(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Fov_coordinate_ml
    {
    
        public Fov_coordinate_ml()
        {
        }
    
        protected Fov_coordinate_ml(Fov_coordinate_ml other)
        {
        }
    
        public System.IObservable<Fov_coordinate_ml> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Fov_coordinate_ml(this)));
        }
    
        public System.IObservable<Fov_coordinate_ml> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Fov_coordinate_ml(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Fov_coordinate_ap
    {
    
        public Fov_coordinate_ap()
        {
        }
    
        protected Fov_coordinate_ap(Fov_coordinate_ap other)
        {
        }
    
        public System.IObservable<Fov_coordinate_ap> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Fov_coordinate_ap(this)));
        }
    
        public System.IObservable<Fov_coordinate_ap> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Fov_coordinate_ap(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Fov_scale_factor
    {
    
        public Fov_scale_factor()
        {
        }
    
        protected Fov_scale_factor(Fov_scale_factor other)
        {
        }
    
        public System.IObservable<Fov_scale_factor> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Fov_scale_factor(this)));
        }
    
        public System.IObservable<Fov_scale_factor> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Fov_scale_factor(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Frame_rate
    {
    
        public Frame_rate()
        {
        }
    
        protected Frame_rate(Frame_rate other)
        {
        }
    
        public System.IObservable<Frame_rate> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Frame_rate(this)));
        }
    
        public System.IObservable<Frame_rate> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Frame_rate(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Excitation_power
    {
    
        public Excitation_power()
        {
        }
    
        protected Excitation_power(Excitation_power other)
        {
        }
    
        public System.IObservable<Excitation_power> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Excitation_power(this)));
        }
    
        public System.IObservable<Excitation_power> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Excitation_power(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Excitation_power2
    {
    
        public Excitation_power2()
        {
        }
    
        protected Excitation_power2(Excitation_power2 other)
        {
        }
    
        public System.IObservable<Excitation_power2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Excitation_power2(this)));
        }
    
        public System.IObservable<Excitation_power2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Excitation_power2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Arc_angle4
    {
    
        public Arc_angle4()
        {
        }
    
        protected Arc_angle4(Arc_angle4 other)
        {
        }
    
        public System.IObservable<Arc_angle4> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Arc_angle4(this)));
        }
    
        public System.IObservable<Arc_angle4> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Arc_angle4(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Module_angle4
    {
    
        public Module_angle4()
        {
        }
    
        protected Module_angle4(Module_angle4 other)
        {
        }
    
        public System.IObservable<Module_angle4> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Module_angle4(this)));
        }
    
        public System.IObservable<Module_angle4> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Module_angle4(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Rotation_angle4
    {
    
        public Rotation_angle4()
        {
        }
    
        protected Rotation_angle4(Rotation_angle4 other)
        {
        }
    
        public System.IObservable<Rotation_angle4> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Rotation_angle4(this)));
        }
    
        public System.IObservable<Rotation_angle4> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Rotation_angle4(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Odorant_dilution
    {
    
        public Odorant_dilution()
        {
        }
    
        protected Odorant_dilution(Odorant_dilution other)
        {
        }
    
        public System.IObservable<Odorant_dilution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Odorant_dilution(this)));
        }
    
        public System.IObservable<Odorant_dilution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Odorant_dilution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Pulse_train_duration
    {
    
        public Pulse_train_duration()
        {
        }
    
        protected Pulse_train_duration(Pulse_train_duration other)
        {
        }
    
        public System.IObservable<Pulse_train_duration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Pulse_train_duration(this)));
        }
    
        public System.IObservable<Pulse_train_duration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Pulse_train_duration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Pulse_train_interval
    {
    
        public Pulse_train_interval()
        {
        }
    
        protected Pulse_train_interval(Pulse_train_interval other)
        {
        }
    
        public System.IObservable<Pulse_train_interval> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Pulse_train_interval(this)));
        }
    
        public System.IObservable<Pulse_train_interval> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Pulse_train_interval(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Baseline_duration
    {
    
        public Baseline_duration()
        {
        }
    
        protected Baseline_duration(Baseline_duration other)
        {
        }
    
        public System.IObservable<Baseline_duration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Baseline_duration(this)));
        }
    
        public System.IObservable<Baseline_duration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Baseline_duration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Inter_trial_interval
    {
    
        public Inter_trial_interval()
        {
        }
    
        protected Inter_trial_interval(Inter_trial_interval other)
        {
        }
    
        public System.IObservable<Inter_trial_interval> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Inter_trial_interval(this)));
        }
    
        public System.IObservable<Inter_trial_interval> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Inter_trial_interval(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Stimulation_laser_power
    {
    
        public Stimulation_laser_power()
        {
        }
    
        protected Stimulation_laser_power(Stimulation_laser_power other)
        {
        }
    
        public System.IObservable<Stimulation_laser_power> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Stimulation_laser_power(this)));
        }
    
        public System.IObservable<Stimulation_laser_power> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Stimulation_laser_power(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Spiral_duration
    {
    
        public Spiral_duration()
        {
        }
    
        protected Spiral_duration(Spiral_duration other)
        {
        }
    
        public System.IObservable<Spiral_duration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Spiral_duration(this)));
        }
    
        public System.IObservable<Spiral_duration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Spiral_duration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Inter_spiral_interval
    {
    
        public Inter_spiral_interval()
        {
        }
    
        protected Inter_spiral_interval(Inter_spiral_interval other)
        {
        }
    
        public System.IObservable<Inter_spiral_interval> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Inter_spiral_interval(this)));
        }
    
        public System.IObservable<Inter_spiral_interval> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Inter_spiral_interval(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Pitch
    {
    
        public Pitch()
        {
        }
    
        protected Pitch(Pitch other)
        {
        }
    
        public System.IObservable<Pitch> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Pitch(this)));
        }
    
        public System.IObservable<Pitch> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Pitch(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Yaw
    {
    
        public Yaw()
        {
        }
    
        protected Yaw(Yaw other)
        {
        }
    
        public System.IObservable<Yaw> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Yaw(this)));
        }
    
        public System.IObservable<Yaw> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Yaw(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Roll
    {
    
        public Roll()
        {
        }
    
        protected Roll(Roll other)
        {
        }
    
        public System.IObservable<Roll> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Roll(this)));
        }
    
        public System.IObservable<Roll> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Roll(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class X2
    {
    
        public X2()
        {
        }
    
        protected X2(X2 other)
        {
        }
    
        public System.IObservable<X2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new X2(this)));
        }
    
        public System.IObservable<X2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new X2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Y2
    {
    
        public Y2()
        {
        }
    
        protected Y2(Y2 other)
        {
        }
    
        public System.IObservable<Y2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Y2(this)));
        }
    
        public System.IObservable<Y2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Y2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Z2
    {
    
        public Z2()
        {
        }
    
        protected Z2(Z2 other)
        {
        }
    
        public System.IObservable<Z2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Z2(this)));
        }
    
        public System.IObservable<Z2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Z2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Animal_weight_prior
    {
    
        public Animal_weight_prior()
        {
        }
    
        protected Animal_weight_prior(Animal_weight_prior other)
        {
        }
    
        public System.IObservable<Animal_weight_prior> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Animal_weight_prior(this)));
        }
    
        public System.IObservable<Animal_weight_prior> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Animal_weight_prior(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Animal_weight_post
    {
    
        public Animal_weight_post()
        {
        }
    
        protected Animal_weight_post(Animal_weight_post other)
        {
        }
    
        public System.IObservable<Animal_weight_post> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Animal_weight_post(this)));
        }
    
        public System.IObservable<Animal_weight_post> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Animal_weight_post(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Reward_consumed_total
    {
    
        public Reward_consumed_total()
        {
        }
    
        protected Reward_consumed_total(Reward_consumed_total other)
        {
        }
    
        public System.IObservable<Reward_consumed_total> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Reward_consumed_total(this)));
        }
    
        public System.IObservable<Reward_consumed_total> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Reward_consumed_total(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Fov_coordinate_ml2
    {
    
        public Fov_coordinate_ml2()
        {
        }
    
        protected Fov_coordinate_ml2(Fov_coordinate_ml2 other)
        {
        }
    
        public System.IObservable<Fov_coordinate_ml2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Fov_coordinate_ml2(this)));
        }
    
        public System.IObservable<Fov_coordinate_ml2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Fov_coordinate_ml2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Fov_coordinate_ap2
    {
    
        public Fov_coordinate_ap2()
        {
        }
    
        protected Fov_coordinate_ap2(Fov_coordinate_ap2 other)
        {
        }
    
        public System.IObservable<Fov_coordinate_ap2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Fov_coordinate_ap2(this)));
        }
    
        public System.IObservable<Fov_coordinate_ap2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Fov_coordinate_ap2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Fov_scale_factor2
    {
    
        public Fov_scale_factor2()
        {
        }
    
        protected Fov_scale_factor2(Fov_scale_factor2 other)
        {
        }
    
        public System.IObservable<Fov_scale_factor2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Fov_scale_factor2(this)));
        }
    
        public System.IObservable<Fov_scale_factor2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Fov_scale_factor2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Frame_rate2
    {
    
        public Frame_rate2()
        {
        }
    
        protected Frame_rate2(Frame_rate2 other)
        {
        }
    
        public System.IObservable<Frame_rate2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Frame_rate2(this)));
        }
    
        public System.IObservable<Frame_rate2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Frame_rate2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Frame_rate3
    {
    
        public Frame_rate3()
        {
        }
    
        protected Frame_rate3(Frame_rate3 other)
        {
        }
    
        public System.IObservable<Frame_rate3> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Frame_rate3(this)));
        }
    
        public System.IObservable<Frame_rate3> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Frame_rate3(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<BaseName> source)
        {
            return Process<BaseName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BehaviorStimulation> source)
        {
            return Process<BehaviorStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BehaviorVideos> source)
        {
            return Process<BehaviorVideos>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Calibration> source)
        {
            return Process<Calibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CcfCoords> source)
        {
            return Process<CcfCoords>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Confocal> source)
        {
            return Process<Confocal>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Coordinates3d> source)
        {
            return Process<Coordinates3d>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DetectorConfig> source)
        {
            return Process<DetectorConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DomeModule> source)
        {
            return Process<DomeModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Ecephys> source)
        {
            return Process<Ecephys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Electromyography> source)
        {
            return Process<Electromyography>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EphysModule> source)
        {
            return Process<EphysModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EphysProbeConfig> source)
        {
            return Process<EphysProbeConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fib> source)
        {
            return Process<Fib>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FiberConnectionConfig> source)
        {
            return Process<FiberConnectionConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FiberModule> source)
        {
            return Process<FiberModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FieldOfView> source)
        {
            return Process<FieldOfView>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fmost> source)
        {
            return Process<Fmost>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Icephys> source)
        {
            return Process<Icephys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Isi> source)
        {
            return Process<Isi>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LaserConfig> source)
        {
            return Process<LaserConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LightEmittingDiodeConfig> source)
        {
            return Process<LightEmittingDiodeConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Maintenance> source)
        {
            return Process<Maintenance>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ManipulatorModule> source)
        {
            return Process<ManipulatorModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Merfish> source)
        {
            return Process<Merfish>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Mri> source)
        {
            return Process<Mri>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannelConfig> source)
        {
            return Process<OlfactometerChannelConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactoryStimulation> source)
        {
            return Process<OlfactoryStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OptoStimulation> source)
        {
            return Process<OptoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PIDName> source)
        {
            return Process<PIDName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<POphys> source)
        {
            return Process<POphys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulation> source)
        {
            return Process<PhotoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulationGroup> source)
        {
            return Process<PhotoStimulationGroup>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reagent> source)
        {
            return Process<Reagent>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RelativePosition> source)
        {
            return Process<RelativePosition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardDeliveryConfig> source)
        {
            return Process<RewardDeliveryConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSpoutConfig> source)
        {
            return Process<RewardSpoutConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Session> source)
        {
            return Process<Session>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Slap> source)
        {
            return Process<Slap>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SlapFieldOfView> source)
        {
            return Process<SlapFieldOfView>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Software> source)
        {
            return Process<Software>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Spim> source)
        {
            return Process<Spim>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stack> source)
        {
            return Process<Stack>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StackChannel> source)
        {
            return Process<StackChannel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StimulusEpoch> source)
        {
            return Process<StimulusEpoch>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stream> source)
        {
            return Process<Stream>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TrainedBehavior> source)
        {
            return Process<TrainedBehavior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VisualStimulation> source)
        {
            return Process<VisualStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingSession> source)
        {
            return Process<AindVrForagingSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reward_consumed_during_epoch> source)
        {
            return Process<Reward_consumed_during_epoch>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Ml> source)
        {
            return Process<Ml>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Ap> source)
        {
            return Process<Ap>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Dv> source)
        {
            return Process<Dv>(source);
        }

        public System.IObservable<string> Process(System.IObservable<X> source)
        {
            return Process<X>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Y> source)
        {
            return Process<Y>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Z> source)
        {
            return Process<Z>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Exposure_time> source)
        {
            return Process<Exposure_time>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Arc_angle> source)
        {
            return Process<Arc_angle>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Module_angle> source)
        {
            return Process<Module_angle>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rotation_angle> source)
        {
            return Process<Rotation_angle>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Arc_angle2> source)
        {
            return Process<Arc_angle2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Module_angle2> source)
        {
            return Process<Module_angle2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rotation_angle2> source)
        {
            return Process<Rotation_angle2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Patch_cord_output_power> source)
        {
            return Process<Patch_cord_output_power>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Arc_angle3> source)
        {
            return Process<Arc_angle3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Module_angle3> source)
        {
            return Process<Module_angle3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rotation_angle3> source)
        {
            return Process<Rotation_angle3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_coordinate_ml> source)
        {
            return Process<Fov_coordinate_ml>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_coordinate_ap> source)
        {
            return Process<Fov_coordinate_ap>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_scale_factor> source)
        {
            return Process<Fov_scale_factor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Frame_rate> source)
        {
            return Process<Frame_rate>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Excitation_power> source)
        {
            return Process<Excitation_power>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Excitation_power2> source)
        {
            return Process<Excitation_power2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Arc_angle4> source)
        {
            return Process<Arc_angle4>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Module_angle4> source)
        {
            return Process<Module_angle4>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rotation_angle4> source)
        {
            return Process<Rotation_angle4>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Odorant_dilution> source)
        {
            return Process<Odorant_dilution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Pulse_train_duration> source)
        {
            return Process<Pulse_train_duration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Pulse_train_interval> source)
        {
            return Process<Pulse_train_interval>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Baseline_duration> source)
        {
            return Process<Baseline_duration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Inter_trial_interval> source)
        {
            return Process<Inter_trial_interval>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stimulation_laser_power> source)
        {
            return Process<Stimulation_laser_power>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Spiral_duration> source)
        {
            return Process<Spiral_duration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Inter_spiral_interval> source)
        {
            return Process<Inter_spiral_interval>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Pitch> source)
        {
            return Process<Pitch>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Yaw> source)
        {
            return Process<Yaw>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Roll> source)
        {
            return Process<Roll>(source);
        }

        public System.IObservable<string> Process(System.IObservable<X2> source)
        {
            return Process<X2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Y2> source)
        {
            return Process<Y2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Z2> source)
        {
            return Process<Z2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Animal_weight_prior> source)
        {
            return Process<Animal_weight_prior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Animal_weight_post> source)
        {
            return Process<Animal_weight_post>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reward_consumed_total> source)
        {
            return Process<Reward_consumed_total>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_coordinate_ml2> source)
        {
            return Process<Fov_coordinate_ml2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_coordinate_ap2> source)
        {
            return Process<Fov_coordinate_ap2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_scale_factor2> source)
        {
            return Process<Fov_scale_factor2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Frame_rate2> source)
        {
            return Process<Frame_rate2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Frame_rate3> source)
        {
            return Process<Frame_rate3>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BehaviorStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BehaviorVideos>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Calibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CcfCoords>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Confocal>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Coordinates3d>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DetectorConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DomeModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Ecephys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Electromyography>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EphysModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EphysProbeConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fib>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FiberConnectionConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FiberModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FieldOfView>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fmost>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Icephys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Isi>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LaserConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LightEmittingDiodeConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Maintenance>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ManipulatorModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Merfish>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Mri>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannelConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactoryStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OptoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PIDName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<POphys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulationGroup>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reagent>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RelativePosition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardDeliveryConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSpoutConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Session>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Slap>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SlapFieldOfView>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Software>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Spim>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stack>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StackChannel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StimulusEpoch>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stream>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TrainedBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VisualStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reward_consumed_during_epoch>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Ml>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Ap>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Dv>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<X>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Y>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Z>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Exposure_time>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Arc_angle>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Module_angle>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rotation_angle>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Arc_angle2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Module_angle2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rotation_angle2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Patch_cord_output_power>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Arc_angle3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Module_angle3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rotation_angle3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_coordinate_ml>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_coordinate_ap>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_scale_factor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Frame_rate>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Excitation_power>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Excitation_power2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Arc_angle4>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Module_angle4>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rotation_angle4>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Odorant_dilution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Pulse_train_duration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Pulse_train_interval>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Baseline_duration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Inter_trial_interval>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stimulation_laser_power>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Spiral_duration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Inter_spiral_interval>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Pitch>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Yaw>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Roll>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<X2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Y2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Z2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Animal_weight_prior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Animal_weight_post>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reward_consumed_total>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_coordinate_ml2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_coordinate_ap2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_scale_factor2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Frame_rate2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Frame_rate3>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<BaseName> source)
        {
            return Process<BaseName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BehaviorStimulation> source)
        {
            return Process<BehaviorStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BehaviorVideos> source)
        {
            return Process<BehaviorVideos>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Calibration> source)
        {
            return Process<Calibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CcfCoords> source)
        {
            return Process<CcfCoords>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Confocal> source)
        {
            return Process<Confocal>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Coordinates3d> source)
        {
            return Process<Coordinates3d>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DetectorConfig> source)
        {
            return Process<DetectorConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DomeModule> source)
        {
            return Process<DomeModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Ecephys> source)
        {
            return Process<Ecephys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Electromyography> source)
        {
            return Process<Electromyography>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EphysModule> source)
        {
            return Process<EphysModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EphysProbeConfig> source)
        {
            return Process<EphysProbeConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fib> source)
        {
            return Process<Fib>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FiberConnectionConfig> source)
        {
            return Process<FiberConnectionConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FiberModule> source)
        {
            return Process<FiberModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FieldOfView> source)
        {
            return Process<FieldOfView>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fmost> source)
        {
            return Process<Fmost>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Icephys> source)
        {
            return Process<Icephys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Isi> source)
        {
            return Process<Isi>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LaserConfig> source)
        {
            return Process<LaserConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LightEmittingDiodeConfig> source)
        {
            return Process<LightEmittingDiodeConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Maintenance> source)
        {
            return Process<Maintenance>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ManipulatorModule> source)
        {
            return Process<ManipulatorModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Merfish> source)
        {
            return Process<Merfish>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Mri> source)
        {
            return Process<Mri>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannelConfig> source)
        {
            return Process<OlfactometerChannelConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactoryStimulation> source)
        {
            return Process<OlfactoryStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OptoStimulation> source)
        {
            return Process<OptoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PIDName> source)
        {
            return Process<PIDName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<POphys> source)
        {
            return Process<POphys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulation> source)
        {
            return Process<PhotoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulationGroup> source)
        {
            return Process<PhotoStimulationGroup>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reagent> source)
        {
            return Process<Reagent>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RelativePosition> source)
        {
            return Process<RelativePosition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardDeliveryConfig> source)
        {
            return Process<RewardDeliveryConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSpoutConfig> source)
        {
            return Process<RewardSpoutConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Session> source)
        {
            return Process<Session>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Slap> source)
        {
            return Process<Slap>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SlapFieldOfView> source)
        {
            return Process<SlapFieldOfView>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Software> source)
        {
            return Process<Software>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Spim> source)
        {
            return Process<Spim>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stack> source)
        {
            return Process<Stack>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StackChannel> source)
        {
            return Process<StackChannel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StimulusEpoch> source)
        {
            return Process<StimulusEpoch>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stream> source)
        {
            return Process<Stream>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TrainedBehavior> source)
        {
            return Process<TrainedBehavior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VisualStimulation> source)
        {
            return Process<VisualStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingSession> source)
        {
            return Process<AindVrForagingSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reward_consumed_during_epoch> source)
        {
            return Process<Reward_consumed_during_epoch>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Ml> source)
        {
            return Process<Ml>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Ap> source)
        {
            return Process<Ap>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Dv> source)
        {
            return Process<Dv>(source);
        }

        public System.IObservable<string> Process(System.IObservable<X> source)
        {
            return Process<X>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Y> source)
        {
            return Process<Y>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Z> source)
        {
            return Process<Z>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Exposure_time> source)
        {
            return Process<Exposure_time>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Arc_angle> source)
        {
            return Process<Arc_angle>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Module_angle> source)
        {
            return Process<Module_angle>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rotation_angle> source)
        {
            return Process<Rotation_angle>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Arc_angle2> source)
        {
            return Process<Arc_angle2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Module_angle2> source)
        {
            return Process<Module_angle2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rotation_angle2> source)
        {
            return Process<Rotation_angle2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Patch_cord_output_power> source)
        {
            return Process<Patch_cord_output_power>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Arc_angle3> source)
        {
            return Process<Arc_angle3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Module_angle3> source)
        {
            return Process<Module_angle3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rotation_angle3> source)
        {
            return Process<Rotation_angle3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_coordinate_ml> source)
        {
            return Process<Fov_coordinate_ml>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_coordinate_ap> source)
        {
            return Process<Fov_coordinate_ap>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_scale_factor> source)
        {
            return Process<Fov_scale_factor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Frame_rate> source)
        {
            return Process<Frame_rate>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Excitation_power> source)
        {
            return Process<Excitation_power>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Excitation_power2> source)
        {
            return Process<Excitation_power2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Arc_angle4> source)
        {
            return Process<Arc_angle4>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Module_angle4> source)
        {
            return Process<Module_angle4>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rotation_angle4> source)
        {
            return Process<Rotation_angle4>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Odorant_dilution> source)
        {
            return Process<Odorant_dilution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Pulse_train_duration> source)
        {
            return Process<Pulse_train_duration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Pulse_train_interval> source)
        {
            return Process<Pulse_train_interval>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Baseline_duration> source)
        {
            return Process<Baseline_duration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Inter_trial_interval> source)
        {
            return Process<Inter_trial_interval>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stimulation_laser_power> source)
        {
            return Process<Stimulation_laser_power>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Spiral_duration> source)
        {
            return Process<Spiral_duration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Inter_spiral_interval> source)
        {
            return Process<Inter_spiral_interval>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Pitch> source)
        {
            return Process<Pitch>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Yaw> source)
        {
            return Process<Yaw>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Roll> source)
        {
            return Process<Roll>(source);
        }

        public System.IObservable<string> Process(System.IObservable<X2> source)
        {
            return Process<X2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Y2> source)
        {
            return Process<Y2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Z2> source)
        {
            return Process<Z2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Animal_weight_prior> source)
        {
            return Process<Animal_weight_prior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Animal_weight_post> source)
        {
            return Process<Animal_weight_post>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reward_consumed_total> source)
        {
            return Process<Reward_consumed_total>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_coordinate_ml2> source)
        {
            return Process<Fov_coordinate_ml2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_coordinate_ap2> source)
        {
            return Process<Fov_coordinate_ap2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fov_scale_factor2> source)
        {
            return Process<Fov_scale_factor2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Frame_rate2> source)
        {
            return Process<Frame_rate2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Frame_rate3> source)
        {
            return Process<Frame_rate3>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BehaviorStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BehaviorVideos>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Calibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CcfCoords>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Confocal>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Coordinates3d>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DetectorConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DomeModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Ecephys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Electromyography>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EphysModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EphysProbeConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fib>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FiberConnectionConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FiberModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FieldOfView>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fmost>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Icephys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Isi>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LaserConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LightEmittingDiodeConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Maintenance>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ManipulatorModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Merfish>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Mri>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannelConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactoryStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OptoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PIDName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<POphys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulationGroup>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reagent>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RelativePosition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardDeliveryConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSpoutConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Session>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Slap>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SlapFieldOfView>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Software>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Spim>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stack>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StackChannel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StimulusEpoch>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stream>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TrainedBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VisualStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reward_consumed_during_epoch>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Ml>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Ap>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Dv>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<X>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Y>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Z>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Exposure_time>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Arc_angle>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Module_angle>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rotation_angle>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Arc_angle2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Module_angle2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rotation_angle2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Patch_cord_output_power>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Arc_angle3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Module_angle3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rotation_angle3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_coordinate_ml>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_coordinate_ap>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_scale_factor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Frame_rate>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Excitation_power>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Excitation_power2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Arc_angle4>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Module_angle4>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rotation_angle4>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Odorant_dilution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Pulse_train_duration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Pulse_train_interval>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Baseline_duration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Inter_trial_interval>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stimulation_laser_power>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Spiral_duration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Inter_spiral_interval>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Pitch>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Yaw>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Roll>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<X2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Y2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Z2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Animal_weight_prior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Animal_weight_post>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reward_consumed_total>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_coordinate_ml2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_coordinate_ap2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fov_scale_factor2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Frame_rate2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Frame_rate3>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}