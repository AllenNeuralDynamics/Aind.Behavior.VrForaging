//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema.AindVrForagingSession
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Enumeration of Angle Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum AngleUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="radians")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="radians")]
        Radians = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="degrees")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="degrees")]
        Degrees = 1,
    }


    /// <summary>
    /// A simple model associating a name with an abbreviation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A simple model associating a name with an abbreviation")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BaseName
    {
    
        private string _name;
    
        private string _abbreviation;
    
        public BaseName()
        {
        }
    
        protected BaseName(BaseName other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<BaseName> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BaseName(this)));
        }
    
        public System.IObservable<BaseName> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BaseName(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of behavior parameters. Provides a high level description of stimulus.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of behavior parameters. Provides a high level description of stimulus" +
        ".")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BehaviorStimulation : Stimulus
    {
    
        private string _behaviorName;
    
        private int _sessionNumber;
    
        private System.Collections.Generic.List<Software> _behaviorSoftware = new System.Collections.Generic.List<Software>();
    
        private Software _behaviorScript = new Software();
    
        private object _outputParameters = new object();
    
        private string _rewardConsumedDuringEpoch;
    
        private VolumeUnit _rewardConsumedUnit = AindVrForagingDataSchema.AindVrForagingSession.VolumeUnit.Microliter;
    
        private int? _trialsTotal;
    
        private int? _trialsFinished;
    
        private int? _trialsRewarded;
    
        private string _notes;
    
        public BehaviorStimulation()
        {
        }
    
        protected BehaviorStimulation(BehaviorStimulation other) : 
                base(other)
        {
            _behaviorName = other._behaviorName;
            _sessionNumber = other._sessionNumber;
            _behaviorSoftware = other._behaviorSoftware;
            _behaviorScript = other._behaviorScript;
            _outputParameters = other._outputParameters;
            _rewardConsumedDuringEpoch = other._rewardConsumedDuringEpoch;
            _rewardConsumedUnit = other._rewardConsumedUnit;
            _trialsTotal = other._trialsTotal;
            _trialsFinished = other._trialsFinished;
            _trialsRewarded = other._trialsRewarded;
            _notes = other._notes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_name")]
        public string BehaviorName
        {
            get
            {
                return _behaviorName;
            }
            set
            {
                _behaviorName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("session_number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_number")]
        public int SessionNumber
        {
            get
            {
                return _sessionNumber;
            }
            set
            {
                _sessionNumber = value;
            }
        }
    
        /// <summary>
        /// The software used to control the behavior (e.g. Bonsai)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_software", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_software")]
        [System.ComponentModel.DescriptionAttribute("The software used to control the behavior (e.g. Bonsai)")]
        public System.Collections.Generic.List<Software> BehaviorSoftware
        {
            get
            {
                return _behaviorSoftware;
            }
            set
            {
                _behaviorSoftware = value;
            }
        }
    
        /// <summary>
        /// provide URL to the commit of the script and the parameters used
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_script", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_script")]
        [System.ComponentModel.DescriptionAttribute("provide URL to the commit of the script and the parameters used")]
        public Software BehaviorScript
        {
            get
            {
                return _behaviorScript;
            }
            set
            {
                _behaviorScript = value;
            }
        }
    
        /// <summary>
        /// Performance metrics from session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output_parameters", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output_parameters")]
        [System.ComponentModel.DescriptionAttribute("Performance metrics from session")]
        public object OutputParameters
        {
            get
            {
                return _outputParameters;
            }
            set
            {
                _outputParameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consumed_during_epoch", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_consumed_during_epoch")]
        public string RewardConsumedDuringEpoch
        {
            get
            {
                return _rewardConsumedDuringEpoch;
            }
            set
            {
                _rewardConsumedDuringEpoch = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consumed_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_consumed_unit")]
        public VolumeUnit RewardConsumedUnit
        {
            get
            {
                return _rewardConsumedUnit;
            }
            set
            {
                _rewardConsumedUnit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trials_total")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials_total")]
        public int? TrialsTotal
        {
            get
            {
                return _trialsTotal;
            }
            set
            {
                _trialsTotal = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trials_finished")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials_finished")]
        public int? TrialsFinished
        {
            get
            {
                return _trialsFinished;
            }
            set
            {
                _trialsFinished = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trials_rewarded")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials_rewarded")]
        public int? TrialsRewarded
        {
            get
            {
                return _trialsRewarded;
            }
            set
            {
                _trialsRewarded = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<BehaviorStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BehaviorStimulation(this)));
        }
    
        public System.IObservable<BehaviorStimulation> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BehaviorStimulation(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("behavior_name = " + _behaviorName + ", ");
            stringBuilder.Append("session_number = " + _sessionNumber + ", ");
            stringBuilder.Append("behavior_software = " + _behaviorSoftware + ", ");
            stringBuilder.Append("behavior_script = " + _behaviorScript + ", ");
            stringBuilder.Append("output_parameters = " + _outputParameters + ", ");
            stringBuilder.Append("reward_consumed_during_epoch = " + _rewardConsumedDuringEpoch + ", ");
            stringBuilder.Append("reward_consumed_unit = " + _rewardConsumedUnit + ", ");
            stringBuilder.Append("trials_total = " + _trialsTotal + ", ");
            stringBuilder.Append("trials_finished = " + _trialsFinished + ", ");
            stringBuilder.Append("trials_rewarded = " + _trialsRewarded + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    }


    /// <summary>
    /// BehaviorVideos
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("BehaviorVideos")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BehaviorVideos
    {
    
        private string _name = "Behavior videos";
    
        private string _abbreviation = "behavior-videos";
    
        public BehaviorVideos()
        {
        }
    
        protected BehaviorVideos(BehaviorVideos other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<BehaviorVideos> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BehaviorVideos(this)));
        }
    
        public System.IObservable<BehaviorVideos> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BehaviorVideos(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Generic calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Generic calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Calibration
    {
    
        private System.DateTimeOffset _calibrationDate;
    
        private string _deviceName;
    
        private string _description;
    
        private object _input;
    
        private object _output;
    
        private string _notes;
    
        public Calibration()
        {
        }
    
        protected Calibration(Calibration other)
        {
            _calibrationDate = other._calibrationDate;
            _deviceName = other._deviceName;
            _description = other._description;
            _input = other._input;
            _output = other._output;
            _notes = other._notes;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_date")]
        public System.DateTimeOffset CalibrationDate
        {
            get
            {
                return _calibrationDate;
            }
            set
            {
                _calibrationDate = value;
            }
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Brief description of what is being calibrated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="description")]
        [System.ComponentModel.DescriptionAttribute("Brief description of what is being calibrated")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        /// <summary>
        /// Calibration input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="input")]
        [System.ComponentModel.DescriptionAttribute("Calibration input")]
        public object Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        /// <summary>
        /// Calibration output
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output")]
        [System.ComponentModel.DescriptionAttribute("Calibration output")]
        public object Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<Calibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Calibration(this)));
        }
    
        public System.IObservable<Calibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Calibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("calibration_date = " + _calibrationDate + ", ");
            stringBuilder.Append("device_name = " + _deviceName + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("input = " + _input + ", ");
            stringBuilder.Append("output = " + _output + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Coordinates in CCF template space
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Coordinates in CCF template space")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CcfCoords
    {
    
        private string _ml;
    
        private string _ap;
    
        private string _dv;
    
        private SizeUnit _unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _ccfVersion;
    
        public CcfCoords()
        {
        }
    
        protected CcfCoords(CcfCoords other)
        {
            _ml = other._ml;
            _ap = other._ap;
            _dv = other._dv;
            _unit = other._unit;
            _ccfVersion = other._ccfVersion;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("ml", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ml")]
        public string Ml
        {
            get
            {
                return _ml;
            }
            set
            {
                _ml = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("ap", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ap")]
        public string Ap
        {
            get
            {
                return _ap;
            }
            set
            {
                _ap = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("dv", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dv")]
        public string Dv
        {
            get
            {
                return _dv;
            }
            set
            {
                _dv = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="unit")]
        public SizeUnit Unit
        {
            get
            {
                return _unit;
            }
            set
            {
                _unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("ccf_version")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ccf_version")]
        public string CcfVersion
        {
            get
            {
                return _ccfVersion;
            }
            set
            {
                _ccfVersion = value;
            }
        }
    
        public System.IObservable<CcfCoords> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CcfCoords(this)));
        }
    
        public System.IObservable<CcfCoords> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CcfCoords(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("ml = " + _ml + ", ");
            stringBuilder.Append("ap = " + _ap + ", ");
            stringBuilder.Append("dv = " + _dv + ", ");
            stringBuilder.Append("unit = " + _unit + ", ");
            stringBuilder.Append("ccf_version = " + _ccfVersion);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Concentraion units
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ConcentrationUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="molar")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="molar")]
        Molar = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="micromolar")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="micromolar")]
        Micromolar = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanomolar")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanomolar")]
        Nanomolar = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="% m/m")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="% m/m")]
        MM = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="% v/v")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="% v/v")]
        VV = 4,
    }


    /// <summary>
    /// Confocal
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Confocal")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Confocal
    {
    
        private string _name = "Confocal microscopy";
    
        private string _abbreviation = "confocal";
    
        public Confocal()
        {
        }
    
        protected Confocal(Confocal other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Confocal> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Confocal(this)));
        }
    
        public System.IObservable<Confocal> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Confocal(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Coordinates in a 3D grid
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Coordinates in a 3D grid")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Coordinates3d
    {
    
        private string _x;
    
        private string _y;
    
        private string _z;
    
        private SizeUnit _unit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        public Coordinates3d()
        {
        }
    
        protected Coordinates3d(Coordinates3d other)
        {
            _x = other._x;
            _y = other._y;
            _z = other._z;
            _unit = other._unit;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("x", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="x")]
        public string X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="y")]
        public string Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("z", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="z")]
        public string Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="unit")]
        public SizeUnit Unit
        {
            get
            {
                return _unit;
            }
            set
            {
                _unit = value;
            }
        }
    
        public System.IObservable<Coordinates3d> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Coordinates3d(this)));
        }
    
        public System.IObservable<Coordinates3d> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Coordinates3d(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y + ", ");
            stringBuilder.Append("z = " + _z + ", ");
            stringBuilder.Append("unit = " + _unit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of detector settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of detector settings")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DetectorConfig
    {
    
        private string _name;
    
        private string _exposureTime;
    
        private TimeUnit _exposureTimeUnit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Millisecond;
    
        private TriggerType _triggerType;
    
        public DetectorConfig()
        {
        }
    
        protected DetectorConfig(DetectorConfig other)
        {
            _name = other._name;
            _exposureTime = other._exposureTime;
            _exposureTimeUnit = other._exposureTimeUnit;
            _triggerType = other._triggerType;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("exposure_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposure_time")]
        public string ExposureTime
        {
            get
            {
                return _exposureTime;
            }
            set
            {
                _exposureTime = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exposure_time_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposure_time_unit")]
        public TimeUnit ExposureTimeUnit
        {
            get
            {
                return _exposureTimeUnit;
            }
            set
            {
                _exposureTimeUnit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trigger_type", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trigger_type")]
        public TriggerType TriggerType
        {
            get
            {
                return _triggerType;
            }
            set
            {
                _triggerType = value;
            }
        }
    
        public System.IObservable<DetectorConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DetectorConfig(this)));
        }
    
        public System.IObservable<DetectorConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DetectorConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("exposure_time = " + _exposureTime + ", ");
            stringBuilder.Append("exposure_time_unit = " + _exposureTimeUnit + ", ");
            stringBuilder.Append("trigger_type = " + _triggerType);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Movable module that is mounted on the ephys dome insertion system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Movable module that is mounted on the ephys dome insertion system")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DomeModule
    {
    
        private string _assemblyName;
    
        private string _arcAngle;
    
        private string _moduleAngle;
    
        private AngleUnit _angleUnit = AindVrForagingDataSchema.AindVrForagingSession.AngleUnit.Degrees;
    
        private string _rotationAngle;
    
        private string _coordinateTransform;
    
        private System.DateTimeOffset? _calibrationDate;
    
        private string _notes;
    
        public DomeModule()
        {
        }
    
        protected DomeModule(DomeModule other)
        {
            _assemblyName = other._assemblyName;
            _arcAngle = other._arcAngle;
            _moduleAngle = other._moduleAngle;
            _angleUnit = other._angleUnit;
            _rotationAngle = other._rotationAngle;
            _coordinateTransform = other._coordinateTransform;
            _calibrationDate = other._calibrationDate;
            _notes = other._notes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("assembly_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="assembly_name")]
        public string AssemblyName
        {
            get
            {
                return _assemblyName;
            }
            set
            {
                _assemblyName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("arc_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="arc_angle")]
        public string ArcAngle
        {
            get
            {
                return _arcAngle;
            }
            set
            {
                _arcAngle = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("module_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="module_angle")]
        public string ModuleAngle
        {
            get
            {
                return _moduleAngle;
            }
            set
            {
                _moduleAngle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("angle_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="angle_unit")]
        public AngleUnit AngleUnit
        {
            get
            {
                return _angleUnit;
            }
            set
            {
                _angleUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("rotation_angle")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rotation_angle")]
        public string RotationAngle
        {
            get
            {
                return _rotationAngle;
            }
            set
            {
                _rotationAngle = value;
            }
        }
    
        /// <summary>
        /// Path to coordinate transform
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("coordinate_transform")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coordinate_transform")]
        [System.ComponentModel.DescriptionAttribute("Path to coordinate transform")]
        public string CoordinateTransform
        {
            get
            {
                return _coordinateTransform;
            }
            set
            {
                _coordinateTransform = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_date")]
        public System.DateTimeOffset? CalibrationDate
        {
            get
            {
                return _calibrationDate;
            }
            set
            {
                _calibrationDate = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<DomeModule> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DomeModule(this)));
        }
    
        public System.IObservable<DomeModule> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DomeModule(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("assembly_name = " + _assemblyName + ", ");
            stringBuilder.Append("arc_angle = " + _arcAngle + ", ");
            stringBuilder.Append("module_angle = " + _moduleAngle + ", ");
            stringBuilder.Append("angle_unit = " + _angleUnit + ", ");
            stringBuilder.Append("rotation_angle = " + _rotationAngle + ", ");
            stringBuilder.Append("coordinate_transform = " + _coordinateTransform + ", ");
            stringBuilder.Append("calibration_date = " + _calibrationDate + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Ecephys
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Ecephys")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Ecephys
    {
    
        private string _name = "Extracellular electrophysiology";
    
        private string _abbreviation = "ecephys";
    
        public Ecephys()
        {
        }
    
        protected Ecephys(Ecephys other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Ecephys> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Ecephys(this)));
        }
    
        public System.IObservable<Ecephys> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Ecephys(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Electromyography
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Electromyography")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Electromyography
    {
    
        private string _name = "Electromyography";
    
        private string _abbreviation = "EMG";
    
        public Electromyography()
        {
        }
    
        protected Electromyography(Electromyography other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Electromyography> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Electromyography(this)));
        }
    
        public System.IObservable<Electromyography> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Electromyography(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Probe recorded in a Stream
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Probe recorded in a Stream")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class EphysModule
    {
    
        private string _assemblyName;
    
        private string _arcAngle;
    
        private string _moduleAngle;
    
        private AngleUnit _angleUnit = AindVrForagingDataSchema.AindVrForagingSession.AngleUnit.Degrees;
    
        private string _rotationAngle;
    
        private string _coordinateTransform;
    
        private System.DateTimeOffset? _calibrationDate;
    
        private string _notes;
    
        private string _primaryTargetedStructure;
    
        private System.Collections.Generic.List<CcfCoords> _targetedCcfCoordinates = new System.Collections.Generic.List<CcfCoords>();
    
        private Coordinates3d _manipulatorCoordinates = new Coordinates3d();
    
        private System.Collections.Generic.List<EphysProbeConfig> _ephysProbes = new System.Collections.Generic.List<EphysProbeConfig>();
    
        public EphysModule()
        {
        }
    
        protected EphysModule(EphysModule other)
        {
            _assemblyName = other._assemblyName;
            _arcAngle = other._arcAngle;
            _moduleAngle = other._moduleAngle;
            _angleUnit = other._angleUnit;
            _rotationAngle = other._rotationAngle;
            _coordinateTransform = other._coordinateTransform;
            _calibrationDate = other._calibrationDate;
            _notes = other._notes;
            _primaryTargetedStructure = other._primaryTargetedStructure;
            _targetedCcfCoordinates = other._targetedCcfCoordinates;
            _manipulatorCoordinates = other._manipulatorCoordinates;
            _ephysProbes = other._ephysProbes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("assembly_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="assembly_name")]
        public string AssemblyName
        {
            get
            {
                return _assemblyName;
            }
            set
            {
                _assemblyName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("arc_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="arc_angle")]
        public string ArcAngle
        {
            get
            {
                return _arcAngle;
            }
            set
            {
                _arcAngle = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("module_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="module_angle")]
        public string ModuleAngle
        {
            get
            {
                return _moduleAngle;
            }
            set
            {
                _moduleAngle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("angle_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="angle_unit")]
        public AngleUnit AngleUnit
        {
            get
            {
                return _angleUnit;
            }
            set
            {
                _angleUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("rotation_angle")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rotation_angle")]
        public string RotationAngle
        {
            get
            {
                return _rotationAngle;
            }
            set
            {
                _rotationAngle = value;
            }
        }
    
        /// <summary>
        /// Path to coordinate transform
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("coordinate_transform")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coordinate_transform")]
        [System.ComponentModel.DescriptionAttribute("Path to coordinate transform")]
        public string CoordinateTransform
        {
            get
            {
                return _coordinateTransform;
            }
            set
            {
                _coordinateTransform = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_date")]
        public System.DateTimeOffset? CalibrationDate
        {
            get
            {
                return _calibrationDate;
            }
            set
            {
                _calibrationDate = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("primary_targeted_structure", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="primary_targeted_structure")]
        public string PrimaryTargetedStructure
        {
            get
            {
                return _primaryTargetedStructure;
            }
            set
            {
                _primaryTargetedStructure = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_ccf_coordinates")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_ccf_coordinates")]
        public System.Collections.Generic.List<CcfCoords> TargetedCcfCoordinates
        {
            get
            {
                return _targetedCcfCoordinates;
            }
            set
            {
                _targetedCcfCoordinates = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator_coordinates", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="manipulator_coordinates")]
        public Coordinates3d ManipulatorCoordinates
        {
            get
            {
                return _manipulatorCoordinates;
            }
            set
            {
                _manipulatorCoordinates = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ephys_probes", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ephys_probes")]
        public System.Collections.Generic.List<EphysProbeConfig> EphysProbes
        {
            get
            {
                return _ephysProbes;
            }
            set
            {
                _ephysProbes = value;
            }
        }
    
        public System.IObservable<EphysModule> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new EphysModule(this)));
        }
    
        public System.IObservable<EphysModule> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new EphysModule(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("assembly_name = " + _assemblyName + ", ");
            stringBuilder.Append("arc_angle = " + _arcAngle + ", ");
            stringBuilder.Append("module_angle = " + _moduleAngle + ", ");
            stringBuilder.Append("angle_unit = " + _angleUnit + ", ");
            stringBuilder.Append("rotation_angle = " + _rotationAngle + ", ");
            stringBuilder.Append("coordinate_transform = " + _coordinateTransform + ", ");
            stringBuilder.Append("calibration_date = " + _calibrationDate + ", ");
            stringBuilder.Append("notes = " + _notes + ", ");
            stringBuilder.Append("primary_targeted_structure = " + _primaryTargetedStructure + ", ");
            stringBuilder.Append("targeted_ccf_coordinates = " + _targetedCcfCoordinates + ", ");
            stringBuilder.Append("manipulator_coordinates = " + _manipulatorCoordinates + ", ");
            stringBuilder.Append("ephys_probes = " + _ephysProbes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Probes in a EphysProbeModule
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Probes in a EphysProbeModule")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class EphysProbeConfig
    {
    
        private string _name;
    
        private System.Collections.Generic.List<string> _otherTargetedStructures = new System.Collections.Generic.List<string>();
    
        public EphysProbeConfig()
        {
        }
    
        protected EphysProbeConfig(EphysProbeConfig other)
        {
            _name = other._name;
            _otherTargetedStructures = other._otherTargetedStructures;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("other_targeted_structures")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="other_targeted_structures")]
        public System.Collections.Generic.List<string> OtherTargetedStructures
        {
            get
            {
                return _otherTargetedStructures;
            }
            set
            {
                _otherTargetedStructures = value;
            }
        }
    
        public System.IObservable<EphysProbeConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new EphysProbeConfig(this)));
        }
    
        public System.IObservable<EphysProbeConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new EphysProbeConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("other_targeted_structures = " + _otherTargetedStructures);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Fib
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Fib")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Fib
    {
    
        private string _name = "Fiber photometry";
    
        private string _abbreviation = "fib";
    
        public Fib()
        {
        }
    
        protected Fib(Fib other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Fib> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Fib(this)));
        }
    
        public System.IObservable<Fib> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Fib(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description for a fiber photometry configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description for a fiber photometry configuration")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FiberConnectionConfig
    {
    
        private string _patchCordName;
    
        private string _patchCordOutputPower;
    
        private PowerUnit _outputPowerUnit = AindVrForagingDataSchema.AindVrForagingSession.PowerUnit.Microwatt;
    
        private string _fiberName;
    
        public FiberConnectionConfig()
        {
        }
    
        protected FiberConnectionConfig(FiberConnectionConfig other)
        {
            _patchCordName = other._patchCordName;
            _patchCordOutputPower = other._patchCordOutputPower;
            _outputPowerUnit = other._outputPowerUnit;
            _fiberName = other._fiberName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("patch_cord_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="patch_cord_name")]
        public string PatchCordName
        {
            get
            {
                return _patchCordName;
            }
            set
            {
                _patchCordName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("patch_cord_output_power", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="patch_cord_output_power")]
        public string PatchCordOutputPower
        {
            get
            {
                return _patchCordOutputPower;
            }
            set
            {
                _patchCordOutputPower = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output_power_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output_power_unit")]
        public PowerUnit OutputPowerUnit
        {
            get
            {
                return _outputPowerUnit;
            }
            set
            {
                _outputPowerUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fiber_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fiber_name")]
        public string FiberName
        {
            get
            {
                return _fiberName;
            }
            set
            {
                _fiberName = value;
            }
        }
    
        public System.IObservable<FiberConnectionConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FiberConnectionConfig(this)));
        }
    
        public System.IObservable<FiberConnectionConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FiberConnectionConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("patch_cord_name = " + _patchCordName + ", ");
            stringBuilder.Append("patch_cord_output_power = " + _patchCordOutputPower + ", ");
            stringBuilder.Append("output_power_unit = " + _outputPowerUnit + ", ");
            stringBuilder.Append("fiber_name = " + _fiberName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Inserted fiber photometry probe recorded in a stream
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Inserted fiber photometry probe recorded in a stream")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FiberModule
    {
    
        private string _assemblyName;
    
        private string _arcAngle;
    
        private string _moduleAngle;
    
        private AngleUnit _angleUnit = AindVrForagingDataSchema.AindVrForagingSession.AngleUnit.Degrees;
    
        private string _rotationAngle;
    
        private string _coordinateTransform;
    
        private System.DateTimeOffset? _calibrationDate;
    
        private string _notes;
    
        private string _primaryTargetedStructure;
    
        private System.Collections.Generic.List<CcfCoords> _targetedCcfCoordinates = new System.Collections.Generic.List<CcfCoords>();
    
        private Coordinates3d _manipulatorCoordinates = new Coordinates3d();
    
        private System.Collections.Generic.List<FiberConnectionConfig> _fiberConnections = new System.Collections.Generic.List<FiberConnectionConfig>();
    
        public FiberModule()
        {
        }
    
        protected FiberModule(FiberModule other)
        {
            _assemblyName = other._assemblyName;
            _arcAngle = other._arcAngle;
            _moduleAngle = other._moduleAngle;
            _angleUnit = other._angleUnit;
            _rotationAngle = other._rotationAngle;
            _coordinateTransform = other._coordinateTransform;
            _calibrationDate = other._calibrationDate;
            _notes = other._notes;
            _primaryTargetedStructure = other._primaryTargetedStructure;
            _targetedCcfCoordinates = other._targetedCcfCoordinates;
            _manipulatorCoordinates = other._manipulatorCoordinates;
            _fiberConnections = other._fiberConnections;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("assembly_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="assembly_name")]
        public string AssemblyName
        {
            get
            {
                return _assemblyName;
            }
            set
            {
                _assemblyName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("arc_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="arc_angle")]
        public string ArcAngle
        {
            get
            {
                return _arcAngle;
            }
            set
            {
                _arcAngle = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("module_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="module_angle")]
        public string ModuleAngle
        {
            get
            {
                return _moduleAngle;
            }
            set
            {
                _moduleAngle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("angle_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="angle_unit")]
        public AngleUnit AngleUnit
        {
            get
            {
                return _angleUnit;
            }
            set
            {
                _angleUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("rotation_angle")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rotation_angle")]
        public string RotationAngle
        {
            get
            {
                return _rotationAngle;
            }
            set
            {
                _rotationAngle = value;
            }
        }
    
        /// <summary>
        /// Path to coordinate transform
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("coordinate_transform")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coordinate_transform")]
        [System.ComponentModel.DescriptionAttribute("Path to coordinate transform")]
        public string CoordinateTransform
        {
            get
            {
                return _coordinateTransform;
            }
            set
            {
                _coordinateTransform = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_date")]
        public System.DateTimeOffset? CalibrationDate
        {
            get
            {
                return _calibrationDate;
            }
            set
            {
                _calibrationDate = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("primary_targeted_structure", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="primary_targeted_structure")]
        public string PrimaryTargetedStructure
        {
            get
            {
                return _primaryTargetedStructure;
            }
            set
            {
                _primaryTargetedStructure = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_ccf_coordinates")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_ccf_coordinates")]
        public System.Collections.Generic.List<CcfCoords> TargetedCcfCoordinates
        {
            get
            {
                return _targetedCcfCoordinates;
            }
            set
            {
                _targetedCcfCoordinates = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator_coordinates", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="manipulator_coordinates")]
        public Coordinates3d ManipulatorCoordinates
        {
            get
            {
                return _manipulatorCoordinates;
            }
            set
            {
                _manipulatorCoordinates = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fiber_connections")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fiber_connections")]
        public System.Collections.Generic.List<FiberConnectionConfig> FiberConnections
        {
            get
            {
                return _fiberConnections;
            }
            set
            {
                _fiberConnections = value;
            }
        }
    
        public System.IObservable<FiberModule> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FiberModule(this)));
        }
    
        public System.IObservable<FiberModule> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FiberModule(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("assembly_name = " + _assemblyName + ", ");
            stringBuilder.Append("arc_angle = " + _arcAngle + ", ");
            stringBuilder.Append("module_angle = " + _moduleAngle + ", ");
            stringBuilder.Append("angle_unit = " + _angleUnit + ", ");
            stringBuilder.Append("rotation_angle = " + _rotationAngle + ", ");
            stringBuilder.Append("coordinate_transform = " + _coordinateTransform + ", ");
            stringBuilder.Append("calibration_date = " + _calibrationDate + ", ");
            stringBuilder.Append("notes = " + _notes + ", ");
            stringBuilder.Append("primary_targeted_structure = " + _primaryTargetedStructure + ", ");
            stringBuilder.Append("targeted_ccf_coordinates = " + _targetedCcfCoordinates + ", ");
            stringBuilder.Append("manipulator_coordinates = " + _manipulatorCoordinates + ", ");
            stringBuilder.Append("fiber_connections = " + _fiberConnections);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of an imaging field of view
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of an imaging field of view")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FieldOfView
    {
    
        private int _index;
    
        private int _imagingDepth;
    
        private SizeUnit _imagingDepthUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _targetedStructure;
    
        private string _fovCoordinateMl;
    
        private string _fovCoordinateAp;
    
        private SizeUnit _fovCoordinateUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _fovReference;
    
        private int _fovWidth;
    
        private int _fovHeight;
    
        private SizeUnit _fovSizeUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Pixel;
    
        private string _magnification;
    
        private string _fovScaleFactor;
    
        private string _fovScaleFactorUnit = "um/pixel";
    
        private string _frameRate;
    
        private FrequencyUnit _frameRateUnit = AindVrForagingDataSchema.AindVrForagingSession.FrequencyUnit.Hertz;
    
        private int? _coupledFovIndex;
    
        public FieldOfView()
        {
        }
    
        protected FieldOfView(FieldOfView other)
        {
            _index = other._index;
            _imagingDepth = other._imagingDepth;
            _imagingDepthUnit = other._imagingDepthUnit;
            _targetedStructure = other._targetedStructure;
            _fovCoordinateMl = other._fovCoordinateMl;
            _fovCoordinateAp = other._fovCoordinateAp;
            _fovCoordinateUnit = other._fovCoordinateUnit;
            _fovReference = other._fovReference;
            _fovWidth = other._fovWidth;
            _fovHeight = other._fovHeight;
            _fovSizeUnit = other._fovSizeUnit;
            _magnification = other._magnification;
            _fovScaleFactor = other._fovScaleFactor;
            _fovScaleFactorUnit = other._fovScaleFactorUnit;
            _frameRate = other._frameRate;
            _frameRateUnit = other._frameRateUnit;
            _coupledFovIndex = other._coupledFovIndex;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("imaging_depth", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="imaging_depth")]
        public int ImagingDepth
        {
            get
            {
                return _imagingDepth;
            }
            set
            {
                _imagingDepth = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("imaging_depth_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="imaging_depth_unit")]
        public SizeUnit ImagingDepthUnit
        {
            get
            {
                return _imagingDepthUnit;
            }
            set
            {
                _imagingDepthUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_structure", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_structure")]
        public string TargetedStructure
        {
            get
            {
                return _targetedStructure;
            }
            set
            {
                _targetedStructure = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ml", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ml")]
        public string FovCoordinateMl
        {
            get
            {
                return _fovCoordinateMl;
            }
            set
            {
                _fovCoordinateMl = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ap", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ap")]
        public string FovCoordinateAp
        {
            get
            {
                return _fovCoordinateAp;
            }
            set
            {
                _fovCoordinateAp = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_unit")]
        public SizeUnit FovCoordinateUnit
        {
            get
            {
                return _fovCoordinateUnit;
            }
            set
            {
                _fovCoordinateUnit = value;
            }
        }
    
        /// <summary>
        /// Reference for ML/AP coordinates
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fov_reference", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_reference")]
        [System.ComponentModel.DescriptionAttribute("Reference for ML/AP coordinates")]
        public string FovReference
        {
            get
            {
                return _fovReference;
            }
            set
            {
                _fovReference = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_width", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_width")]
        public int FovWidth
        {
            get
            {
                return _fovWidth;
            }
            set
            {
                _fovWidth = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_height", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_height")]
        public int FovHeight
        {
            get
            {
                return _fovHeight;
            }
            set
            {
                _fovHeight = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_size_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_size_unit")]
        public SizeUnit FovSizeUnit
        {
            get
            {
                return _fovSizeUnit;
            }
            set
            {
                _fovSizeUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("magnification", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="magnification")]
        public string Magnification
        {
            get
            {
                return _magnification;
            }
            set
            {
                _magnification = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor")]
        public string FovScaleFactor
        {
            get
            {
                return _fovScaleFactor;
            }
            set
            {
                _fovScaleFactor = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor_unit")]
        public string FovScaleFactorUnit
        {
            get
            {
                return _fovScaleFactorUnit;
            }
            set
            {
                _fovScaleFactorUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate")]
        public string FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate_unit")]
        public FrequencyUnit FrameRateUnit
        {
            get
            {
                return _frameRateUnit;
            }
            set
            {
                _frameRateUnit = value;
            }
        }
    
        /// <summary>
        /// Coupled planes for multiscope
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("coupled_fov_index")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coupled_fov_index")]
        [System.ComponentModel.DescriptionAttribute("Coupled planes for multiscope")]
        public int? CoupledFovIndex
        {
            get
            {
                return _coupledFovIndex;
            }
            set
            {
                _coupledFovIndex = value;
            }
        }
    
        public System.IObservable<FieldOfView> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FieldOfView(this)));
        }
    
        public System.IObservable<FieldOfView> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FieldOfView(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("index = " + _index + ", ");
            stringBuilder.Append("imaging_depth = " + _imagingDepth + ", ");
            stringBuilder.Append("imaging_depth_unit = " + _imagingDepthUnit + ", ");
            stringBuilder.Append("targeted_structure = " + _targetedStructure + ", ");
            stringBuilder.Append("fov_coordinate_ml = " + _fovCoordinateMl + ", ");
            stringBuilder.Append("fov_coordinate_ap = " + _fovCoordinateAp + ", ");
            stringBuilder.Append("fov_coordinate_unit = " + _fovCoordinateUnit + ", ");
            stringBuilder.Append("fov_reference = " + _fovReference + ", ");
            stringBuilder.Append("fov_width = " + _fovWidth + ", ");
            stringBuilder.Append("fov_height = " + _fovHeight + ", ");
            stringBuilder.Append("fov_size_unit = " + _fovSizeUnit + ", ");
            stringBuilder.Append("magnification = " + _magnification + ", ");
            stringBuilder.Append("fov_scale_factor = " + _fovScaleFactor + ", ");
            stringBuilder.Append("fov_scale_factor_unit = " + _fovScaleFactorUnit + ", ");
            stringBuilder.Append("frame_rate = " + _frameRate + ", ");
            stringBuilder.Append("frame_rate_unit = " + _frameRateUnit + ", ");
            stringBuilder.Append("coupled_fov_index = " + _coupledFovIndex);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Fmost
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Fmost")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Fmost
    {
    
        private string _name = "Fluorescence micro-optical sectioning tomography";
    
        private string _abbreviation = "fMOST";
    
        public Fmost()
        {
        }
    
        protected Fmost(Fmost other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Fmost> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Fmost(this)));
        }
    
        public System.IObservable<Fmost> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Fmost(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of Frequency Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FrequencyUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="kilohertz")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="kilohertz")]
        Kilohertz = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="hertz")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="hertz")]
        Hertz = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="millihertz")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="millihertz")]
        Millihertz = 2,
    }


    /// <summary>
    /// Icephys
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Icephys")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Icephys
    {
    
        private string _name = "Intracellular electrophysiology";
    
        private string _abbreviation = "icephys";
    
        public Icephys()
        {
        }
    
        protected Icephys(Icephys other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Icephys> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Icephys(this)));
        }
    
        public System.IObservable<Icephys> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Icephys(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Intrinsic signal imaging
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Intrinsic signal imaging")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Isi
    {
    
        private string _name = "Intrinsic signal imaging";
    
        private string _abbreviation = "ISI";
    
        public Isi()
        {
        }
    
        protected Isi(Isi other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Isi> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Isi(this)));
        }
    
        public System.IObservable<Isi> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Isi(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of laser settings in a session
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of laser settings in a session")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LaserConfig
    {
    
        private string _deviceType = "Laser";
    
        private string _name;
    
        private int _wavelength;
    
        private SizeUnit _wavelengthUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Nanometer;
    
        private string _excitationPower;
    
        private PowerUnit _excitationPowerUnit = AindVrForagingDataSchema.AindVrForagingSession.PowerUnit.Milliwatt;
    
        public LaserConfig()
        {
        }
    
        protected LaserConfig(LaserConfig other)
        {
            _deviceType = other._deviceType;
            _name = other._name;
            _wavelength = other._wavelength;
            _wavelengthUnit = other._wavelengthUnit;
            _excitationPower = other._excitationPower;
            _excitationPowerUnit = other._excitationPowerUnit;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Must match rig json
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("Must match rig json")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("wavelength", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="wavelength")]
        public int Wavelength
        {
            get
            {
                return _wavelength;
            }
            set
            {
                _wavelength = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("wavelength_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="wavelength_unit")]
        public SizeUnit WavelengthUnit
        {
            get
            {
                return _wavelengthUnit;
            }
            set
            {
                _wavelengthUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power")]
        public string ExcitationPower
        {
            get
            {
                return _excitationPower;
            }
            set
            {
                _excitationPower = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power_unit")]
        public PowerUnit ExcitationPowerUnit
        {
            get
            {
                return _excitationPowerUnit;
            }
            set
            {
                _excitationPowerUnit = value;
            }
        }
    
        public System.IObservable<LaserConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LaserConfig(this)));
        }
    
        public System.IObservable<LaserConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LaserConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("wavelength = " + _wavelength + ", ");
            stringBuilder.Append("wavelength_unit = " + _wavelengthUnit + ", ");
            stringBuilder.Append("excitation_power = " + _excitationPower + ", ");
            stringBuilder.Append("excitation_power_unit = " + _excitationPowerUnit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of LED settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of LED settings")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LightEmittingDiodeConfig
    {
    
        private string _deviceType = "LightEmittingDiode";
    
        private string _name;
    
        private string _excitationPower;
    
        private PowerUnit _excitationPowerUnit = AindVrForagingDataSchema.AindVrForagingSession.PowerUnit.Milliwatt;
    
        public LightEmittingDiodeConfig()
        {
        }
    
        protected LightEmittingDiodeConfig(LightEmittingDiodeConfig other)
        {
            _deviceType = other._deviceType;
            _name = other._name;
            _excitationPower = other._excitationPower;
            _excitationPowerUnit = other._excitationPowerUnit;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power")]
        public string ExcitationPower
        {
            get
            {
                return _excitationPower;
            }
            set
            {
                _excitationPower = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power_unit")]
        public PowerUnit ExcitationPowerUnit
        {
            get
            {
                return _excitationPowerUnit;
            }
            set
            {
                _excitationPowerUnit = value;
            }
        }
    
        public System.IObservable<LightEmittingDiodeConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LightEmittingDiodeConfig(this)));
        }
    
        public System.IObservable<LightEmittingDiodeConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LightEmittingDiodeConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("excitation_power = " + _excitationPower + ", ");
            stringBuilder.Append("excitation_power_unit = " + _excitationPowerUnit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Generic maintenance class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Generic maintenance class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Maintenance
    {
    
        private System.DateTimeOffset _maintenanceDate;
    
        private string _deviceName;
    
        private string _description;
    
        private string _protocolId;
    
        private System.Collections.Generic.List<Reagent> _reagents = new System.Collections.Generic.List<Reagent>();
    
        private string _notes;
    
        public Maintenance()
        {
        }
    
        protected Maintenance(Maintenance other)
        {
            _maintenanceDate = other._maintenanceDate;
            _deviceName = other._deviceName;
            _description = other._description;
            _protocolId = other._protocolId;
            _reagents = other._reagents;
            _notes = other._notes;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("maintenance_date", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maintenance_date")]
        public System.DateTimeOffset MaintenanceDate
        {
            get
            {
                return _maintenanceDate;
            }
            set
            {
                _maintenanceDate = value;
            }
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Description on maintenance procedure
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="description")]
        [System.ComponentModel.DescriptionAttribute("Description on maintenance procedure")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("protocol_id")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="protocol_id")]
        public string ProtocolId
        {
            get
            {
                return _protocolId;
            }
            set
            {
                _protocolId = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reagents")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reagents")]
        public System.Collections.Generic.List<Reagent> Reagents
        {
            get
            {
                return _reagents;
            }
            set
            {
                _reagents = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<Maintenance> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Maintenance(this)));
        }
    
        public System.IObservable<Maintenance> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Maintenance(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("maintenance_date = " + _maintenanceDate + ", ");
            stringBuilder.Append("device_name = " + _deviceName + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("protocol_id = " + _protocolId + ", ");
            stringBuilder.Append("reagents = " + _reagents + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A dome module connected to a 3-axis manipulator
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A dome module connected to a 3-axis manipulator")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ManipulatorModule
    {
    
        private string _assemblyName;
    
        private string _arcAngle;
    
        private string _moduleAngle;
    
        private AngleUnit _angleUnit = AindVrForagingDataSchema.AindVrForagingSession.AngleUnit.Degrees;
    
        private string _rotationAngle;
    
        private string _coordinateTransform;
    
        private System.DateTimeOffset? _calibrationDate;
    
        private string _notes;
    
        private string _primaryTargetedStructure;
    
        private System.Collections.Generic.List<CcfCoords> _targetedCcfCoordinates = new System.Collections.Generic.List<CcfCoords>();
    
        private Coordinates3d _manipulatorCoordinates = new Coordinates3d();
    
        public ManipulatorModule()
        {
        }
    
        protected ManipulatorModule(ManipulatorModule other)
        {
            _assemblyName = other._assemblyName;
            _arcAngle = other._arcAngle;
            _moduleAngle = other._moduleAngle;
            _angleUnit = other._angleUnit;
            _rotationAngle = other._rotationAngle;
            _coordinateTransform = other._coordinateTransform;
            _calibrationDate = other._calibrationDate;
            _notes = other._notes;
            _primaryTargetedStructure = other._primaryTargetedStructure;
            _targetedCcfCoordinates = other._targetedCcfCoordinates;
            _manipulatorCoordinates = other._manipulatorCoordinates;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("assembly_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="assembly_name")]
        public string AssemblyName
        {
            get
            {
                return _assemblyName;
            }
            set
            {
                _assemblyName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("arc_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="arc_angle")]
        public string ArcAngle
        {
            get
            {
                return _arcAngle;
            }
            set
            {
                _arcAngle = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("module_angle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="module_angle")]
        public string ModuleAngle
        {
            get
            {
                return _moduleAngle;
            }
            set
            {
                _moduleAngle = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("angle_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="angle_unit")]
        public AngleUnit AngleUnit
        {
            get
            {
                return _angleUnit;
            }
            set
            {
                _angleUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("rotation_angle")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rotation_angle")]
        public string RotationAngle
        {
            get
            {
                return _rotationAngle;
            }
            set
            {
                _rotationAngle = value;
            }
        }
    
        /// <summary>
        /// Path to coordinate transform
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("coordinate_transform")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coordinate_transform")]
        [System.ComponentModel.DescriptionAttribute("Path to coordinate transform")]
        public string CoordinateTransform
        {
            get
            {
                return _coordinateTransform;
            }
            set
            {
                _coordinateTransform = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_date")]
        public System.DateTimeOffset? CalibrationDate
        {
            get
            {
                return _calibrationDate;
            }
            set
            {
                _calibrationDate = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("primary_targeted_structure", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="primary_targeted_structure")]
        public string PrimaryTargetedStructure
        {
            get
            {
                return _primaryTargetedStructure;
            }
            set
            {
                _primaryTargetedStructure = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_ccf_coordinates")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_ccf_coordinates")]
        public System.Collections.Generic.List<CcfCoords> TargetedCcfCoordinates
        {
            get
            {
                return _targetedCcfCoordinates;
            }
            set
            {
                _targetedCcfCoordinates = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator_coordinates", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="manipulator_coordinates")]
        public Coordinates3d ManipulatorCoordinates
        {
            get
            {
                return _manipulatorCoordinates;
            }
            set
            {
                _manipulatorCoordinates = value;
            }
        }
    
        public System.IObservable<ManipulatorModule> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ManipulatorModule(this)));
        }
    
        public System.IObservable<ManipulatorModule> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ManipulatorModule(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("assembly_name = " + _assemblyName + ", ");
            stringBuilder.Append("arc_angle = " + _arcAngle + ", ");
            stringBuilder.Append("module_angle = " + _moduleAngle + ", ");
            stringBuilder.Append("angle_unit = " + _angleUnit + ", ");
            stringBuilder.Append("rotation_angle = " + _rotationAngle + ", ");
            stringBuilder.Append("coordinate_transform = " + _coordinateTransform + ", ");
            stringBuilder.Append("calibration_date = " + _calibrationDate + ", ");
            stringBuilder.Append("notes = " + _notes + ", ");
            stringBuilder.Append("primary_targeted_structure = " + _primaryTargetedStructure + ", ");
            stringBuilder.Append("targeted_ccf_coordinates = " + _targetedCcfCoordinates + ", ");
            stringBuilder.Append("manipulator_coordinates = " + _manipulatorCoordinates);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of Mass Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum MassUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="kilogram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="kilogram")]
        Kilogram = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="gram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gram")]
        Gram = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="milligram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="milligram")]
        Milligram = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microgram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microgram")]
        Microgram = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanogram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanogram")]
        Nanogram = 4,
    }


    /// <summary>
    /// Merfish
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Merfish")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Merfish
    {
    
        private string _name = "Multiplexed error-robust fluorescence in situ hybridization";
    
        private string _abbreviation = "merfish";
    
        public Merfish()
        {
        }
    
        protected Merfish(Merfish other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Merfish> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Merfish(this)));
        }
    
        public System.IObservable<Merfish> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Merfish(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _experiment;
    
        private string _rootPath;
    
        private string _remotePath;
    
        private string _subject;
    
        private string _version;
    
        private double? _rngSeed;
    
        private string _notes;
    
        private string _commitHash;
    
        private bool _allowDirtyRepo = false;
    
        private bool _skipHardwareValidation = false;
    
        public Metadata()
        {
        }
    
        protected Metadata(Metadata other)
        {
            _experiment = other._experiment;
            _rootPath = other._rootPath;
            _remotePath = other._remotePath;
            _subject = other._subject;
            _version = other._version;
            _rngSeed = other._rngSeed;
            _notes = other._notes;
            _commitHash = other._commitHash;
            _allowDirtyRepo = other._allowDirtyRepo;
            _skipHardwareValidation = other._skipHardwareValidation;
        }
    
        /// <summary>
        /// Name of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("experiment", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="experiment")]
        [System.ComponentModel.DescriptionAttribute("Name of the experiment")]
        public string Experiment
        {
            get
            {
                return _experiment;
            }
            set
            {
                _experiment = value;
            }
        }
    
        /// <summary>
        /// Root path where data will be logged
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("root_path", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="root_path")]
        [System.ComponentModel.DescriptionAttribute("Root path where data will be logged")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        /// <summary>
        /// Remote path where data will be attempted to be copied to after experiment is done
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("remote_path")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="remote_path")]
        [System.ComponentModel.DescriptionAttribute("Remote path where data will be attempted to be copied to after experiment is done" +
            "")]
        public string RemotePath
        {
            get
            {
                return _remotePath;
            }
            set
            {
                _remotePath = value;
            }
        }
    
        /// <summary>
        /// Name of the subject
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("subject", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="subject")]
        [System.ComponentModel.DescriptionAttribute("Name of the subject")]
        public string Subject
        {
            get
            {
                return _subject;
            }
            set
            {
                _subject = value;
            }
        }
    
        /// <summary>
        /// Version of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="version")]
        [System.ComponentModel.DescriptionAttribute("Version of the experiment")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Seed of the random number generator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rng_seed")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rng_seed")]
        [System.ComponentModel.DescriptionAttribute("Seed of the random number generator")]
        public double? RngSeed
        {
            get
            {
                return _rngSeed;
            }
            set
            {
                _rngSeed = value;
            }
        }
    
        /// <summary>
        /// Notes about the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        [System.ComponentModel.DescriptionAttribute("Notes about the experiment")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        /// <summary>
        /// Commit hash of the repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("commit_hash")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="commit_hash")]
        [System.ComponentModel.DescriptionAttribute("Commit hash of the repository")]
        public string CommitHash
        {
            get
            {
                return _commitHash;
            }
            set
            {
                _commitHash = value;
            }
        }
    
        /// <summary>
        /// Allow running from a dirty repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("allow_dirty_repo")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="allow_dirty_repo")]
        [System.ComponentModel.DescriptionAttribute("Allow running from a dirty repository")]
        public bool AllowDirtyRepo
        {
            get
            {
                return _allowDirtyRepo;
            }
            set
            {
                _allowDirtyRepo = value;
            }
        }
    
        /// <summary>
        /// Skip hardware validation
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("skip_hardware_validation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="skip_hardware_validation")]
        [System.ComponentModel.DescriptionAttribute("Skip hardware validation")]
        public bool SkipHardwareValidation
        {
            get
            {
                return _skipHardwareValidation;
            }
            set
            {
                _skipHardwareValidation = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Metadata(this)));
        }
    
        public System.IObservable<Metadata> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Metadata(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("experiment = " + _experiment + ", ");
            stringBuilder.Append("root_path = " + _rootPath + ", ");
            stringBuilder.Append("remote_path = " + _remotePath + ", ");
            stringBuilder.Append("subject = " + _subject + ", ");
            stringBuilder.Append("version = " + _version + ", ");
            stringBuilder.Append("rng_seed = " + _rngSeed + ", ");
            stringBuilder.Append("notes = " + _notes + ", ");
            stringBuilder.Append("commit_hash = " + _commitHash + ", ");
            stringBuilder.Append("allow_dirty_repo = " + _allowDirtyRepo + ", ");
            stringBuilder.Append("skip_hardware_validation = " + _skipHardwareValidation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Mri
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Mri")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Mri
    {
    
        private string _name = "Magnetic resonance imaging";
    
        private string _abbreviation = "MRI";
    
        public Mri()
        {
        }
    
        protected Mri(Mri other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Mri> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Mri(this)));
        }
    
        public System.IObservable<Mri> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Mri(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of olfactometer channel configurations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of olfactometer channel configurations")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerChannelConfig
    {
    
        private int _channelIndex;
    
        private string _odorant;
    
        private string _odorantDilution;
    
        private ConcentrationUnit _odorantDilutionUnit = AindVrForagingDataSchema.AindVrForagingSession.ConcentrationUnit.VV;
    
        public OlfactometerChannelConfig()
        {
        }
    
        protected OlfactometerChannelConfig(OlfactometerChannelConfig other)
        {
            _channelIndex = other._channelIndex;
            _odorant = other._odorant;
            _odorantDilution = other._odorantDilution;
            _odorantDilutionUnit = other._odorantDilutionUnit;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("channel_index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channel_index")]
        public int ChannelIndex
        {
            get
            {
                return _channelIndex;
            }
            set
            {
                _channelIndex = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("odorant", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorant")]
        public string Odorant
        {
            get
            {
                return _odorant;
            }
            set
            {
                _odorant = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("odorant_dilution", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorant_dilution")]
        public string OdorantDilution
        {
            get
            {
                return _odorantDilution;
            }
            set
            {
                _odorantDilution = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorant_dilution_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorant_dilution_unit")]
        public ConcentrationUnit OdorantDilutionUnit
        {
            get
            {
                return _odorantDilutionUnit;
            }
            set
            {
                _odorantDilutionUnit = value;
            }
        }
    
        public System.IObservable<OlfactometerChannelConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerChannelConfig(this)));
        }
    
        public System.IObservable<OlfactometerChannelConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerChannelConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channel_index = " + _channelIndex + ", ");
            stringBuilder.Append("odorant = " + _odorant + ", ");
            stringBuilder.Append("odorant_dilution = " + _odorantDilution + ", ");
            stringBuilder.Append("odorant_dilution_unit = " + _odorantDilutionUnit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of a olfactory stimulus
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a olfactory stimulus")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactoryStimulation : Stimulus
    {
    
        private System.Collections.Generic.List<OlfactometerChannelConfig> _channels = new System.Collections.Generic.List<OlfactometerChannelConfig>();
    
        public OlfactoryStimulation()
        {
        }
    
        protected OlfactoryStimulation(OlfactoryStimulation other) : 
                base(other)
        {
            _channels = other._channels;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channels", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channels")]
        public System.Collections.Generic.List<OlfactometerChannelConfig> Channels
        {
            get
            {
                return _channels;
            }
            set
            {
                _channels = value;
            }
        }
    
        public System.IObservable<OlfactoryStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactoryStimulation(this)));
        }
    
        public System.IObservable<OlfactoryStimulation> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactoryStimulation(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("channels = " + _channels);
            return true;
        }
    }


    /// <summary>
    /// Description of opto stimulation parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of opto stimulation parameters")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OptoStimulation : Stimulus
    {
    
        private string _stimulusName;
    
        private PulseShape _pulseShape;
    
        private int _pulseFrequency;
    
        private FrequencyUnit _pulseFrequencyUnit = AindVrForagingDataSchema.AindVrForagingSession.FrequencyUnit.Hertz;
    
        private int _numberPulseTrains;
    
        private int _pulseWidth;
    
        private TimeUnit _pulseWidthUnit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Millisecond;
    
        private string _pulseTrainDuration;
    
        private TimeUnit _pulseTrainDurationUnit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private bool _fixedPulseTrainInterval;
    
        private string _pulseTrainInterval;
    
        private TimeUnit _pulseTrainIntervalUnit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private string _baselineDuration;
    
        private TimeUnit _baselineDurationUnit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private object _otherParameters;
    
        private string _notes;
    
        public OptoStimulation()
        {
        }
    
        protected OptoStimulation(OptoStimulation other) : 
                base(other)
        {
            _stimulusName = other._stimulusName;
            _pulseShape = other._pulseShape;
            _pulseFrequency = other._pulseFrequency;
            _pulseFrequencyUnit = other._pulseFrequencyUnit;
            _numberPulseTrains = other._numberPulseTrains;
            _pulseWidth = other._pulseWidth;
            _pulseWidthUnit = other._pulseWidthUnit;
            _pulseTrainDuration = other._pulseTrainDuration;
            _pulseTrainDurationUnit = other._pulseTrainDurationUnit;
            _fixedPulseTrainInterval = other._fixedPulseTrainInterval;
            _pulseTrainInterval = other._pulseTrainInterval;
            _pulseTrainIntervalUnit = other._pulseTrainIntervalUnit;
            _baselineDuration = other._baselineDuration;
            _baselineDurationUnit = other._baselineDurationUnit;
            _otherParameters = other._otherParameters;
            _notes = other._notes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_name")]
        public string StimulusName
        {
            get
            {
                return _stimulusName;
            }
            set
            {
                _stimulusName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_shape", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_shape")]
        public PulseShape PulseShape
        {
            get
            {
                return _pulseShape;
            }
            set
            {
                _pulseShape = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_frequency", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_frequency")]
        public int PulseFrequency
        {
            get
            {
                return _pulseFrequency;
            }
            set
            {
                _pulseFrequency = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_frequency_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_frequency_unit")]
        public FrequencyUnit PulseFrequencyUnit
        {
            get
            {
                return _pulseFrequencyUnit;
            }
            set
            {
                _pulseFrequencyUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_pulse_trains", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_pulse_trains")]
        public int NumberPulseTrains
        {
            get
            {
                return _numberPulseTrains;
            }
            set
            {
                _numberPulseTrains = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_width", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_width")]
        public int PulseWidth
        {
            get
            {
                return _pulseWidth;
            }
            set
            {
                _pulseWidth = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_width_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_width_unit")]
        public TimeUnit PulseWidthUnit
        {
            get
            {
                return _pulseWidthUnit;
            }
            set
            {
                _pulseWidthUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_duration")]
        public string PulseTrainDuration
        {
            get
            {
                return _pulseTrainDuration;
            }
            set
            {
                _pulseTrainDuration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_duration_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_duration_unit")]
        public TimeUnit PulseTrainDurationUnit
        {
            get
            {
                return _pulseTrainDurationUnit;
            }
            set
            {
                _pulseTrainDurationUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fixed_pulse_train_interval", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fixed_pulse_train_interval")]
        public bool FixedPulseTrainInterval
        {
            get
            {
                return _fixedPulseTrainInterval;
            }
            set
            {
                _fixedPulseTrainInterval = value;
            }
        }
    
        /// <summary>
        /// Time between pulse trains
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_interval")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_interval")]
        [System.ComponentModel.DescriptionAttribute("Time between pulse trains")]
        public string PulseTrainInterval
        {
            get
            {
                return _pulseTrainInterval;
            }
            set
            {
                _pulseTrainInterval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_interval_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_interval_unit")]
        public TimeUnit PulseTrainIntervalUnit
        {
            get
            {
                return _pulseTrainIntervalUnit;
            }
            set
            {
                _pulseTrainIntervalUnit = value;
            }
        }
    
        /// <summary>
        /// Duration of baseline recording prior to first pulse train
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("baseline_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="baseline_duration")]
        [System.ComponentModel.DescriptionAttribute("Duration of baseline recording prior to first pulse train")]
        public string BaselineDuration
        {
            get
            {
                return _baselineDuration;
            }
            set
            {
                _baselineDuration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("baseline_duration_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="baseline_duration_unit")]
        public TimeUnit BaselineDurationUnit
        {
            get
            {
                return _baselineDurationUnit;
            }
            set
            {
                _baselineDurationUnit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("other_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="other_parameters")]
        public object OtherParameters
        {
            get
            {
                return _otherParameters;
            }
            set
            {
                _otherParameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<OptoStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OptoStimulation(this)));
        }
    
        public System.IObservable<OptoStimulation> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OptoStimulation(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("stimulus_name = " + _stimulusName + ", ");
            stringBuilder.Append("pulse_shape = " + _pulseShape + ", ");
            stringBuilder.Append("pulse_frequency = " + _pulseFrequency + ", ");
            stringBuilder.Append("pulse_frequency_unit = " + _pulseFrequencyUnit + ", ");
            stringBuilder.Append("number_pulse_trains = " + _numberPulseTrains + ", ");
            stringBuilder.Append("pulse_width = " + _pulseWidth + ", ");
            stringBuilder.Append("pulse_width_unit = " + _pulseWidthUnit + ", ");
            stringBuilder.Append("pulse_train_duration = " + _pulseTrainDuration + ", ");
            stringBuilder.Append("pulse_train_duration_unit = " + _pulseTrainDurationUnit + ", ");
            stringBuilder.Append("fixed_pulse_train_interval = " + _fixedPulseTrainInterval + ", ");
            stringBuilder.Append("pulse_train_interval = " + _pulseTrainInterval + ", ");
            stringBuilder.Append("pulse_train_interval_unit = " + _pulseTrainIntervalUnit + ", ");
            stringBuilder.Append("baseline_duration = " + _baselineDuration + ", ");
            stringBuilder.Append("baseline_duration_unit = " + _baselineDurationUnit + ", ");
            stringBuilder.Append("other_parameters = " + _otherParameters + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    }


    /// <summary>
    /// Model for associate a name with a persistent identifier (PID),
    ///the registry for that PID, and abbreviation for that registry
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Model for associate a name with a persistent identifier (PID),\nthe registry for t" +
        "hat PID, and abbreviation for that registry")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PIDName
    {
    
        private string _name;
    
        private string _abbreviation;
    
        private BaseName _registry;
    
        private string _registryIdentifier;
    
        public PIDName()
        {
        }
    
        protected PIDName(PIDName other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
            _registry = other._registry;
            _registryIdentifier = other._registryIdentifier;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("registry")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="registry")]
        public BaseName Registry
        {
            get
            {
                return _registry;
            }
            set
            {
                _registry = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("registry_identifier")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="registry_identifier")]
        public string RegistryIdentifier
        {
            get
            {
                return _registryIdentifier;
            }
            set
            {
                _registryIdentifier = value;
            }
        }
    
        public System.IObservable<PIDName> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PIDName(this)));
        }
    
        public System.IObservable<PIDName> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PIDName(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation + ", ");
            stringBuilder.Append("registry = " + _registry + ", ");
            stringBuilder.Append("registry_identifier = " + _registryIdentifier);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// POphys
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("POphys")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class POphys
    {
    
        private string _name = "Planar optical physiology";
    
        private string _abbreviation = "ophys";
    
        public POphys()
        {
        }
    
        protected POphys(POphys other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<POphys> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new POphys(this)));
        }
    
        public System.IObservable<POphys> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new POphys(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of a photostimulation session
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a photostimulation session")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PhotoStimulation : Stimulus
    {
    
        private string _stimulusName;
    
        private int _numberGroups;
    
        private System.Collections.Generic.List<PhotoStimulationGroup> _groups = new System.Collections.Generic.List<PhotoStimulationGroup>();
    
        private string _interTrialInterval;
    
        private TimeUnit _interTrialIntervalUnit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private object _otherParameters;
    
        private string _notes;
    
        public PhotoStimulation()
        {
        }
    
        protected PhotoStimulation(PhotoStimulation other) : 
                base(other)
        {
            _stimulusName = other._stimulusName;
            _numberGroups = other._numberGroups;
            _groups = other._groups;
            _interTrialInterval = other._interTrialInterval;
            _interTrialIntervalUnit = other._interTrialIntervalUnit;
            _otherParameters = other._otherParameters;
            _notes = other._notes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_name")]
        public string StimulusName
        {
            get
            {
                return _stimulusName;
            }
            set
            {
                _stimulusName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_groups", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_groups")]
        public int NumberGroups
        {
            get
            {
                return _numberGroups;
            }
            set
            {
                _numberGroups = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("groups", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="groups")]
        public System.Collections.Generic.List<PhotoStimulationGroup> Groups
        {
            get
            {
                return _groups;
            }
            set
            {
                _groups = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("inter_trial_interval", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_trial_interval")]
        public string InterTrialInterval
        {
            get
            {
                return _interTrialInterval;
            }
            set
            {
                _interTrialInterval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_trial_interval_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_trial_interval_unit")]
        public TimeUnit InterTrialIntervalUnit
        {
            get
            {
                return _interTrialIntervalUnit;
            }
            set
            {
                _interTrialIntervalUnit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("other_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="other_parameters")]
        public object OtherParameters
        {
            get
            {
                return _otherParameters;
            }
            set
            {
                _otherParameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<PhotoStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PhotoStimulation(this)));
        }
    
        public System.IObservable<PhotoStimulation> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PhotoStimulation(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("stimulus_name = " + _stimulusName + ", ");
            stringBuilder.Append("number_groups = " + _numberGroups + ", ");
            stringBuilder.Append("groups = " + _groups + ", ");
            stringBuilder.Append("inter_trial_interval = " + _interTrialInterval + ", ");
            stringBuilder.Append("inter_trial_interval_unit = " + _interTrialIntervalUnit + ", ");
            stringBuilder.Append("other_parameters = " + _otherParameters + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    }


    /// <summary>
    /// Description of a photostimulation group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a photostimulation group")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PhotoStimulationGroup
    {
    
        private int _groupIndex;
    
        private int _numberOfNeurons;
    
        private string _stimulationLaserPower;
    
        private PowerUnit _stimulationLaserPowerUnit = AindVrForagingDataSchema.AindVrForagingSession.PowerUnit.Milliwatt;
    
        private int _numberTrials;
    
        private int _numberSpirals;
    
        private string _spiralDuration;
    
        private TimeUnit _spiralDurationUnit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private string _interSpiralInterval;
    
        private TimeUnit _interSpiralIntervalUnit = AindVrForagingDataSchema.AindVrForagingSession.TimeUnit.Second;
    
        private object _otherParameters;
    
        private string _notes;
    
        public PhotoStimulationGroup()
        {
        }
    
        protected PhotoStimulationGroup(PhotoStimulationGroup other)
        {
            _groupIndex = other._groupIndex;
            _numberOfNeurons = other._numberOfNeurons;
            _stimulationLaserPower = other._stimulationLaserPower;
            _stimulationLaserPowerUnit = other._stimulationLaserPowerUnit;
            _numberTrials = other._numberTrials;
            _numberSpirals = other._numberSpirals;
            _spiralDuration = other._spiralDuration;
            _spiralDurationUnit = other._spiralDurationUnit;
            _interSpiralInterval = other._interSpiralInterval;
            _interSpiralIntervalUnit = other._interSpiralIntervalUnit;
            _otherParameters = other._otherParameters;
            _notes = other._notes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("group_index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="group_index")]
        public int GroupIndex
        {
            get
            {
                return _groupIndex;
            }
            set
            {
                _groupIndex = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_of_neurons", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_of_neurons")]
        public int NumberOfNeurons
        {
            get
            {
                return _numberOfNeurons;
            }
            set
            {
                _numberOfNeurons = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulation_laser_power", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulation_laser_power")]
        public string StimulationLaserPower
        {
            get
            {
                return _stimulationLaserPower;
            }
            set
            {
                _stimulationLaserPower = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulation_laser_power_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulation_laser_power_unit")]
        public PowerUnit StimulationLaserPowerUnit
        {
            get
            {
                return _stimulationLaserPowerUnit;
            }
            set
            {
                _stimulationLaserPowerUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_trials", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_trials")]
        public int NumberTrials
        {
            get
            {
                return _numberTrials;
            }
            set
            {
                _numberTrials = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_spirals", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_spirals")]
        public int NumberSpirals
        {
            get
            {
                return _numberSpirals;
            }
            set
            {
                _numberSpirals = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("spiral_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="spiral_duration")]
        public string SpiralDuration
        {
            get
            {
                return _spiralDuration;
            }
            set
            {
                _spiralDuration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("spiral_duration_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="spiral_duration_unit")]
        public TimeUnit SpiralDurationUnit
        {
            get
            {
                return _spiralDurationUnit;
            }
            set
            {
                _spiralDurationUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("inter_spiral_interval", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_spiral_interval")]
        public string InterSpiralInterval
        {
            get
            {
                return _interSpiralInterval;
            }
            set
            {
                _interSpiralInterval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_spiral_interval_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_spiral_interval_unit")]
        public TimeUnit InterSpiralIntervalUnit
        {
            get
            {
                return _interSpiralIntervalUnit;
            }
            set
            {
                _interSpiralIntervalUnit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("other_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="other_parameters")]
        public object OtherParameters
        {
            get
            {
                return _otherParameters;
            }
            set
            {
                _otherParameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<PhotoStimulationGroup> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PhotoStimulationGroup(this)));
        }
    
        public System.IObservable<PhotoStimulationGroup> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PhotoStimulationGroup(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("group_index = " + _groupIndex + ", ");
            stringBuilder.Append("number_of_neurons = " + _numberOfNeurons + ", ");
            stringBuilder.Append("stimulation_laser_power = " + _stimulationLaserPower + ", ");
            stringBuilder.Append("stimulation_laser_power_unit = " + _stimulationLaserPowerUnit + ", ");
            stringBuilder.Append("number_trials = " + _numberTrials + ", ");
            stringBuilder.Append("number_spirals = " + _numberSpirals + ", ");
            stringBuilder.Append("spiral_duration = " + _spiralDuration + ", ");
            stringBuilder.Append("spiral_duration_unit = " + _spiralDurationUnit + ", ");
            stringBuilder.Append("inter_spiral_interval = " + _interSpiralInterval + ", ");
            stringBuilder.Append("inter_spiral_interval_unit = " + _interSpiralIntervalUnit + ", ");
            stringBuilder.Append("other_parameters = " + _otherParameters + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Unit for power, set or measured
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum PowerUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microwatt")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microwatt")]
        Microwatt = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="milliwatt")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="milliwatt")]
        Milliwatt = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="percent")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="percent")]
        Percent = 2,
    }


    /// <summary>
    /// Types of Opto stim pulse shapes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum PulseShape
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Square")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Square")]
        Square = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Ramp")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Ramp")]
        Ramp = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Sinusoidal")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Sinusoidal")]
        Sinusoidal = 2,
    }


    /// <summary>
    /// Description of reagent used in procedure
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of reagent used in procedure")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Reagent
    {
    
        private string _name;
    
        private string _source;
    
        private PIDName _rrid;
    
        private string _lotNumber;
    
        private System.DateTimeOffset? _expirationDate;
    
        public Reagent()
        {
        }
    
        protected Reagent(Reagent other)
        {
            _name = other._name;
            _source = other._source;
            _rrid = other._rrid;
            _lotNumber = other._lotNumber;
            _expirationDate = other._expirationDate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("source", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="source")]
        public string Source
        {
            get
            {
                return _source;
            }
            set
            {
                _source = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rrid")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rrid")]
        public PIDName Rrid
        {
            get
            {
                return _rrid;
            }
            set
            {
                _rrid = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("lot_number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lot_number")]
        public string LotNumber
        {
            get
            {
                return _lotNumber;
            }
            set
            {
                _lotNumber = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("expiration_date")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="expiration_date")]
        public System.DateTimeOffset? ExpirationDate
        {
            get
            {
                return _expirationDate;
            }
            set
            {
                _expirationDate = value;
            }
        }
    
        public System.IObservable<Reagent> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Reagent(this)));
        }
    
        public System.IObservable<Reagent> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Reagent(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("source = " + _source + ", ");
            stringBuilder.Append("rrid = " + _rrid + ", ");
            stringBuilder.Append("lot_number = " + _lotNumber + ", ");
            stringBuilder.Append("expiration_date = " + _expirationDate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Set of 6 values describing relative position on a rig
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Set of 6 values describing relative position on a rig")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RelativePosition
    {
    
        private string _pitch;
    
        private string _yaw;
    
        private string _roll;
    
        private AngleUnit _angleUnit = AindVrForagingDataSchema.AindVrForagingSession.AngleUnit.Degrees;
    
        private string _x;
    
        private string _y;
    
        private string _z;
    
        private SizeUnit _positionUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Millimeter;
    
        private string _coordinateSystem;
    
        public RelativePosition()
        {
        }
    
        protected RelativePosition(RelativePosition other)
        {
            _pitch = other._pitch;
            _yaw = other._yaw;
            _roll = other._roll;
            _angleUnit = other._angleUnit;
            _x = other._x;
            _y = other._y;
            _z = other._z;
            _positionUnit = other._positionUnit;
            _coordinateSystem = other._coordinateSystem;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pitch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pitch")]
        public string Pitch
        {
            get
            {
                return _pitch;
            }
            set
            {
                _pitch = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("yaw")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="yaw")]
        public string Yaw
        {
            get
            {
                return _yaw;
            }
            set
            {
                _yaw = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("roll")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="roll")]
        public string Roll
        {
            get
            {
                return _roll;
            }
            set
            {
                _roll = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("angle_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="angle_unit")]
        public AngleUnit AngleUnit
        {
            get
            {
                return _angleUnit;
            }
            set
            {
                _angleUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="x")]
        public string X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="y")]
        public string Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("z")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="z")]
        public string Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("position_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="position_unit")]
        public SizeUnit PositionUnit
        {
            get
            {
                return _positionUnit;
            }
            set
            {
                _positionUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("coordinate_system")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coordinate_system")]
        public string CoordinateSystem
        {
            get
            {
                return _coordinateSystem;
            }
            set
            {
                _coordinateSystem = value;
            }
        }
    
        public System.IObservable<RelativePosition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RelativePosition(this)));
        }
    
        public System.IObservable<RelativePosition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RelativePosition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("pitch = " + _pitch + ", ");
            stringBuilder.Append("yaw = " + _yaw + ", ");
            stringBuilder.Append("roll = " + _roll + ", ");
            stringBuilder.Append("angle_unit = " + _angleUnit + ", ");
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y + ", ");
            stringBuilder.Append("z = " + _z + ", ");
            stringBuilder.Append("position_unit = " + _positionUnit + ", ");
            stringBuilder.Append("coordinate_system = " + _coordinateSystem);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of reward delivery configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of reward delivery configuration")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardDeliveryConfig
    {
    
        private RewardSolution _rewardSolution;
    
        private System.Collections.Generic.List<RewardSpoutConfig> _rewardSpouts = new System.Collections.Generic.List<RewardSpoutConfig>();
    
        private string _notes;
    
        public RewardDeliveryConfig()
        {
        }
    
        protected RewardDeliveryConfig(RewardDeliveryConfig other)
        {
            _rewardSolution = other._rewardSolution;
            _rewardSpouts = other._rewardSpouts;
            _notes = other._notes;
        }
    
        /// <summary>
        /// If Other use notes
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_solution", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_solution")]
        [System.ComponentModel.DescriptionAttribute("If Other use notes")]
        public RewardSolution RewardSolution
        {
            get
            {
                return _rewardSolution;
            }
            set
            {
                _rewardSolution = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_spouts", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_spouts")]
        public System.Collections.Generic.List<RewardSpoutConfig> RewardSpouts
        {
            get
            {
                return _rewardSpouts;
            }
            set
            {
                _rewardSpouts = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<RewardDeliveryConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardDeliveryConfig(this)));
        }
    
        public System.IObservable<RewardDeliveryConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardDeliveryConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("reward_solution = " + _rewardSolution + ", ");
            stringBuilder.Append("reward_spouts = " + _rewardSpouts + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Reward solution name
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum RewardSolution
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Water")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Water")]
        Water = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Other")]
        Other = 1,
    }


    /// <summary>
    /// Reward spout session information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Reward spout session information")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardSpoutConfig
    {
    
        private SpoutSide _side;
    
        private RelativePosition _startingPosition = new RelativePosition();
    
        private bool _variablePosition;
    
        public RewardSpoutConfig()
        {
        }
    
        protected RewardSpoutConfig(RewardSpoutConfig other)
        {
            _side = other._side;
            _startingPosition = other._startingPosition;
            _variablePosition = other._variablePosition;
        }
    
        /// <summary>
        /// Must match rig
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("side", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="side")]
        [System.ComponentModel.DescriptionAttribute("Must match rig")]
        public SpoutSide Side
        {
            get
            {
                return _side;
            }
            set
            {
                _side = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("starting_position", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="starting_position")]
        public RelativePosition StartingPosition
        {
            get
            {
                return _startingPosition;
            }
            set
            {
                _startingPosition = value;
            }
        }
    
        /// <summary>
        /// True if spout position changes during session as tracked in data
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("variable_position", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="variable_position")]
        [System.ComponentModel.DescriptionAttribute("True if spout position changes during session as tracked in data")]
        public bool VariablePosition
        {
            get
            {
                return _variablePosition;
            }
            set
            {
                _variablePosition = value;
            }
        }
    
        public System.IObservable<RewardSpoutConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardSpoutConfig(this)));
        }
    
        public System.IObservable<RewardSpoutConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardSpoutConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("side = " + _side + ", ");
            stringBuilder.Append("starting_position = " + _startingPosition + ", ");
            stringBuilder.Append("variable_position = " + _variablePosition);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of a physiology and/or behavior session
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a physiology and/or behavior session")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Session
    {
    
        private string _describedBy = "https://raw.githubusercontent.com/AllenNeuralDynamics/aind-data-schema/main/src/aind_data_schema/core/session.py";
    
        private string _schemaVersion = "0.1.2";
    
        private System.Collections.Generic.List<string> _experimenterFullName = new System.Collections.Generic.List<string>();
    
        private System.DateTimeOffset _sessionStartTime;
    
        private System.DateTimeOffset? _sessionEndTime;
    
        private string _sessionType;
    
        private string _iacucProtocol;
    
        private string _rigId;
    
        private System.Collections.Generic.List<Calibration> _calibrations = new System.Collections.Generic.List<Calibration>();
    
        private System.Collections.Generic.List<Maintenance> _maintenance = new System.Collections.Generic.List<Maintenance>();
    
        private string _subjectId;
    
        private string _animalWeightPrior;
    
        private string _animalWeightPost;
    
        private MassUnit _weightUnit = AindVrForagingDataSchema.AindVrForagingSession.MassUnit.Gram;
    
        private System.Collections.Generic.List<Stream> _dataStreams = new System.Collections.Generic.List<Stream>();
    
        private System.Collections.Generic.List<StimulusEpoch> _stimulusEpochs = new System.Collections.Generic.List<StimulusEpoch>();
    
        private RewardDeliveryConfig _rewardDelivery;
    
        private string _rewardConsumedTotal;
    
        private VolumeUnit _rewardConsumedUnit = AindVrForagingDataSchema.AindVrForagingSession.VolumeUnit.Microliter;
    
        private string _notes;
    
        public Session()
        {
        }
    
        protected Session(Session other)
        {
            _describedBy = other._describedBy;
            _schemaVersion = other._schemaVersion;
            _experimenterFullName = other._experimenterFullName;
            _sessionStartTime = other._sessionStartTime;
            _sessionEndTime = other._sessionEndTime;
            _sessionType = other._sessionType;
            _iacucProtocol = other._iacucProtocol;
            _rigId = other._rigId;
            _calibrations = other._calibrations;
            _maintenance = other._maintenance;
            _subjectId = other._subjectId;
            _animalWeightPrior = other._animalWeightPrior;
            _animalWeightPost = other._animalWeightPost;
            _weightUnit = other._weightUnit;
            _dataStreams = other._dataStreams;
            _stimulusEpochs = other._stimulusEpochs;
            _rewardDelivery = other._rewardDelivery;
            _rewardConsumedTotal = other._rewardConsumedTotal;
            _rewardConsumedUnit = other._rewardConsumedUnit;
            _notes = other._notes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="describedBy")]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="schema_version")]
        public string SchemaVersion
        {
            get
            {
                return _schemaVersion;
            }
            set
            {
                _schemaVersion = value;
            }
        }
    
        /// <summary>
        /// First and last name of the experimenter(s).
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("experimenter_full_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="experimenter_full_name")]
        [System.ComponentModel.DescriptionAttribute("First and last name of the experimenter(s).")]
        public System.Collections.Generic.List<string> ExperimenterFullName
        {
            get
            {
                return _experimenterFullName;
            }
            set
            {
                _experimenterFullName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session_start_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_start_time")]
        public System.DateTimeOffset SessionStartTime
        {
            get
            {
                return _sessionStartTime;
            }
            set
            {
                _sessionStartTime = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session_end_time")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_end_time")]
        public System.DateTimeOffset? SessionEndTime
        {
            get
            {
                return _sessionEndTime;
            }
            set
            {
                _sessionEndTime = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("session_type", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_type")]
        public string SessionType
        {
            get
            {
                return _sessionType;
            }
            set
            {
                _sessionType = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("iacuc_protocol")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="iacuc_protocol")]
        public string IacucProtocol
        {
            get
            {
                return _iacucProtocol;
            }
            set
            {
                _iacucProtocol = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("rig_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rig_id")]
        public string RigId
        {
            get
            {
                return _rigId;
            }
            set
            {
                _rigId = value;
            }
        }
    
        /// <summary>
        /// Calibrations of rig devices prior to session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibrations")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibrations")]
        [System.ComponentModel.DescriptionAttribute("Calibrations of rig devices prior to session")]
        public System.Collections.Generic.List<Calibration> Calibrations
        {
            get
            {
                return _calibrations;
            }
            set
            {
                _calibrations = value;
            }
        }
    
        /// <summary>
        /// Maintenance of rig devices prior to session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("maintenance")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maintenance")]
        [System.ComponentModel.DescriptionAttribute("Maintenance of rig devices prior to session")]
        public System.Collections.Generic.List<Maintenance> Maintenance
        {
            get
            {
                return _maintenance;
            }
            set
            {
                _maintenance = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("subject_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="subject_id")]
        public string SubjectId
        {
            get
            {
                return _subjectId;
            }
            set
            {
                _subjectId = value;
            }
        }
    
        /// <summary>
        /// Animal weight before procedure
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("animal_weight_prior")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animal_weight_prior")]
        [System.ComponentModel.DescriptionAttribute("Animal weight before procedure")]
        public string AnimalWeightPrior
        {
            get
            {
                return _animalWeightPrior;
            }
            set
            {
                _animalWeightPrior = value;
            }
        }
    
        /// <summary>
        /// Animal weight after procedure
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("animal_weight_post")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animal_weight_post")]
        [System.ComponentModel.DescriptionAttribute("Animal weight after procedure")]
        public string AnimalWeightPost
        {
            get
            {
                return _animalWeightPost;
            }
            set
            {
                _animalWeightPost = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("weight_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="weight_unit")]
        public MassUnit WeightUnit
        {
            get
            {
                return _weightUnit;
            }
            set
            {
                _weightUnit = value;
            }
        }
    
        /// <summary>
        /// A data stream is a collection of devices that are recorded simultaneously. Each session can include multiple streams (e.g., if the manipulators are moved to a new location)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("data_streams", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="data_streams")]
        [System.ComponentModel.DescriptionAttribute("A data stream is a collection of devices that are recorded simultaneously. Each s" +
            "ession can include multiple streams (e.g., if the manipulators are moved to a ne" +
            "w location)")]
        public System.Collections.Generic.List<Stream> DataStreams
        {
            get
            {
                return _dataStreams;
            }
            set
            {
                _dataStreams = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_epochs")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_epochs")]
        public System.Collections.Generic.List<StimulusEpoch> StimulusEpochs
        {
            get
            {
                return _stimulusEpochs;
            }
            set
            {
                _stimulusEpochs = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_delivery")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_delivery")]
        public RewardDeliveryConfig RewardDelivery
        {
            get
            {
                return _rewardDelivery;
            }
            set
            {
                _rewardDelivery = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consumed_total")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_consumed_total")]
        public string RewardConsumedTotal
        {
            get
            {
                return _rewardConsumedTotal;
            }
            set
            {
                _rewardConsumedTotal = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consumed_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_consumed_unit")]
        public VolumeUnit RewardConsumedUnit
        {
            get
            {
                return _rewardConsumedUnit;
            }
            set
            {
                _rewardConsumedUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<Session> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Session(this)));
        }
    
        public System.IObservable<Session> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Session(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("describedBy = " + _describedBy + ", ");
            stringBuilder.Append("schema_version = " + _schemaVersion + ", ");
            stringBuilder.Append("experimenter_full_name = " + _experimenterFullName + ", ");
            stringBuilder.Append("session_start_time = " + _sessionStartTime + ", ");
            stringBuilder.Append("session_end_time = " + _sessionEndTime + ", ");
            stringBuilder.Append("session_type = " + _sessionType + ", ");
            stringBuilder.Append("iacuc_protocol = " + _iacucProtocol + ", ");
            stringBuilder.Append("rig_id = " + _rigId + ", ");
            stringBuilder.Append("calibrations = " + _calibrations + ", ");
            stringBuilder.Append("maintenance = " + _maintenance + ", ");
            stringBuilder.Append("subject_id = " + _subjectId + ", ");
            stringBuilder.Append("animal_weight_prior = " + _animalWeightPrior + ", ");
            stringBuilder.Append("animal_weight_post = " + _animalWeightPost + ", ");
            stringBuilder.Append("weight_unit = " + _weightUnit + ", ");
            stringBuilder.Append("data_streams = " + _dataStreams + ", ");
            stringBuilder.Append("stimulus_epochs = " + _stimulusEpochs + ", ");
            stringBuilder.Append("reward_delivery = " + _rewardDelivery + ", ");
            stringBuilder.Append("reward_consumed_total = " + _rewardConsumedTotal + ", ");
            stringBuilder.Append("reward_consumed_unit = " + _rewardConsumedUnit + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of Length Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SizeUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="meter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="meter")]
        Meter = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="centimeter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="centimeter")]
        Centimeter = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="millimeter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="millimeter")]
        Millimeter = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="micrometer")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="micrometer")]
        Micrometer = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanometer")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanometer")]
        Nanometer = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="inch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inch")]
        Inch = 5,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="pixel")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pixel")]
        Pixel = 6,
    }


    /// <summary>
    /// Slap
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Slap")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Slap
    {
    
        private string _name = "Scanned line projection imaging";
    
        private string _abbreviation = "slap";
    
        public Slap()
        {
        }
    
        protected Slap(Slap other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Slap> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Slap(this)));
        }
    
        public System.IObservable<Slap> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Slap(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of a Slap2 scan
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a Slap2 scan")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SlapFieldOfView
    {
    
        private int _index;
    
        private int _imagingDepth;
    
        private SizeUnit _imagingDepthUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _targetedStructure;
    
        private string _fovCoordinateMl;
    
        private string _fovCoordinateAp;
    
        private SizeUnit _fovCoordinateUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _fovReference;
    
        private int _fovWidth;
    
        private int _fovHeight;
    
        private SizeUnit _fovSizeUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Pixel;
    
        private string _magnification;
    
        private string _fovScaleFactor;
    
        private string _fovScaleFactorUnit = "um/pixel";
    
        private string _frameRate;
    
        private FrequencyUnit _frameRateUnit = AindVrForagingDataSchema.AindVrForagingSession.FrequencyUnit.Hertz;
    
        private int? _coupledFovIndex;
    
        private SlapSessionType _sessionType;
    
        private int _dmdDilationX;
    
        private int _dmdDilationY;
    
        private SizeUnit _dilationUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Pixel;
    
        private string _targetNeuron;
    
        private string _targetBranch;
    
        private string _pathToArrayOfFrameRates;
    
        public SlapFieldOfView()
        {
        }
    
        protected SlapFieldOfView(SlapFieldOfView other)
        {
            _index = other._index;
            _imagingDepth = other._imagingDepth;
            _imagingDepthUnit = other._imagingDepthUnit;
            _targetedStructure = other._targetedStructure;
            _fovCoordinateMl = other._fovCoordinateMl;
            _fovCoordinateAp = other._fovCoordinateAp;
            _fovCoordinateUnit = other._fovCoordinateUnit;
            _fovReference = other._fovReference;
            _fovWidth = other._fovWidth;
            _fovHeight = other._fovHeight;
            _fovSizeUnit = other._fovSizeUnit;
            _magnification = other._magnification;
            _fovScaleFactor = other._fovScaleFactor;
            _fovScaleFactorUnit = other._fovScaleFactorUnit;
            _frameRate = other._frameRate;
            _frameRateUnit = other._frameRateUnit;
            _coupledFovIndex = other._coupledFovIndex;
            _sessionType = other._sessionType;
            _dmdDilationX = other._dmdDilationX;
            _dmdDilationY = other._dmdDilationY;
            _dilationUnit = other._dilationUnit;
            _targetNeuron = other._targetNeuron;
            _targetBranch = other._targetBranch;
            _pathToArrayOfFrameRates = other._pathToArrayOfFrameRates;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("imaging_depth", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="imaging_depth")]
        public int ImagingDepth
        {
            get
            {
                return _imagingDepth;
            }
            set
            {
                _imagingDepth = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("imaging_depth_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="imaging_depth_unit")]
        public SizeUnit ImagingDepthUnit
        {
            get
            {
                return _imagingDepthUnit;
            }
            set
            {
                _imagingDepthUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_structure", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_structure")]
        public string TargetedStructure
        {
            get
            {
                return _targetedStructure;
            }
            set
            {
                _targetedStructure = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ml", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ml")]
        public string FovCoordinateMl
        {
            get
            {
                return _fovCoordinateMl;
            }
            set
            {
                _fovCoordinateMl = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ap", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ap")]
        public string FovCoordinateAp
        {
            get
            {
                return _fovCoordinateAp;
            }
            set
            {
                _fovCoordinateAp = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_unit")]
        public SizeUnit FovCoordinateUnit
        {
            get
            {
                return _fovCoordinateUnit;
            }
            set
            {
                _fovCoordinateUnit = value;
            }
        }
    
        /// <summary>
        /// Reference for ML/AP coordinates
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fov_reference", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_reference")]
        [System.ComponentModel.DescriptionAttribute("Reference for ML/AP coordinates")]
        public string FovReference
        {
            get
            {
                return _fovReference;
            }
            set
            {
                _fovReference = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_width", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_width")]
        public int FovWidth
        {
            get
            {
                return _fovWidth;
            }
            set
            {
                _fovWidth = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_height", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_height")]
        public int FovHeight
        {
            get
            {
                return _fovHeight;
            }
            set
            {
                _fovHeight = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_size_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_size_unit")]
        public SizeUnit FovSizeUnit
        {
            get
            {
                return _fovSizeUnit;
            }
            set
            {
                _fovSizeUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("magnification", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="magnification")]
        public string Magnification
        {
            get
            {
                return _magnification;
            }
            set
            {
                _magnification = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor")]
        public string FovScaleFactor
        {
            get
            {
                return _fovScaleFactor;
            }
            set
            {
                _fovScaleFactor = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor_unit")]
        public string FovScaleFactorUnit
        {
            get
            {
                return _fovScaleFactorUnit;
            }
            set
            {
                _fovScaleFactorUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate")]
        public string FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate_unit")]
        public FrequencyUnit FrameRateUnit
        {
            get
            {
                return _frameRateUnit;
            }
            set
            {
                _frameRateUnit = value;
            }
        }
    
        /// <summary>
        /// Coupled planes for multiscope
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("coupled_fov_index")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="coupled_fov_index")]
        [System.ComponentModel.DescriptionAttribute("Coupled planes for multiscope")]
        public int? CoupledFovIndex
        {
            get
            {
                return _coupledFovIndex;
            }
            set
            {
                _coupledFovIndex = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session_type", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_type")]
        public SlapSessionType SessionType
        {
            get
            {
                return _sessionType;
            }
            set
            {
                _sessionType = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("dmd_dilation_x", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dmd_dilation_x")]
        public int DmdDilationX
        {
            get
            {
                return _dmdDilationX;
            }
            set
            {
                _dmdDilationX = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("dmd_dilation_y", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dmd_dilation_y")]
        public int DmdDilationY
        {
            get
            {
                return _dmdDilationY;
            }
            set
            {
                _dmdDilationY = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dilation_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dilation_unit")]
        public SizeUnit DilationUnit
        {
            get
            {
                return _dilationUnit;
            }
            set
            {
                _dilationUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("target_neuron")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="target_neuron")]
        public string TargetNeuron
        {
            get
            {
                return _targetNeuron;
            }
            set
            {
                _targetNeuron = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("target_branch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="target_branch")]
        public string TargetBranch
        {
            get
            {
                return _targetBranch;
            }
            set
            {
                _targetBranch = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("path_to_array_of_frame_rates", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="path_to_array_of_frame_rates")]
        public string PathToArrayOfFrameRates
        {
            get
            {
                return _pathToArrayOfFrameRates;
            }
            set
            {
                _pathToArrayOfFrameRates = value;
            }
        }
    
        public System.IObservable<SlapFieldOfView> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SlapFieldOfView(this)));
        }
    
        public System.IObservable<SlapFieldOfView> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SlapFieldOfView(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("index = " + _index + ", ");
            stringBuilder.Append("imaging_depth = " + _imagingDepth + ", ");
            stringBuilder.Append("imaging_depth_unit = " + _imagingDepthUnit + ", ");
            stringBuilder.Append("targeted_structure = " + _targetedStructure + ", ");
            stringBuilder.Append("fov_coordinate_ml = " + _fovCoordinateMl + ", ");
            stringBuilder.Append("fov_coordinate_ap = " + _fovCoordinateAp + ", ");
            stringBuilder.Append("fov_coordinate_unit = " + _fovCoordinateUnit + ", ");
            stringBuilder.Append("fov_reference = " + _fovReference + ", ");
            stringBuilder.Append("fov_width = " + _fovWidth + ", ");
            stringBuilder.Append("fov_height = " + _fovHeight + ", ");
            stringBuilder.Append("fov_size_unit = " + _fovSizeUnit + ", ");
            stringBuilder.Append("magnification = " + _magnification + ", ");
            stringBuilder.Append("fov_scale_factor = " + _fovScaleFactor + ", ");
            stringBuilder.Append("fov_scale_factor_unit = " + _fovScaleFactorUnit + ", ");
            stringBuilder.Append("frame_rate = " + _frameRate + ", ");
            stringBuilder.Append("frame_rate_unit = " + _frameRateUnit + ", ");
            stringBuilder.Append("coupled_fov_index = " + _coupledFovIndex + ", ");
            stringBuilder.Append("session_type = " + _sessionType + ", ");
            stringBuilder.Append("dmd_dilation_x = " + _dmdDilationX + ", ");
            stringBuilder.Append("dmd_dilation_y = " + _dmdDilationY + ", ");
            stringBuilder.Append("dilation_unit = " + _dilationUnit + ", ");
            stringBuilder.Append("target_neuron = " + _targetNeuron + ", ");
            stringBuilder.Append("target_branch = " + _targetBranch + ", ");
            stringBuilder.Append("path_to_array_of_frame_rates = " + _pathToArrayOfFrameRates);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Type of slap session
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SlapSessionType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Parent")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Parent")]
        Parent = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Branch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Branch")]
        Branch = 1,
    }


    /// <summary>
    /// Description of generic software
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of generic software")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Software
    {
    
        private string _name;
    
        private string _version;
    
        private string _url;
    
        private object _parameters;
    
        public Software()
        {
        }
    
        protected Software(Software other)
        {
            _name = other._name;
            _version = other._version;
            _url = other._url;
            _parameters = other._parameters;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="url")]
        public string Url
        {
            get
            {
                return _url;
            }
            set
            {
                _url = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="parameters")]
        public object Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value;
            }
        }
    
        public System.IObservable<Software> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Software(this)));
        }
    
        public System.IObservable<Software> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Software(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("version = " + _version + ", ");
            stringBuilder.Append("url = " + _url + ", ");
            stringBuilder.Append("parameters = " + _parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Spim
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Spim")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Spim
    {
    
        private string _name = "Selective plane illumination microscopy";
    
        private string _abbreviation = "SPIM";
    
        public Spim()
        {
        }
    
        protected Spim(Spim other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<Spim> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Spim(this)));
        }
    
        public System.IObservable<Spim> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Spim(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Spout sides
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SpoutSide
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Left")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Left")]
        Left = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Right")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Right")]
        Right = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Center")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Center")]
        Center = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Other")]
        Other = 3,
    }


    /// <summary>
    /// Description of a two photon stack
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a two photon stack")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Stack
    {
    
        private System.Collections.Generic.List<StackChannel> _channels = new System.Collections.Generic.List<StackChannel>();
    
        private int _numberOfPlanes;
    
        private double _stepSize;
    
        private SizeUnit _stepSizeUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private int _numberOfPlaneRepeatsPerVolume;
    
        private int _numberOfVolumeRepeats;
    
        private double _fovCoordinateMl;
    
        private double _fovCoordinateAp;
    
        private SizeUnit _fovCoordinateUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        private string _fovReference;
    
        private int _fovWidth;
    
        private int _fovHeight;
    
        private SizeUnit _fovSizeUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Pixel;
    
        private string _magnification;
    
        private double _fovScaleFactor;
    
        private string _fovScaleFactorUnit = "um/pixel";
    
        private string _frameRate;
    
        private FrequencyUnit _frameRateUnit = AindVrForagingDataSchema.AindVrForagingSession.FrequencyUnit.Hertz;
    
        private string _targetedStructure;
    
        public Stack()
        {
        }
    
        protected Stack(Stack other)
        {
            _channels = other._channels;
            _numberOfPlanes = other._numberOfPlanes;
            _stepSize = other._stepSize;
            _stepSizeUnit = other._stepSizeUnit;
            _numberOfPlaneRepeatsPerVolume = other._numberOfPlaneRepeatsPerVolume;
            _numberOfVolumeRepeats = other._numberOfVolumeRepeats;
            _fovCoordinateMl = other._fovCoordinateMl;
            _fovCoordinateAp = other._fovCoordinateAp;
            _fovCoordinateUnit = other._fovCoordinateUnit;
            _fovReference = other._fovReference;
            _fovWidth = other._fovWidth;
            _fovHeight = other._fovHeight;
            _fovSizeUnit = other._fovSizeUnit;
            _magnification = other._magnification;
            _fovScaleFactor = other._fovScaleFactor;
            _fovScaleFactorUnit = other._fovScaleFactorUnit;
            _frameRate = other._frameRate;
            _frameRateUnit = other._frameRateUnit;
            _targetedStructure = other._targetedStructure;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channels", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channels")]
        public System.Collections.Generic.List<StackChannel> Channels
        {
            get
            {
                return _channels;
            }
            set
            {
                _channels = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_of_planes", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_of_planes")]
        public int NumberOfPlanes
        {
            get
            {
                return _numberOfPlanes;
            }
            set
            {
                _numberOfPlanes = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("step_size", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="step_size")]
        public double StepSize
        {
            get
            {
                return _stepSize;
            }
            set
            {
                _stepSize = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("step_size_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="step_size_unit")]
        public SizeUnit StepSizeUnit
        {
            get
            {
                return _stepSizeUnit;
            }
            set
            {
                _stepSizeUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_of_plane_repeats_per_volume", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_of_plane_repeats_per_volume")]
        public int NumberOfPlaneRepeatsPerVolume
        {
            get
            {
                return _numberOfPlaneRepeatsPerVolume;
            }
            set
            {
                _numberOfPlaneRepeatsPerVolume = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_of_volume_repeats", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_of_volume_repeats")]
        public int NumberOfVolumeRepeats
        {
            get
            {
                return _numberOfVolumeRepeats;
            }
            set
            {
                _numberOfVolumeRepeats = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ml", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ml")]
        public double FovCoordinateMl
        {
            get
            {
                return _fovCoordinateMl;
            }
            set
            {
                _fovCoordinateMl = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_ap", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_ap")]
        public double FovCoordinateAp
        {
            get
            {
                return _fovCoordinateAp;
            }
            set
            {
                _fovCoordinateAp = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_coordinate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_coordinate_unit")]
        public SizeUnit FovCoordinateUnit
        {
            get
            {
                return _fovCoordinateUnit;
            }
            set
            {
                _fovCoordinateUnit = value;
            }
        }
    
        /// <summary>
        /// Reference for ML/AP coordinates
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fov_reference", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_reference")]
        [System.ComponentModel.DescriptionAttribute("Reference for ML/AP coordinates")]
        public string FovReference
        {
            get
            {
                return _fovReference;
            }
            set
            {
                _fovReference = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_width", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_width")]
        public int FovWidth
        {
            get
            {
                return _fovWidth;
            }
            set
            {
                _fovWidth = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_height", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_height")]
        public int FovHeight
        {
            get
            {
                return _fovHeight;
            }
            set
            {
                _fovHeight = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fov_size_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_size_unit")]
        public SizeUnit FovSizeUnit
        {
            get
            {
                return _fovSizeUnit;
            }
            set
            {
                _fovSizeUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("magnification")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="magnification")]
        public string Magnification
        {
            get
            {
                return _magnification;
            }
            set
            {
                _magnification = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor")]
        public double FovScaleFactor
        {
            get
            {
                return _fovScaleFactor;
            }
            set
            {
                _fovScaleFactor = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fov_scale_factor_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fov_scale_factor_unit")]
        public string FovScaleFactorUnit
        {
            get
            {
                return _fovScaleFactorUnit;
            }
            set
            {
                _fovScaleFactorUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate")]
        public string FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate_unit")]
        public FrequencyUnit FrameRateUnit
        {
            get
            {
                return _frameRateUnit;
            }
            set
            {
                _frameRateUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("targeted_structure")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targeted_structure")]
        public string TargetedStructure
        {
            get
            {
                return _targetedStructure;
            }
            set
            {
                _targetedStructure = value;
            }
        }
    
        public System.IObservable<Stack> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Stack(this)));
        }
    
        public System.IObservable<Stack> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Stack(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channels = " + _channels + ", ");
            stringBuilder.Append("number_of_planes = " + _numberOfPlanes + ", ");
            stringBuilder.Append("step_size = " + _stepSize + ", ");
            stringBuilder.Append("step_size_unit = " + _stepSizeUnit + ", ");
            stringBuilder.Append("number_of_plane_repeats_per_volume = " + _numberOfPlaneRepeatsPerVolume + ", ");
            stringBuilder.Append("number_of_volume_repeats = " + _numberOfVolumeRepeats + ", ");
            stringBuilder.Append("fov_coordinate_ml = " + _fovCoordinateMl + ", ");
            stringBuilder.Append("fov_coordinate_ap = " + _fovCoordinateAp + ", ");
            stringBuilder.Append("fov_coordinate_unit = " + _fovCoordinateUnit + ", ");
            stringBuilder.Append("fov_reference = " + _fovReference + ", ");
            stringBuilder.Append("fov_width = " + _fovWidth + ", ");
            stringBuilder.Append("fov_height = " + _fovHeight + ", ");
            stringBuilder.Append("fov_size_unit = " + _fovSizeUnit + ", ");
            stringBuilder.Append("magnification = " + _magnification + ", ");
            stringBuilder.Append("fov_scale_factor = " + _fovScaleFactor + ", ");
            stringBuilder.Append("fov_scale_factor_unit = " + _fovScaleFactorUnit + ", ");
            stringBuilder.Append("frame_rate = " + _frameRate + ", ");
            stringBuilder.Append("frame_rate_unit = " + _frameRateUnit + ", ");
            stringBuilder.Append("targeted_structure = " + _targetedStructure);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of a Channel used in a Stack
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of a Channel used in a Stack")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class StackChannel
    {
    
        private string _channelName;
    
        private string _lightSourceName;
    
        private System.Collections.Generic.List<string> _filterNames = new System.Collections.Generic.List<string>();
    
        private string _detectorName;
    
        private System.Collections.Generic.List<string> _additionalDeviceNames = new System.Collections.Generic.List<string>();
    
        private int _excitationWavelength;
    
        private SizeUnit _excitationWavelengthUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Nanometer;
    
        private double _excitationPower;
    
        private PowerUnit _excitationPowerUnit = AindVrForagingDataSchema.AindVrForagingSession.PowerUnit.Milliwatt;
    
        private int _filterWheelIndex;
    
        private int? _dilation;
    
        private SizeUnit _dilationUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Pixel;
    
        private string _description;
    
        private int _startDepth;
    
        private int _endDepth;
    
        private SizeUnit _depthUnit = AindVrForagingDataSchema.AindVrForagingSession.SizeUnit.Micrometer;
    
        public StackChannel()
        {
        }
    
        protected StackChannel(StackChannel other)
        {
            _channelName = other._channelName;
            _lightSourceName = other._lightSourceName;
            _filterNames = other._filterNames;
            _detectorName = other._detectorName;
            _additionalDeviceNames = other._additionalDeviceNames;
            _excitationWavelength = other._excitationWavelength;
            _excitationWavelengthUnit = other._excitationWavelengthUnit;
            _excitationPower = other._excitationPower;
            _excitationPowerUnit = other._excitationPowerUnit;
            _filterWheelIndex = other._filterWheelIndex;
            _dilation = other._dilation;
            _dilationUnit = other._dilationUnit;
            _description = other._description;
            _startDepth = other._startDepth;
            _endDepth = other._endDepth;
            _depthUnit = other._depthUnit;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("channel_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channel_name")]
        public string ChannelName
        {
            get
            {
                return _channelName;
            }
            set
            {
                _channelName = value;
            }
        }
    
        /// <summary>
        /// Must match device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("light_source_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="light_source_name")]
        [System.ComponentModel.DescriptionAttribute("Must match device name")]
        public string LightSourceName
        {
            get
            {
                return _lightSourceName;
            }
            set
            {
                _lightSourceName = value;
            }
        }
    
        /// <summary>
        /// Must match device names
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("filter_names", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="filter_names")]
        [System.ComponentModel.DescriptionAttribute("Must match device names")]
        public System.Collections.Generic.List<string> FilterNames
        {
            get
            {
                return _filterNames;
            }
            set
            {
                _filterNames = value;
            }
        }
    
        /// <summary>
        /// Must match device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("detector_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="detector_name")]
        [System.ComponentModel.DescriptionAttribute("Must match device name")]
        public string DetectorName
        {
            get
            {
                return _detectorName;
            }
            set
            {
                _detectorName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_device_names")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="additional_device_names")]
        public System.Collections.Generic.List<string> AdditionalDeviceNames
        {
            get
            {
                return _additionalDeviceNames;
            }
            set
            {
                _additionalDeviceNames = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_wavelength", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_wavelength")]
        public int ExcitationWavelength
        {
            get
            {
                return _excitationWavelength;
            }
            set
            {
                _excitationWavelength = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_wavelength_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_wavelength_unit")]
        public SizeUnit ExcitationWavelengthUnit
        {
            get
            {
                return _excitationWavelengthUnit;
            }
            set
            {
                _excitationWavelengthUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power")]
        public double ExcitationPower
        {
            get
            {
                return _excitationPower;
            }
            set
            {
                _excitationPower = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("excitation_power_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="excitation_power_unit")]
        public PowerUnit ExcitationPowerUnit
        {
            get
            {
                return _excitationPowerUnit;
            }
            set
            {
                _excitationPowerUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("filter_wheel_index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="filter_wheel_index")]
        public int FilterWheelIndex
        {
            get
            {
                return _filterWheelIndex;
            }
            set
            {
                _filterWheelIndex = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dilation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dilation")]
        public int? Dilation
        {
            get
            {
                return _dilation;
            }
            set
            {
                _dilation = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dilation_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dilation_unit")]
        public SizeUnit DilationUnit
        {
            get
            {
                return _dilationUnit;
            }
            set
            {
                _dilationUnit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("start_depth", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="start_depth")]
        public int StartDepth
        {
            get
            {
                return _startDepth;
            }
            set
            {
                _startDepth = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("end_depth", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="end_depth")]
        public int EndDepth
        {
            get
            {
                return _endDepth;
            }
            set
            {
                _endDepth = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("depth_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="depth_unit")]
        public SizeUnit DepthUnit
        {
            get
            {
                return _depthUnit;
            }
            set
            {
                _depthUnit = value;
            }
        }
    
        public System.IObservable<StackChannel> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new StackChannel(this)));
        }
    
        public System.IObservable<StackChannel> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new StackChannel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channel_name = " + _channelName + ", ");
            stringBuilder.Append("light_source_name = " + _lightSourceName + ", ");
            stringBuilder.Append("filter_names = " + _filterNames + ", ");
            stringBuilder.Append("detector_name = " + _detectorName + ", ");
            stringBuilder.Append("additional_device_names = " + _additionalDeviceNames + ", ");
            stringBuilder.Append("excitation_wavelength = " + _excitationWavelength + ", ");
            stringBuilder.Append("excitation_wavelength_unit = " + _excitationWavelengthUnit + ", ");
            stringBuilder.Append("excitation_power = " + _excitationPower + ", ");
            stringBuilder.Append("excitation_power_unit = " + _excitationPowerUnit + ", ");
            stringBuilder.Append("filter_wheel_index = " + _filterWheelIndex + ", ");
            stringBuilder.Append("dilation = " + _dilation + ", ");
            stringBuilder.Append("dilation_unit = " + _dilationUnit + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("start_depth = " + _startDepth + ", ");
            stringBuilder.Append("end_depth = " + _endDepth + ", ");
            stringBuilder.Append("depth_unit = " + _depthUnit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of stimulus used during session
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of stimulus used during session")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class StimulusEpoch
    {
    
        private Stimulus _stimulus;
    
        private System.DateTimeOffset _stimulusStartTime;
    
        private System.DateTimeOffset _stimulusEndTime;
    
        public StimulusEpoch()
        {
        }
    
        protected StimulusEpoch(StimulusEpoch other)
        {
            _stimulus = other._stimulus;
            _stimulusStartTime = other._stimulusStartTime;
            _stimulusEndTime = other._stimulusEndTime;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus")]
        public Stimulus Stimulus
        {
            get
            {
                return _stimulus;
            }
            set
            {
                _stimulus = value;
            }
        }
    
        /// <summary>
        /// When a specific stimulus begins. This might be the same as the session start time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_start_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_start_time")]
        [System.ComponentModel.DescriptionAttribute("When a specific stimulus begins. This might be the same as the session start time" +
            ".")]
        public System.DateTimeOffset StimulusStartTime
        {
            get
            {
                return _stimulusStartTime;
            }
            set
            {
                _stimulusStartTime = value;
            }
        }
    
        /// <summary>
        /// When a specific stimulus ends. This might be the same as the session end time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_end_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_end_time")]
        [System.ComponentModel.DescriptionAttribute("When a specific stimulus ends. This might be the same as the session end time.")]
        public System.DateTimeOffset StimulusEndTime
        {
            get
            {
                return _stimulusEndTime;
            }
            set
            {
                _stimulusEndTime = value;
            }
        }
    
        public System.IObservable<StimulusEpoch> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new StimulusEpoch(this)));
        }
    
        public System.IObservable<StimulusEpoch> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new StimulusEpoch(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("stimulus = " + _stimulus + ", ");
            stringBuilder.Append("stimulus_start_time = " + _stimulusStartTime + ", ");
            stringBuilder.Append("stimulus_end_time = " + _stimulusEndTime);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Data streams with a start and stop time
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Data streams with a start and stop time")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Stream
    {
    
        private System.DateTimeOffset _streamStartTime;
    
        private System.DateTimeOffset _streamEndTime;
    
        private System.Collections.Generic.List<string> _daqNames = new System.Collections.Generic.List<string>();
    
        private System.Collections.Generic.List<string> _cameraNames = new System.Collections.Generic.List<string>();
    
        private System.Collections.Generic.List<object> _lightSources = new System.Collections.Generic.List<object>();
    
        private System.Collections.Generic.List<EphysModule> _ephysModules = new System.Collections.Generic.List<EphysModule>();
    
        private System.Collections.Generic.List<DomeModule> _stickMicroscopes = new System.Collections.Generic.List<DomeModule>();
    
        private System.Collections.Generic.List<ManipulatorModule> _manipulatorModules = new System.Collections.Generic.List<ManipulatorModule>();
    
        private System.Collections.Generic.List<DetectorConfig> _detectors = new System.Collections.Generic.List<DetectorConfig>();
    
        private System.Collections.Generic.List<FiberConnectionConfig> _fiberConnections = new System.Collections.Generic.List<FiberConnectionConfig>();
    
        private System.Collections.Generic.List<FiberModule> _fiberModules = new System.Collections.Generic.List<FiberModule>();
    
        private System.Collections.Generic.List<FieldOfView> _ophysFovs = new System.Collections.Generic.List<FieldOfView>();
    
        private SlapFieldOfView _slapFovs;
    
        private Stack _stackParameters;
    
        private System.Collections.Generic.List<string> _stimulusDeviceNames = new System.Collections.Generic.List<string>();
    
        private string _mousePlatformName;
    
        private bool _activeMousePlatform;
    
        private System.Collections.Generic.List<object> _streamModalities = new System.Collections.Generic.List<object>();
    
        private string _notes;
    
        public Stream()
        {
        }
    
        protected Stream(Stream other)
        {
            _streamStartTime = other._streamStartTime;
            _streamEndTime = other._streamEndTime;
            _daqNames = other._daqNames;
            _cameraNames = other._cameraNames;
            _lightSources = other._lightSources;
            _ephysModules = other._ephysModules;
            _stickMicroscopes = other._stickMicroscopes;
            _manipulatorModules = other._manipulatorModules;
            _detectors = other._detectors;
            _fiberConnections = other._fiberConnections;
            _fiberModules = other._fiberModules;
            _ophysFovs = other._ophysFovs;
            _slapFovs = other._slapFovs;
            _stackParameters = other._stackParameters;
            _stimulusDeviceNames = other._stimulusDeviceNames;
            _mousePlatformName = other._mousePlatformName;
            _activeMousePlatform = other._activeMousePlatform;
            _streamModalities = other._streamModalities;
            _notes = other._notes;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stream_start_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stream_start_time")]
        public System.DateTimeOffset StreamStartTime
        {
            get
            {
                return _streamStartTime;
            }
            set
            {
                _streamStartTime = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stream_end_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stream_end_time")]
        public System.DateTimeOffset StreamEndTime
        {
            get
            {
                return _streamEndTime;
            }
            set
            {
                _streamEndTime = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("daq_names")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="daq_names")]
        public System.Collections.Generic.List<string> DaqNames
        {
            get
            {
                return _daqNames;
            }
            set
            {
                _daqNames = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_names")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="camera_names")]
        public System.Collections.Generic.List<string> CameraNames
        {
            get
            {
                return _cameraNames;
            }
            set
            {
                _cameraNames = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("light_sources")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="light_sources")]
        public System.Collections.Generic.List<object> LightSources
        {
            get
            {
                return _lightSources;
            }
            set
            {
                _lightSources = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ephys_modules")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ephys_modules")]
        public System.Collections.Generic.List<EphysModule> EphysModules
        {
            get
            {
                return _ephysModules;
            }
            set
            {
                _ephysModules = value;
            }
        }
    
        /// <summary>
        /// Must match stick microscope assemblies in rig file
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stick_microscopes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stick_microscopes")]
        [System.ComponentModel.DescriptionAttribute("Must match stick microscope assemblies in rig file")]
        public System.Collections.Generic.List<DomeModule> StickMicroscopes
        {
            get
            {
                return _stickMicroscopes;
            }
            set
            {
                _stickMicroscopes = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator_modules")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="manipulator_modules")]
        public System.Collections.Generic.List<ManipulatorModule> ManipulatorModules
        {
            get
            {
                return _manipulatorModules;
            }
            set
            {
                _manipulatorModules = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("detectors")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="detectors")]
        public System.Collections.Generic.List<DetectorConfig> Detectors
        {
            get
            {
                return _detectors;
            }
            set
            {
                _detectors = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fiber_connections")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fiber_connections")]
        public System.Collections.Generic.List<FiberConnectionConfig> FiberConnections
        {
            get
            {
                return _fiberConnections;
            }
            set
            {
                _fiberConnections = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fiber_modules")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fiber_modules")]
        public System.Collections.Generic.List<FiberModule> FiberModules
        {
            get
            {
                return _fiberModules;
            }
            set
            {
                _fiberModules = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ophys_fovs")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ophys_fovs")]
        public System.Collections.Generic.List<FieldOfView> OphysFovs
        {
            get
            {
                return _ophysFovs;
            }
            set
            {
                _ophysFovs = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("slap_fovs")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="slap_fovs")]
        public SlapFieldOfView SlapFovs
        {
            get
            {
                return _slapFovs;
            }
            set
            {
                _slapFovs = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stack_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stack_parameters")]
        public Stack StackParameters
        {
            get
            {
                return _stackParameters;
            }
            set
            {
                _stackParameters = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_device_names")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_device_names")]
        public System.Collections.Generic.List<string> StimulusDeviceNames
        {
            get
            {
                return _stimulusDeviceNames;
            }
            set
            {
                _stimulusDeviceNames = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("mouse_platform_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="mouse_platform_name")]
        public string MousePlatformName
        {
            get
            {
                return _mousePlatformName;
            }
            set
            {
                _mousePlatformName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("active_mouse_platform", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="active_mouse_platform")]
        public bool ActiveMousePlatform
        {
            get
            {
                return _activeMousePlatform;
            }
            set
            {
                _activeMousePlatform = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stream_modalities", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stream_modalities")]
        public System.Collections.Generic.List<object> StreamModalities
        {
            get
            {
                return _streamModalities;
            }
            set
            {
                _streamModalities = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<Stream> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Stream(this)));
        }
    
        public System.IObservable<Stream> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Stream(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("stream_start_time = " + _streamStartTime + ", ");
            stringBuilder.Append("stream_end_time = " + _streamEndTime + ", ");
            stringBuilder.Append("daq_names = " + _daqNames + ", ");
            stringBuilder.Append("camera_names = " + _cameraNames + ", ");
            stringBuilder.Append("light_sources = " + _lightSources + ", ");
            stringBuilder.Append("ephys_modules = " + _ephysModules + ", ");
            stringBuilder.Append("stick_microscopes = " + _stickMicroscopes + ", ");
            stringBuilder.Append("manipulator_modules = " + _manipulatorModules + ", ");
            stringBuilder.Append("detectors = " + _detectors + ", ");
            stringBuilder.Append("fiber_connections = " + _fiberConnections + ", ");
            stringBuilder.Append("fiber_modules = " + _fiberModules + ", ");
            stringBuilder.Append("ophys_fovs = " + _ophysFovs + ", ");
            stringBuilder.Append("slap_fovs = " + _slapFovs + ", ");
            stringBuilder.Append("stack_parameters = " + _stackParameters + ", ");
            stringBuilder.Append("stimulus_device_names = " + _stimulusDeviceNames + ", ");
            stringBuilder.Append("mouse_platform_name = " + _mousePlatformName + ", ");
            stringBuilder.Append("active_mouse_platform = " + _activeMousePlatform + ", ");
            stringBuilder.Append("stream_modalities = " + _streamModalities + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of Time Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TimeUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="hour")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="hour")]
        Hour = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="minute")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minute")]
        Minute = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="second")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="second")]
        Second = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="millisecond")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="millisecond")]
        Millisecond = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microsecond")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microsecond")]
        Microsecond = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanosecond")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanosecond")]
        Nanosecond = 5,
    }


    /// <summary>
    /// TrainedBehavior
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("TrainedBehavior")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TrainedBehavior
    {
    
        private string _name = "Trained behavior";
    
        private string _abbreviation = "trained-behavior";
    
        public TrainedBehavior()
        {
        }
    
        protected TrainedBehavior(TrainedBehavior other)
        {
            _name = other._name;
            _abbreviation = other._abbreviation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<TrainedBehavior> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TrainedBehavior(this)));
        }
    
        public System.IObservable<TrainedBehavior> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TrainedBehavior(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("abbreviation = " + _abbreviation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Types of detector triggers
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TriggerType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Internal")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Internal")]
        Internal = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="External")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="External")]
        External = 1,
    }


    /// <summary>
    /// Description of visual stimulus parameters. Provides a high level description of stimulus.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of visual stimulus parameters. Provides a high level description of s" +
        "timulus.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VisualStimulation : Stimulus
    {
    
        private string _stimulusName;
    
        private object _stimulusParameters;
    
        private System.Collections.Generic.List<string> _stimulusTemplateName = new System.Collections.Generic.List<string>();
    
        private string _stimulusSoftware;
    
        private string _stimulusSoftwareVersion;
    
        private string _stimulusScript;
    
        private string _stimulusScriptVersion;
    
        private string _notes;
    
        public VisualStimulation()
        {
        }
    
        protected VisualStimulation(VisualStimulation other) : 
                base(other)
        {
            _stimulusName = other._stimulusName;
            _stimulusParameters = other._stimulusParameters;
            _stimulusTemplateName = other._stimulusTemplateName;
            _stimulusSoftware = other._stimulusSoftware;
            _stimulusSoftwareVersion = other._stimulusSoftwareVersion;
            _stimulusScript = other._stimulusScript;
            _stimulusScriptVersion = other._stimulusScriptVersion;
            _notes = other._notes;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_name")]
        public string StimulusName
        {
            get
            {
                return _stimulusName;
            }
            set
            {
                _stimulusName = value;
            }
        }
    
        /// <summary>
        /// Define and list the parameter values used (e.g. all TF or orientation values)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_parameters")]
        [System.ComponentModel.DescriptionAttribute("Define and list the parameter values used (e.g. all TF or orientation values)")]
        public object StimulusParameters
        {
            get
            {
                return _stimulusParameters;
            }
            set
            {
                _stimulusParameters = value;
            }
        }
    
        /// <summary>
        /// Name of image set or movie displayed
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_template_name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_template_name")]
        [System.ComponentModel.DescriptionAttribute("Name of image set or movie displayed")]
        public System.Collections.Generic.List<string> StimulusTemplateName
        {
            get
            {
                return _stimulusTemplateName;
            }
            set
            {
                _stimulusTemplateName = value;
            }
        }
    
        /// <summary>
        /// The software used to control the stimulus (e.g. Bonsai)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_software", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_software")]
        [System.ComponentModel.DescriptionAttribute("The software used to control the stimulus (e.g. Bonsai)")]
        public string StimulusSoftware
        {
            get
            {
                return _stimulusSoftware;
            }
            set
            {
                _stimulusSoftware = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_software_version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_software_version")]
        public string StimulusSoftwareVersion
        {
            get
            {
                return _stimulusSoftwareVersion;
            }
            set
            {
                _stimulusSoftwareVersion = value;
            }
        }
    
        /// <summary>
        /// The specific code for this stimulus instance
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_script", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_script")]
        [System.ComponentModel.DescriptionAttribute("The specific code for this stimulus instance")]
        public string StimulusScript
        {
            get
            {
                return _stimulusScript;
            }
            set
            {
                _stimulusScript = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_script_version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_script_version")]
        public string StimulusScriptVersion
        {
            get
            {
                return _stimulusScriptVersion;
            }
            set
            {
                _stimulusScriptVersion = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<VisualStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VisualStimulation(this)));
        }
    
        public System.IObservable<VisualStimulation> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VisualStimulation(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("stimulus_name = " + _stimulusName + ", ");
            stringBuilder.Append("stimulus_parameters = " + _stimulusParameters + ", ");
            stringBuilder.Append("stimulus_template_name = " + _stimulusTemplateName + ", ");
            stringBuilder.Append("stimulus_software = " + _stimulusSoftware + ", ");
            stringBuilder.Append("stimulus_software_version = " + _stimulusSoftwareVersion + ", ");
            stringBuilder.Append("stimulus_script = " + _stimulusScript + ", ");
            stringBuilder.Append("stimulus_script_version = " + _stimulusScriptVersion + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    }


    /// <summary>
    /// Enumeration of Volume Measurements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum VolumeUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="liter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="liter")]
        Liter = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="milliliter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="milliliter")]
        Milliliter = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microliter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microliter")]
        Microliter = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanoliter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanoliter")]
        Nanoliter = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "stimulus_type")]
    [YamlDiscriminator("stimulus_type")]
    [JsonInheritanceAttribute("Olfactory", typeof(OlfactoryStimulation))]
    [JsonInheritanceAttribute("Behavior", typeof(BehaviorStimulation))]
    [JsonInheritanceAttribute("Opto Stimulation", typeof(OptoStimulation))]
    [JsonInheritanceAttribute("Photo Stimulation", typeof(PhotoStimulation))]
    [JsonInheritanceAttribute("Visual", typeof(VisualStimulation))]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Stimulus
    {
    
        public Stimulus()
        {
        }
    
        protected Stimulus(Stimulus other)
        {
        }
    
        public System.IObservable<Stimulus> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Stimulus(this)));
        }
    
        public System.IObservable<Stimulus> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Stimulus(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingSession
    {
    
        private Metadata _metadata = new Metadata();
    
        private Session _session = new Session();
    
        public AindVrForagingSession()
        {
        }
    
        protected AindVrForagingSession(AindVrForagingSession other)
        {
            _metadata = other._metadata;
            _session = other._session;
        }
    
        /// <summary>
        /// Metadata of the session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("metadata", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        [System.ComponentModel.DescriptionAttribute("Metadata of the session")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        /// <summary>
        /// Session data
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session")]
        [System.ComponentModel.DescriptionAttribute("Session data")]
        public Session Session
        {
            get
            {
                return _session;
            }
            set
            {
                _session = value;
            }
        }
    
        public System.IObservable<AindVrForagingSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindVrForagingSession(this)));
        }
    
        public System.IObservable<AindVrForagingSession> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindVrForagingSession(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("metadata = " + _metadata + ", ");
            stringBuilder.Append("session = " + _session);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; private set; }

        public System.Type Type { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactoryStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BehaviorStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OptoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VisualStimulation>))]
    public partial class MatchStimulus : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Stimulus);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchStimulus),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Stimulus> source)
            where TResult : Stimulus
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Stimulus>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<BaseName> source)
        {
            return Process<BaseName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BehaviorStimulation> source)
        {
            return Process<BehaviorStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BehaviorVideos> source)
        {
            return Process<BehaviorVideos>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Calibration> source)
        {
            return Process<Calibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CcfCoords> source)
        {
            return Process<CcfCoords>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Confocal> source)
        {
            return Process<Confocal>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Coordinates3d> source)
        {
            return Process<Coordinates3d>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DetectorConfig> source)
        {
            return Process<DetectorConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DomeModule> source)
        {
            return Process<DomeModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Ecephys> source)
        {
            return Process<Ecephys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Electromyography> source)
        {
            return Process<Electromyography>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EphysModule> source)
        {
            return Process<EphysModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EphysProbeConfig> source)
        {
            return Process<EphysProbeConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fib> source)
        {
            return Process<Fib>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FiberConnectionConfig> source)
        {
            return Process<FiberConnectionConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FiberModule> source)
        {
            return Process<FiberModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FieldOfView> source)
        {
            return Process<FieldOfView>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fmost> source)
        {
            return Process<Fmost>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Icephys> source)
        {
            return Process<Icephys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Isi> source)
        {
            return Process<Isi>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LaserConfig> source)
        {
            return Process<LaserConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LightEmittingDiodeConfig> source)
        {
            return Process<LightEmittingDiodeConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Maintenance> source)
        {
            return Process<Maintenance>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ManipulatorModule> source)
        {
            return Process<ManipulatorModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Merfish> source)
        {
            return Process<Merfish>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Mri> source)
        {
            return Process<Mri>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannelConfig> source)
        {
            return Process<OlfactometerChannelConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactoryStimulation> source)
        {
            return Process<OlfactoryStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OptoStimulation> source)
        {
            return Process<OptoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PIDName> source)
        {
            return Process<PIDName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<POphys> source)
        {
            return Process<POphys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulation> source)
        {
            return Process<PhotoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulationGroup> source)
        {
            return Process<PhotoStimulationGroup>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reagent> source)
        {
            return Process<Reagent>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RelativePosition> source)
        {
            return Process<RelativePosition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardDeliveryConfig> source)
        {
            return Process<RewardDeliveryConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSpoutConfig> source)
        {
            return Process<RewardSpoutConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Session> source)
        {
            return Process<Session>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Slap> source)
        {
            return Process<Slap>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SlapFieldOfView> source)
        {
            return Process<SlapFieldOfView>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Software> source)
        {
            return Process<Software>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Spim> source)
        {
            return Process<Spim>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stack> source)
        {
            return Process<Stack>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StackChannel> source)
        {
            return Process<StackChannel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StimulusEpoch> source)
        {
            return Process<StimulusEpoch>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stream> source)
        {
            return Process<Stream>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TrainedBehavior> source)
        {
            return Process<TrainedBehavior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VisualStimulation> source)
        {
            return Process<VisualStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stimulus> source)
        {
            return Process<Stimulus>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingSession> source)
        {
            return Process<AindVrForagingSession>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BehaviorStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BehaviorVideos>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Calibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CcfCoords>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Confocal>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Coordinates3d>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DetectorConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DomeModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Ecephys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Electromyography>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EphysModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EphysProbeConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fib>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FiberConnectionConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FiberModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FieldOfView>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fmost>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Icephys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Isi>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LaserConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LightEmittingDiodeConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Maintenance>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ManipulatorModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Merfish>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Mri>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannelConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactoryStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OptoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PIDName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<POphys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulationGroup>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reagent>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RelativePosition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardDeliveryConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSpoutConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Session>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Slap>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SlapFieldOfView>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Software>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Spim>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stack>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StackChannel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StimulusEpoch>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stream>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TrainedBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VisualStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stimulus>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingSession>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.AttributeUsageAttribute((System.AttributeTargets.Class | System.AttributeTargets.Interface))]
    public class YamlDiscriminatorAttribute : System.Attribute
    {
    
        public YamlDiscriminatorAttribute(string discriminator)
        {
            Discriminator = discriminator;
        }

        public string Discriminator { get; private set; }

    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    public class YamlDiscriminatorTypeInspector : YamlDotNet.Serialization.TypeInspectors.TypeInspectorSkeleton
    {
    
        readonly YamlDotNet.Serialization.ITypeInspector innerTypeDescriptor;

        public YamlDiscriminatorTypeInspector(YamlDotNet.Serialization.ITypeInspector innerTypeDescriptor)
        {
            if (innerTypeDescriptor == null)
            {
                throw new System.ArgumentNullException("innerTypeDescriptor");
            }

            this.innerTypeDescriptor = innerTypeDescriptor;
        }

        public override System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IPropertyDescriptor> GetProperties(System.Type type, object container)
        {
            var innerProperties = innerTypeDescriptor.GetProperties(type, container);

            var discriminatorAttribute = (YamlDiscriminatorAttribute)System.Attribute.GetCustomAttribute(type, typeof(YamlDiscriminatorAttribute));
            var inheritanceAttributes = (JsonInheritanceAttribute[])System.Attribute.GetCustomAttributes(type, typeof(JsonInheritanceAttribute));
            var typeMatch = System.Array.Find(inheritanceAttributes, attribute => attribute.Type == type);
            if (discriminatorAttribute != null && typeMatch != null)
            {
                return System.Linq.Enumerable.Concat(new[]
                {
                    new DiscriminatorPropertyDescriptor(discriminatorAttribute.Discriminator, typeMatch.Key)
                }, innerProperties);
            }

            return innerProperties;
        }

        class DiscriminatorPropertyDescriptor : YamlDotNet.Serialization.IPropertyDescriptor
        {
            readonly string key;

            public DiscriminatorPropertyDescriptor(string discriminator, string value)
            {
                ScalarStyle = YamlDotNet.Core.ScalarStyle.Plain;
                Name = discriminator;
                key = value;
            }

            public string Name { get; private set; }

            public bool CanWrite
            {
                get { return true; }
            }

            public System.Type Type
            {
                get { return typeof(string); }
            }

            public System.Type TypeOverride { get; set; }

            public int Order { get; set; }

            public YamlDotNet.Core.ScalarStyle ScalarStyle { get; set; }

            public T GetCustomAttribute<T>() where T : System.Attribute
            {
                return null;
            }

            public YamlDotNet.Serialization.IObjectDescriptor Read(object target)
            {
                return new YamlDotNet.Serialization.ObjectDescriptor(key, Type, Type, ScalarStyle);
            }

            public void Write(object target, object value)
            {
            }
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .WithTypeInspector(inspector => new YamlDiscriminatorTypeInspector(inspector))
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<BaseName> source)
        {
            return Process<BaseName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BehaviorStimulation> source)
        {
            return Process<BehaviorStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BehaviorVideos> source)
        {
            return Process<BehaviorVideos>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Calibration> source)
        {
            return Process<Calibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CcfCoords> source)
        {
            return Process<CcfCoords>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Confocal> source)
        {
            return Process<Confocal>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Coordinates3d> source)
        {
            return Process<Coordinates3d>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DetectorConfig> source)
        {
            return Process<DetectorConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DomeModule> source)
        {
            return Process<DomeModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Ecephys> source)
        {
            return Process<Ecephys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Electromyography> source)
        {
            return Process<Electromyography>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EphysModule> source)
        {
            return Process<EphysModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EphysProbeConfig> source)
        {
            return Process<EphysProbeConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fib> source)
        {
            return Process<Fib>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FiberConnectionConfig> source)
        {
            return Process<FiberConnectionConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FiberModule> source)
        {
            return Process<FiberModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FieldOfView> source)
        {
            return Process<FieldOfView>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Fmost> source)
        {
            return Process<Fmost>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Icephys> source)
        {
            return Process<Icephys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Isi> source)
        {
            return Process<Isi>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LaserConfig> source)
        {
            return Process<LaserConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LightEmittingDiodeConfig> source)
        {
            return Process<LightEmittingDiodeConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Maintenance> source)
        {
            return Process<Maintenance>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ManipulatorModule> source)
        {
            return Process<ManipulatorModule>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Merfish> source)
        {
            return Process<Merfish>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Mri> source)
        {
            return Process<Mri>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannelConfig> source)
        {
            return Process<OlfactometerChannelConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactoryStimulation> source)
        {
            return Process<OlfactoryStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OptoStimulation> source)
        {
            return Process<OptoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PIDName> source)
        {
            return Process<PIDName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<POphys> source)
        {
            return Process<POphys>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulation> source)
        {
            return Process<PhotoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulationGroup> source)
        {
            return Process<PhotoStimulationGroup>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reagent> source)
        {
            return Process<Reagent>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RelativePosition> source)
        {
            return Process<RelativePosition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardDeliveryConfig> source)
        {
            return Process<RewardDeliveryConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSpoutConfig> source)
        {
            return Process<RewardSpoutConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Session> source)
        {
            return Process<Session>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Slap> source)
        {
            return Process<Slap>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SlapFieldOfView> source)
        {
            return Process<SlapFieldOfView>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Software> source)
        {
            return Process<Software>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Spim> source)
        {
            return Process<Spim>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stack> source)
        {
            return Process<Stack>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StackChannel> source)
        {
            return Process<StackChannel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StimulusEpoch> source)
        {
            return Process<StimulusEpoch>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stream> source)
        {
            return Process<Stream>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TrainedBehavior> source)
        {
            return Process<TrainedBehavior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VisualStimulation> source)
        {
            return Process<VisualStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stimulus> source)
        {
            return Process<Stimulus>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingSession> source)
        {
            return Process<AindVrForagingSession>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BehaviorStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BehaviorVideos>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Calibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CcfCoords>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Confocal>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Coordinates3d>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DetectorConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DomeModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Ecephys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Electromyography>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EphysModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EphysProbeConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fib>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FiberConnectionConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FiberModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FieldOfView>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Fmost>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Icephys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Isi>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LaserConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LightEmittingDiodeConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Maintenance>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ManipulatorModule>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Merfish>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Mri>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannelConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactoryStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OptoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PIDName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<POphys>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulationGroup>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reagent>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RelativePosition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardDeliveryConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSpoutConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Session>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Slap>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SlapFieldOfView>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Software>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Spim>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stack>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StackChannel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StimulusEpoch>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stream>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TrainedBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VisualStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stimulus>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingSession>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static void AddTypeDiscriminator<T>(YamlDotNet.Serialization.BufferedDeserialization.ITypeDiscriminatingNodeDeserializerOptions o)
        {
            var baseType = typeof(T);
            var discriminator = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<YamlDiscriminatorAttribute>(baseType).Discriminator;
            var typeMapping = System.Linq.Enumerable.ToDictionary(
                System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(baseType),
                attr => attr.Key,
                attr => attr.Type);
            o.AddKeyValueTypeDiscriminator<T>(discriminator, typeMapping);
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .WithTypeInspector(inspector => new YamlDiscriminatorTypeInspector(inspector))
                    .WithTypeDiscriminatingNodeDeserializer(o =>
                    {
                        AddTypeDiscriminator<Stimulus>(o);
                    })
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}