//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema.Session
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Generic calibration class
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Generic calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Calibration
    {
    
        private System.DateTimeOffset _date_of_calibration;
    
        private string _device_name;
    
        private string _description;
    
        private object _input;
    
        private object _output;
    
        private string _notes;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date_of_calibration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="date_of_calibration")]
        public System.DateTimeOffset Date_of_calibration
        {
            get
            {
                return _date_of_calibration;
            }
            set
            {
                _date_of_calibration = value;
            }
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string Device_name
        {
            get
            {
                return _device_name;
            }
            set
            {
                _device_name = value;
            }
        }
    
        /// <summary>
        /// Brief decsription of what is being calibrated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="description")]
        [System.ComponentModel.DescriptionAttribute("Brief decsription of what is being calibrated")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        /// <summary>
        /// Calibration input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="input")]
        [System.ComponentModel.DescriptionAttribute("Calibration input")]
        public object Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        /// <summary>
        /// Calibration output
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output")]
        [System.ComponentModel.DescriptionAttribute("Calibration output")]
        public object Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<Calibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Calibration
                {
                    Date_of_calibration = _date_of_calibration,
                    Device_name = _device_name,
                    Description = _description,
                    Input = _input,
                    Output = _output,
                    Notes = _notes
                }));
        }
    }


    /// <summary>
    /// A simple model associating a name with an abbreviation
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A simple model associating a name with an abbreviation")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BaseName
    {
    
        private string _name;
    
        private string _abbreviation;
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        public System.IObservable<BaseName> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new BaseName
                {
                    Name = _name,
                    Abbreviation = _abbreviation
                }));
        }
    }


    /// <summary>
    /// Model for associate a name with a persistent identifier (PID),
    ///the registry for that PID, and abbreviation for that registry
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Model for associate a name with a persistent identifier (PID),\nthe registry for t" +
        "hat PID, and abbreviation for that registry")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PIDName
    {
    
        private string _name;
    
        private string _abbreviation;
    
        private BaseName _registry;
    
        private string _registry_identifier;
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("abbreviation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abbreviation")]
        public string Abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("registry")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="registry")]
        public BaseName Registry
        {
            get
            {
                return _registry;
            }
            set
            {
                _registry = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("registry_identifier")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="registry_identifier")]
        public string Registry_identifier
        {
            get
            {
                return _registry_identifier;
            }
            set
            {
                _registry_identifier = value;
            }
        }
    
        public System.IObservable<PIDName> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PIDName
                {
                    Name = _name,
                    Abbreviation = _abbreviation,
                    Registry = _registry,
                    Registry_identifier = _registry_identifier
                }));
        }
    }


    /// <summary>
    /// Description of reagents used in procedure
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Description of reagents used in procedure")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Reagent
    {
    
        private string _name;
    
        private string _source;
    
        private PIDName _rrid;
    
        private string _lot_number;
    
        private System.DateTimeOffset _expiration_date;
    
        [Newtonsoft.Json.JsonPropertyAttribute("name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("source", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="source")]
        public string Source
        {
            get
            {
                return _source;
            }
            set
            {
                _source = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rrid")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rrid")]
        public PIDName Rrid
        {
            get
            {
                return _rrid;
            }
            set
            {
                _rrid = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("lot_number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lot_number")]
        public string Lot_number
        {
            get
            {
                return _lot_number;
            }
            set
            {
                _lot_number = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("expiration_date")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="expiration_date")]
        public System.DateTimeOffset Expiration_date
        {
            get
            {
                return _expiration_date;
            }
            set
            {
                _expiration_date = value;
            }
        }
    
        public System.IObservable<Reagent> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Reagent
                {
                    Name = _name,
                    Source = _source,
                    Rrid = _rrid,
                    Lot_number = _lot_number,
                    Expiration_date = _expiration_date
                }));
        }
    }


    /// <summary>
    /// Generic maintenance class
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Generic maintenance class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Maintenance
    {
    
        private System.DateTimeOffset _date_of_maintenance;
    
        private string _device_name;
    
        private string _description;
    
        private string _protocol_id;
    
        private System.Collections.Generic.List<Reagent> _reagents = new System.Collections.Generic.List<Reagent>();
    
        private string _notes;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date_of_maintenance", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="date_of_maintenance")]
        public System.DateTimeOffset Date_of_maintenance
        {
            get
            {
                return _date_of_maintenance;
            }
            set
            {
                _date_of_maintenance = value;
            }
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string Device_name
        {
            get
            {
                return _device_name;
            }
            set
            {
                _device_name = value;
            }
        }
    
        /// <summary>
        /// Description on maintenance procedure
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="description")]
        [System.ComponentModel.DescriptionAttribute("Description on maintenance procedure")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("protocol_id")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="protocol_id")]
        public string Protocol_id
        {
            get
            {
                return _protocol_id;
            }
            set
            {
                _protocol_id = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reagents")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reagents")]
        public System.Collections.Generic.List<Reagent> Reagents
        {
            get
            {
                return _reagents;
            }
            set
            {
                _reagents = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<Maintenance> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Maintenance
                {
                    Date_of_maintenance = _date_of_maintenance,
                    Device_name = _device_name,
                    Description = _description,
                    Protocol_id = _protocol_id,
                    Reagents = _reagents,
                    Notes = _notes
                }));
        }
    }


    /// <summary>
    /// Enumeration of Mass Measurements
    /// </summary>
    public enum MassUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="kilogram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="kilogram")]
        Kilogram = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="gram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gram")]
        Gram = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="milligram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="milligram")]
        Milligram = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microgram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microgram")]
        Microgram = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanogram")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanogram")]
        Nanogram = 4,
    }


    /// <summary>
    /// Types of Opto stim pulse shapes
    /// </summary>
    public enum PulseShape
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Square")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Square")]
        Square = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Ramp")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Ramp")]
        Ramp = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Sinusoidal")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Sinusoidal")]
        Sinusoidal = 2,
    }


    /// <summary>
    /// Enumeration of Frequency Measurements
    /// </summary>
    public enum FrequencyUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="kilohertz")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="kilohertz")]
        Kilohertz = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="hertz")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="hertz")]
        Hertz = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="millihertz")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="millihertz")]
        Millihertz = 2,
    }


    /// <summary>
    /// Enumeration of Time Measurements
    /// </summary>
    public enum TimeUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="hour")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="hour")]
        Hour = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="minute")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minute")]
        Minute = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="second")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="second")]
        Second = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="millisecond")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="millisecond")]
        Millisecond = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microsecond")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microsecond")]
        Microsecond = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanosecond")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanosecond")]
        Nanosecond = 5,
    }


    /// <summary>
    /// Description of opto stimulation parameters
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Description of opto stimulation parameters")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OptoStimulation
    {
    
        private string _stimulus_name;
    
        private PulseShape _pulse_shape;
    
        private int _pulse_frequency;
    
        private FrequencyUnit _pulse_frequency_unit;
    
        private int _number_pulse_trains;
    
        private int _pulse_width;
    
        private TimeUnit _pulse_width_unit;
    
        private double _pulse_train_duration;
    
        private TimeUnit _pulse_train_duration_unit;
    
        private bool _fixed_pulse_train_interval;
    
        private double _pulse_train_interval;
    
        private TimeUnit _pulse_train_interval_unit;
    
        private double _baseline_duration;
    
        private TimeUnit _baseline_duration_unit;
    
        private object _other_parameters;
    
        private string _notes;
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_name")]
        public string Stimulus_name
        {
            get
            {
                return _stimulus_name;
            }
            set
            {
                _stimulus_name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_shape", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_shape")]
        public PulseShape Pulse_shape
        {
            get
            {
                return _pulse_shape;
            }
            set
            {
                _pulse_shape = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_frequency", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_frequency")]
        public int Pulse_frequency
        {
            get
            {
                return _pulse_frequency;
            }
            set
            {
                _pulse_frequency = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_frequency_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_frequency_unit")]
        public FrequencyUnit Pulse_frequency_unit
        {
            get
            {
                return _pulse_frequency_unit;
            }
            set
            {
                _pulse_frequency_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_pulse_trains", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_pulse_trains")]
        public int Number_pulse_trains
        {
            get
            {
                return _number_pulse_trains;
            }
            set
            {
                _number_pulse_trains = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_width", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_width")]
        public int Pulse_width
        {
            get
            {
                return _pulse_width;
            }
            set
            {
                _pulse_width = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_width_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_width_unit")]
        public TimeUnit Pulse_width_unit
        {
            get
            {
                return _pulse_width_unit;
            }
            set
            {
                _pulse_width_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_duration")]
        public double Pulse_train_duration
        {
            get
            {
                return _pulse_train_duration;
            }
            set
            {
                _pulse_train_duration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_duration_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_duration_unit")]
        public TimeUnit Pulse_train_duration_unit
        {
            get
            {
                return _pulse_train_duration_unit;
            }
            set
            {
                _pulse_train_duration_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("fixed_pulse_train_interval", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fixed_pulse_train_interval")]
        public bool Fixed_pulse_train_interval
        {
            get
            {
                return _fixed_pulse_train_interval;
            }
            set
            {
                _fixed_pulse_train_interval = value;
            }
        }
    
        /// <summary>
        /// Time between pulse trains
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_interval")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_interval")]
        [System.ComponentModel.DescriptionAttribute("Time between pulse trains")]
        public double Pulse_train_interval
        {
            get
            {
                return _pulse_train_interval;
            }
            set
            {
                _pulse_train_interval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_train_interval_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_train_interval_unit")]
        public TimeUnit Pulse_train_interval_unit
        {
            get
            {
                return _pulse_train_interval_unit;
            }
            set
            {
                _pulse_train_interval_unit = value;
            }
        }
    
        /// <summary>
        /// Duration of baseline recording prior to first pulse train
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("baseline_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="baseline_duration")]
        [System.ComponentModel.DescriptionAttribute("Duration of baseline recording prior to first pulse train")]
        public double Baseline_duration
        {
            get
            {
                return _baseline_duration;
            }
            set
            {
                _baseline_duration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("baseline_duration_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="baseline_duration_unit")]
        public TimeUnit Baseline_duration_unit
        {
            get
            {
                return _baseline_duration_unit;
            }
            set
            {
                _baseline_duration_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("other_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="other_parameters")]
        public object Other_parameters
        {
            get
            {
                return _other_parameters;
            }
            set
            {
                _other_parameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<OptoStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OptoStimulation
                {
                    Stimulus_name = _stimulus_name,
                    Pulse_shape = _pulse_shape,
                    Pulse_frequency = _pulse_frequency,
                    Pulse_frequency_unit = _pulse_frequency_unit,
                    Number_pulse_trains = _number_pulse_trains,
                    Pulse_width = _pulse_width,
                    Pulse_width_unit = _pulse_width_unit,
                    Pulse_train_duration = _pulse_train_duration,
                    Pulse_train_duration_unit = _pulse_train_duration_unit,
                    Fixed_pulse_train_interval = _fixed_pulse_train_interval,
                    Pulse_train_interval = _pulse_train_interval,
                    Pulse_train_interval_unit = _pulse_train_interval_unit,
                    Baseline_duration = _baseline_duration,
                    Baseline_duration_unit = _baseline_duration_unit,
                    Other_parameters = _other_parameters,
                    Notes = _notes
                }));
        }
    }


    /// <summary>
    /// Description of visual stimulus parameters. Provides a high level description of stimulus.
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Description of visual stimulus parameters. Provides a high level description of s" +
        "timulus.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VisualStimulation
    {
    
        private string _stimulus_name;
    
        private object _stimulus_parameters;
    
        private System.Collections.Generic.List<string> _stimulus_template_name = new System.Collections.Generic.List<string>();
    
        private string _stimulus_software;
    
        private string _stimulus_software_version;
    
        private string _stimulus_script;
    
        private string _stimulus_script_version;
    
        private string _notes;
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_name")]
        public string Stimulus_name
        {
            get
            {
                return _stimulus_name;
            }
            set
            {
                _stimulus_name = value;
            }
        }
    
        /// <summary>
        /// Define and list the parameter values used (e.g. all TF or orientation values)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_parameters")]
        [System.ComponentModel.DescriptionAttribute("Define and list the parameter values used (e.g. all TF or orientation values)")]
        public object Stimulus_parameters
        {
            get
            {
                return _stimulus_parameters;
            }
            set
            {
                _stimulus_parameters = value;
            }
        }
    
        /// <summary>
        /// Name of image set or movie displayed
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_template_name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_template_name")]
        [System.ComponentModel.DescriptionAttribute("Name of image set or movie displayed")]
        public System.Collections.Generic.List<string> Stimulus_template_name
        {
            get
            {
                return _stimulus_template_name;
            }
            set
            {
                _stimulus_template_name = value;
            }
        }
    
        /// <summary>
        /// The software used to control the stimulus (e.g. Bonsai)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_software", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_software")]
        [System.ComponentModel.DescriptionAttribute("The software used to control the stimulus (e.g. Bonsai)")]
        public string Stimulus_software
        {
            get
            {
                return _stimulus_software;
            }
            set
            {
                _stimulus_software = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_software_version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_software_version")]
        public string Stimulus_software_version
        {
            get
            {
                return _stimulus_software_version;
            }
            set
            {
                _stimulus_software_version = value;
            }
        }
    
        /// <summary>
        /// The specific code for this stimulus instance
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_script", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_script")]
        [System.ComponentModel.DescriptionAttribute("The specific code for this stimulus instance")]
        public string Stimulus_script
        {
            get
            {
                return _stimulus_script;
            }
            set
            {
                _stimulus_script = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_script_version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_script_version")]
        public string Stimulus_script_version
        {
            get
            {
                return _stimulus_script_version;
            }
            set
            {
                _stimulus_script_version = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<VisualStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new VisualStimulation
                {
                    Stimulus_name = _stimulus_name,
                    Stimulus_parameters = _stimulus_parameters,
                    Stimulus_template_name = _stimulus_template_name,
                    Stimulus_software = _stimulus_software,
                    Stimulus_software_version = _stimulus_software_version,
                    Stimulus_script = _stimulus_script,
                    Stimulus_script_version = _stimulus_script_version,
                    Notes = _notes
                }));
        }
    }


    /// <summary>
    /// Description of behavior parameters. Provides a high level description of stimulus.
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Description of behavior parameters. Provides a high level description of stimulus" +
        ".")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BehaviorStimulation
    {
    
        private string _behavior_name;
    
        private string _behavior_software;
    
        private string _behavior_software_version;
    
        private string _behavior_script;
    
        private string _behavior_script_version;
    
        private object _input_parameters = new object();
    
        private string _notes;
    
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_name")]
        public string Behavior_name
        {
            get
            {
                return _behavior_name;
            }
            set
            {
                _behavior_name = value;
            }
        }
    
        /// <summary>
        /// The software used to control the behavior (e.g. Bonsai)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_software", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_software")]
        [System.ComponentModel.DescriptionAttribute("The software used to control the behavior (e.g. Bonsai)")]
        public string Behavior_software
        {
            get
            {
                return _behavior_software;
            }
            set
            {
                _behavior_software = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_software_version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_software_version")]
        public string Behavior_software_version
        {
            get
            {
                return _behavior_software_version;
            }
            set
            {
                _behavior_software_version = value;
            }
        }
    
        /// <summary>
        /// URL for the commit of the code used to run the behavior
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_script", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_script")]
        [System.ComponentModel.DescriptionAttribute("URL for the commit of the code used to run the behavior")]
        public string Behavior_script
        {
            get
            {
                return _behavior_script;
            }
            set
            {
                _behavior_script = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_script_version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_script_version")]
        public string Behavior_script_version
        {
            get
            {
                return _behavior_script_version;
            }
            set
            {
                _behavior_script_version = value;
            }
        }
    
        /// <summary>
        /// Parameters used in behavior session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input_parameters", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="input_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters used in behavior session")]
        public object Input_parameters
        {
            get
            {
                return _input_parameters;
            }
            set
            {
                _input_parameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<BehaviorStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new BehaviorStimulation
                {
                    Behavior_name = _behavior_name,
                    Behavior_software = _behavior_software,
                    Behavior_software_version = _behavior_software_version,
                    Behavior_script = _behavior_script,
                    Behavior_script_version = _behavior_script_version,
                    Input_parameters = _input_parameters,
                    Notes = _notes
                }));
        }
    }


    /// <summary>
    /// Unit for power, set or measured
    /// </summary>
    public enum PowerUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microwatt")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microwatt")]
        Microwatt = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="milliwatt")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="milliwatt")]
        Milliwatt = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="percent")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="percent")]
        Percent = 2,
    }


    /// <summary>
    /// Description of a photostimulation group
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Description of a photostimulation group")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PhotoStimulationGroup
    {
    
        private int _group_index;
    
        private int _number_of_neurons;
    
        private double _stimulation_laser_power;
    
        private PowerUnit _stimulation_laser_power_unit;
    
        private int _number_trials;
    
        private int _number_spirals;
    
        private double _spiral_duration;
    
        private TimeUnit _spiral_duration_unit;
    
        private double _inter_spiral_interval;
    
        private TimeUnit _inter_spiral_interval_unit;
    
        private object _other_parameters;
    
        private string _notes;
    
        [Newtonsoft.Json.JsonPropertyAttribute("group_index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="group_index")]
        public int Group_index
        {
            get
            {
                return _group_index;
            }
            set
            {
                _group_index = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_of_neurons", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_of_neurons")]
        public int Number_of_neurons
        {
            get
            {
                return _number_of_neurons;
            }
            set
            {
                _number_of_neurons = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulation_laser_power", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulation_laser_power")]
        public double Stimulation_laser_power
        {
            get
            {
                return _stimulation_laser_power;
            }
            set
            {
                _stimulation_laser_power = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulation_laser_power_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulation_laser_power_unit")]
        public PowerUnit Stimulation_laser_power_unit
        {
            get
            {
                return _stimulation_laser_power_unit;
            }
            set
            {
                _stimulation_laser_power_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_trials", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_trials")]
        public int Number_trials
        {
            get
            {
                return _number_trials;
            }
            set
            {
                _number_trials = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_spirals", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_spirals")]
        public int Number_spirals
        {
            get
            {
                return _number_spirals;
            }
            set
            {
                _number_spirals = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("spiral_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="spiral_duration")]
        public double Spiral_duration
        {
            get
            {
                return _spiral_duration;
            }
            set
            {
                _spiral_duration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("spiral_duration_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="spiral_duration_unit")]
        public TimeUnit Spiral_duration_unit
        {
            get
            {
                return _spiral_duration_unit;
            }
            set
            {
                _spiral_duration_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("inter_spiral_interval", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_spiral_interval")]
        public double Inter_spiral_interval
        {
            get
            {
                return _inter_spiral_interval;
            }
            set
            {
                _inter_spiral_interval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_spiral_interval_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_spiral_interval_unit")]
        public TimeUnit Inter_spiral_interval_unit
        {
            get
            {
                return _inter_spiral_interval_unit;
            }
            set
            {
                _inter_spiral_interval_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("other_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="other_parameters")]
        public object Other_parameters
        {
            get
            {
                return _other_parameters;
            }
            set
            {
                _other_parameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<PhotoStimulationGroup> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PhotoStimulationGroup
                {
                    Group_index = _group_index,
                    Number_of_neurons = _number_of_neurons,
                    Stimulation_laser_power = _stimulation_laser_power,
                    Stimulation_laser_power_unit = _stimulation_laser_power_unit,
                    Number_trials = _number_trials,
                    Number_spirals = _number_spirals,
                    Spiral_duration = _spiral_duration,
                    Spiral_duration_unit = _spiral_duration_unit,
                    Inter_spiral_interval = _inter_spiral_interval,
                    Inter_spiral_interval_unit = _inter_spiral_interval_unit,
                    Other_parameters = _other_parameters,
                    Notes = _notes
                }));
        }
    }


    /// <summary>
    /// Description of a photostimulation session
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Description of a photostimulation session")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PhotoStimulation
    {
    
        private string _stimulus_name;
    
        private int _number_groups;
    
        private System.Collections.Generic.List<PhotoStimulationGroup> _groups = new System.Collections.Generic.List<PhotoStimulationGroup>();
    
        private double _inter_trial_interval;
    
        private TimeUnit _inter_trial_interval_unit;
    
        private object _other_parameters;
    
        private string _notes;
    
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_name")]
        public string Stimulus_name
        {
            get
            {
                return _stimulus_name;
            }
            set
            {
                _stimulus_name = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("number_groups", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number_groups")]
        public int Number_groups
        {
            get
            {
                return _number_groups;
            }
            set
            {
                _number_groups = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("groups", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="groups")]
        public System.Collections.Generic.List<PhotoStimulationGroup> Groups
        {
            get
            {
                return _groups;
            }
            set
            {
                _groups = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("inter_trial_interval", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_trial_interval")]
        public double Inter_trial_interval
        {
            get
            {
                return _inter_trial_interval;
            }
            set
            {
                _inter_trial_interval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_trial_interval_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_trial_interval_unit")]
        public TimeUnit Inter_trial_interval_unit
        {
            get
            {
                return _inter_trial_interval_unit;
            }
            set
            {
                _inter_trial_interval_unit = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("other_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="other_parameters")]
        public object Other_parameters
        {
            get
            {
                return _other_parameters;
            }
            set
            {
                _other_parameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<PhotoStimulation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PhotoStimulation
                {
                    Stimulus_name = _stimulus_name,
                    Number_groups = _number_groups,
                    Groups = _groups,
                    Inter_trial_interval = _inter_trial_interval,
                    Inter_trial_interval_unit = _inter_trial_interval_unit,
                    Other_parameters = _other_parameters,
                    Notes = _notes
                }));
        }
    }


    /// <summary>
    /// Description of stimulus used during session
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Description of stimulus used during session")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class StimulusEpoch
    {
    
        private Stimulus _stimulus;
    
        private System.TimeSpan _stimulus_start_time;
    
        private System.TimeSpan _stimulus_end_time;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus")]
        public Stimulus Stimulus
        {
            get
            {
                return _stimulus;
            }
            set
            {
                _stimulus = value;
            }
        }
    
        /// <summary>
        /// When a specific stimulus begins. This might be the same as the session start time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_start_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_start_time")]
        [System.ComponentModel.DescriptionAttribute("When a specific stimulus begins. This might be the same as the session start time" +
            ".")]
        public System.TimeSpan Stimulus_start_time
        {
            get
            {
                return _stimulus_start_time;
            }
            set
            {
                _stimulus_start_time = value;
            }
        }
    
        /// <summary>
        /// When a specific stimulus ends. This might be the same as the session end time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_end_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_end_time")]
        [System.ComponentModel.DescriptionAttribute("When a specific stimulus ends. This might be the same as the session end time.")]
        public System.TimeSpan Stimulus_end_time
        {
            get
            {
                return _stimulus_end_time;
            }
            set
            {
                _stimulus_end_time = value;
            }
        }
    
        public System.IObservable<StimulusEpoch> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new StimulusEpoch
                {
                    Stimulus = _stimulus,
                    Stimulus_start_time = _stimulus_start_time,
                    Stimulus_end_time = _stimulus_end_time
                }));
        }
    }


    /// <summary>
    /// Enumeration of Volume Measurements
    /// </summary>
    public enum VolumeUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="liter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="liter")]
        Liter = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="milliliter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="milliliter")]
        Milliliter = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="microliter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="microliter")]
        Microliter = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanoliter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanoliter")]
        Nanoliter = 3,
    }


    /// <summary>
    /// Description of a behavior session
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Description of a behavior session")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Behavior_session_schema
    {
    
        private string _describedBy = "https://raw.githubusercontent.com/AllenNeuralDynamics/aind-data-schema/main/src/aind_data_schema/behavior/behavior_session.py";
    
        private string _schema_version = "0.0.7";
    
        private string _experimenter_full_name;
    
        private System.DateTimeOffset _session_start_time;
    
        private System.DateTimeOffset _session_end_time;
    
        private string _rig_id;
    
        private System.Collections.Generic.List<Calibration> _calibrations = new System.Collections.Generic.List<Calibration>();
    
        private System.Collections.Generic.List<Maintenance> _maintenance = new System.Collections.Generic.List<Maintenance>();
    
        private int _subject_id;
    
        private double _animal_weight_prior;
    
        private double _animal_weight_post;
    
        private MassUnit _weight_unit;
    
        private string _behavior_type;
    
        private System.Collections.Generic.List<StimulusEpoch> _stimulus_epochs = new System.Collections.Generic.List<StimulusEpoch>();
    
        private int _session_number;
    
        private object _output_parameters = new object();
    
        private double _reward_consumed_during_training;
    
        private double _reward_consumed_total;
    
        private VolumeUnit _reward_consumed_unit;
    
        private int _trials_total;
    
        private int _trials_finished;
    
        private int _trials_rewarded;
    
        private string _notes;
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="describedBy")]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        /// <summary>
        /// Schema version
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="schema_version")]
        [System.ComponentModel.DescriptionAttribute("Schema version")]
        public string Schema_version
        {
            get
            {
                return _schema_version;
            }
            set
            {
                _schema_version = value;
            }
        }
    
        /// <summary>
        /// First and last name of the experimenter.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("experimenter_full_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="experimenter_full_name")]
        [System.ComponentModel.DescriptionAttribute("First and last name of the experimenter.")]
        public string Experimenter_full_name
        {
            get
            {
                return _experimenter_full_name;
            }
            set
            {
                _experimenter_full_name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session_start_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_start_time")]
        public System.DateTimeOffset Session_start_time
        {
            get
            {
                return _session_start_time;
            }
            set
            {
                _session_start_time = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session_end_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_end_time")]
        public System.DateTimeOffset Session_end_time
        {
            get
            {
                return _session_end_time;
            }
            set
            {
                _session_end_time = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("rig_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rig_id")]
        public string Rig_id
        {
            get
            {
                return _rig_id;
            }
            set
            {
                _rig_id = value;
            }
        }
    
        /// <summary>
        /// Calibrations of rig devices prior to session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibrations")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibrations")]
        [System.ComponentModel.DescriptionAttribute("Calibrations of rig devices prior to session")]
        public System.Collections.Generic.List<Calibration> Calibrations
        {
            get
            {
                return _calibrations;
            }
            set
            {
                _calibrations = value;
            }
        }
    
        /// <summary>
        /// Maintenance of rig devices prior to session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("maintenance")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maintenance")]
        [System.ComponentModel.DescriptionAttribute("Maintenance of rig devices prior to session")]
        public System.Collections.Generic.List<Maintenance> Maintenance
        {
            get
            {
                return _maintenance;
            }
            set
            {
                _maintenance = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("subject_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="subject_id")]
        public int Subject_id
        {
            get
            {
                return _subject_id;
            }
            set
            {
                _subject_id = value;
            }
        }
    
        /// <summary>
        /// Animal weight before procedure
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("animal_weight_prior")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animal_weight_prior")]
        [System.ComponentModel.DescriptionAttribute("Animal weight before procedure")]
        public double Animal_weight_prior
        {
            get
            {
                return _animal_weight_prior;
            }
            set
            {
                _animal_weight_prior = value;
            }
        }
    
        /// <summary>
        /// Animal weight after procedure
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("animal_weight_post")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animal_weight_post")]
        [System.ComponentModel.DescriptionAttribute("Animal weight after procedure")]
        public double Animal_weight_post
        {
            get
            {
                return _animal_weight_post;
            }
            set
            {
                _animal_weight_post = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("weight_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="weight_unit")]
        public MassUnit Weight_unit
        {
            get
            {
                return _weight_unit;
            }
            set
            {
                _weight_unit = value;
            }
        }
    
        /// <summary>
        /// Name of the behavior session
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_type", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_type")]
        [System.ComponentModel.DescriptionAttribute("Name of the behavior session")]
        public string Behavior_type
        {
            get
            {
                return _behavior_type;
            }
            set
            {
                _behavior_type = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_epochs")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_epochs")]
        public System.Collections.Generic.List<StimulusEpoch> Stimulus_epochs
        {
            get
            {
                return _stimulus_epochs;
            }
            set
            {
                _stimulus_epochs = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("session_number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session_number")]
        public int Session_number
        {
            get
            {
                return _session_number;
            }
            set
            {
                _session_number = value;
            }
        }
    
        /// <summary>
        /// Performance metrics from session
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output_parameters", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output_parameters")]
        [System.ComponentModel.DescriptionAttribute("Performance metrics from session")]
        public object Output_parameters
        {
            get
            {
                return _output_parameters;
            }
            set
            {
                _output_parameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consumed_during_training", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_consumed_during_training")]
        public double Reward_consumed_during_training
        {
            get
            {
                return _reward_consumed_during_training;
            }
            set
            {
                _reward_consumed_during_training = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consumed_total", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_consumed_total")]
        public double Reward_consumed_total
        {
            get
            {
                return _reward_consumed_total;
            }
            set
            {
                _reward_consumed_total = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consumed_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_consumed_unit")]
        public VolumeUnit Reward_consumed_unit
        {
            get
            {
                return _reward_consumed_unit;
            }
            set
            {
                _reward_consumed_unit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("trials_total", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials_total")]
        public int Trials_total
        {
            get
            {
                return _trials_total;
            }
            set
            {
                _trials_total = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("trials_finished", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials_finished")]
        public int Trials_finished
        {
            get
            {
                return _trials_finished;
            }
            set
            {
                _trials_finished = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("trials_rewarded", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials_rewarded")]
        public int Trials_rewarded
        {
            get
            {
                return _trials_rewarded;
            }
            set
            {
                _trials_rewarded = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<Behavior_session_schema> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Behavior_session_schema
                {
                    DescribedBy = _describedBy,
                    Schema_version = _schema_version,
                    Experimenter_full_name = _experimenter_full_name,
                    Session_start_time = _session_start_time,
                    Session_end_time = _session_end_time,
                    Rig_id = _rig_id,
                    Calibrations = _calibrations,
                    Maintenance = _maintenance,
                    Subject_id = _subject_id,
                    Animal_weight_prior = _animal_weight_prior,
                    Animal_weight_post = _animal_weight_post,
                    Weight_unit = _weight_unit,
                    Behavior_type = _behavior_type,
                    Stimulus_epochs = _stimulus_epochs,
                    Session_number = _session_number,
                    Output_parameters = _output_parameters,
                    Reward_consumed_during_training = _reward_consumed_during_training,
                    Reward_consumed_total = _reward_consumed_total,
                    Reward_consumed_unit = _reward_consumed_unit,
                    Trials_total = _trials_total,
                    Trials_finished = _trials_finished,
                    Trials_rewarded = _trials_rewarded,
                    Notes = _notes
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingSession
    {
    
        private Behavior_session_schema _behaviorSession = new Behavior_session_schema();
    
        private Metadata _metadata = new Metadata();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("behaviorSession", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behaviorSession")]
        public Behavior_session_schema BehaviorSession
        {
            get
            {
                return _behaviorSession;
            }
            set
            {
                _behaviorSession = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("metadata", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        public System.IObservable<AindVrForagingSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new AindVrForagingSession
                {
                    BehaviorSession = _behaviorSession,
                    Metadata = _metadata
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Stimulus
    {
    
        public System.IObservable<Stimulus> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Stimulus
                {

                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _commitHash;
    
        private string _experiment;
    
        private string _notes = "";
    
        private double? _rngSeed;
    
        private string _rootPath;
    
        private string _subject;
    
        private string _version;
    
        [Newtonsoft.Json.JsonPropertyAttribute("commitHash", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="commitHash")]
        public string CommitHash
        {
            get
            {
                return _commitHash;
            }
            set
            {
                _commitHash = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("experiment", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="experiment")]
        public string Experiment
        {
            get
            {
                return _experiment;
            }
            set
            {
                _experiment = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rngSeed")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rngSeed")]
        public double? RngSeed
        {
            get
            {
                return _rngSeed;
            }
            set
            {
                _rngSeed = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("rootPath", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rootPath")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("subject", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="subject")]
        public string Subject
        {
            get
            {
                return _subject;
            }
            set
            {
                _subject = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Metadata
                {
                    CommitHash = _commitHash,
                    Experiment = _experiment,
                    Notes = _notes,
                    RngSeed = _rngSeed,
                    RootPath = _rootPath,
                    Subject = _subject,
                    Version = _version
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<Calibration> source)
        {
            return Process<Calibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BaseName> source)
        {
            return Process<BaseName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PIDName> source)
        {
            return Process<PIDName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reagent> source)
        {
            return Process<Reagent>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Maintenance> source)
        {
            return Process<Maintenance>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OptoStimulation> source)
        {
            return Process<OptoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VisualStimulation> source)
        {
            return Process<VisualStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BehaviorStimulation> source)
        {
            return Process<BehaviorStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulationGroup> source)
        {
            return Process<PhotoStimulationGroup>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulation> source)
        {
            return Process<PhotoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StimulusEpoch> source)
        {
            return Process<StimulusEpoch>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Behavior_session_schema> source)
        {
            return Process<Behavior_session_schema>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingSession> source)
        {
            return Process<AindVrForagingSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stimulus> source)
        {
            return Process<Stimulus>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Calibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PIDName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reagent>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Maintenance>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OptoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VisualStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BehaviorStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulationGroup>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StimulusEpoch>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Behavior_session_schema>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stimulus>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<Calibration> source)
        {
            return Process<Calibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BaseName> source)
        {
            return Process<BaseName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PIDName> source)
        {
            return Process<PIDName>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reagent> source)
        {
            return Process<Reagent>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Maintenance> source)
        {
            return Process<Maintenance>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OptoStimulation> source)
        {
            return Process<OptoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VisualStimulation> source)
        {
            return Process<VisualStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BehaviorStimulation> source)
        {
            return Process<BehaviorStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulationGroup> source)
        {
            return Process<PhotoStimulationGroup>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PhotoStimulation> source)
        {
            return Process<PhotoStimulation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StimulusEpoch> source)
        {
            return Process<StimulusEpoch>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Behavior_session_schema> source)
        {
            return Process<Behavior_session_schema>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingSession> source)
        {
            return Process<AindVrForagingSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Stimulus> source)
        {
            return Process<Stimulus>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Calibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PIDName>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reagent>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Maintenance>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OptoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VisualStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BehaviorStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulationGroup>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PhotoStimulation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StimulusEpoch>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Behavior_session_schema>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Stimulus>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}