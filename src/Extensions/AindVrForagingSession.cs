//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema
{
    #pragma warning disable // Disable all warnings

    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CorridorSpecifications
    {
    
        private double _height = 40D;
    
        private double _id = 0D;
    
        private double _length = 120D;
    
        private double _startPosition = 0D;
    
        private Textures _textures;
    
        private double _width = 40D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="height")]
        public double Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("Id")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Id")]
        public double Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("length")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="length")]
        public double Length
        {
            get
            {
                return _length;
            }
            set
            {
                _length = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("startPosition")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="startPosition")]
        public double StartPosition
        {
            get
            {
                return _startPosition;
            }
            set
            {
                _startPosition = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("textures")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="textures")]
        public Textures Textures
        {
            get
            {
                return _textures;
            }
            set
            {
                _textures = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="width")]
        public double Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
    
        public System.IObservable<CorridorSpecifications> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new CorridorSpecifications
                {
                    Height = _height,
                    Id = _id,
                    Length = _length,
                    StartPosition = _startPosition,
                    Textures = _textures,
                    Width = _width
                }));
        }
    }


    public enum SiteLabel
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Unspecified")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Unspecified")]
        Unspecified = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Gap")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Gap")]
        Gap = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="InterPatch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="InterPatch")]
        InterPatch = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Reward")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Reward")]
        Reward = 3,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VirtualSite
    {
    
        private double _id = 0D;
    
        private string _label = "virtualSite";
    
        private double _length = 120D;
    
        private Odor _odor;
    
        private Render _render;
    
        private Reward _reward;
    
        private double _startPosition = 0D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="id")]
        public double Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        public string Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("length")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="length")]
        public double Length
        {
            get
            {
                return _length;
            }
            set
            {
                _length = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odor")]
        public Odor Odor
        {
            get
            {
                return _odor;
            }
            set
            {
                _odor = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("render")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="render")]
        public Render Render
        {
            get
            {
                return _render;
            }
            set
            {
                _render = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward")]
        public Reward Reward
        {
            get
            {
                return _reward;
            }
            set
            {
                _reward = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("startPosition")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="startPosition")]
        public double StartPosition
        {
            get
            {
                return _startPosition;
            }
            set
            {
                _startPosition = value;
            }
        }
    
        public System.IObservable<VirtualSite> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new VirtualSite
                {
                    Id = _id,
                    Label = _label,
                    Length = _length,
                    Odor = _odor,
                    Render = _render,
                    Reward = _reward,
                    StartPosition = _startPosition
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Reward
    {
    
        private double _amount;
    
        private OperantLogic _operantLogic;
    
        private double _probability = 1D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="amount")]
        public double Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operantLogic")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="operantLogic")]
        public OperantLogic OperantLogic
        {
            get
            {
                return _operantLogic;
            }
            set
            {
                _operantLogic = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="probability")]
        public double Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        public System.IObservable<Reward> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Reward
                {
                    Amount = _amount,
                    OperantLogic = _operantLogic,
                    Probability = _probability
                }));
        }
    }


    public enum TaskStage
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Habituation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Habituation")]
        Habituation = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Foraging")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Foraging")]
        Foraging = 1,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PatchStatistics
    {
    
        private string _label = "";
    
        private Odor _odorSpecifications;
    
        private Reward _rewardSpecifications;
    
        private int _stateIndex = 0;
    
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        public string Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorSpecifications")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorSpecifications")]
        public Odor OdorSpecifications
        {
            get
            {
                return _odorSpecifications;
            }
            set
            {
                _odorSpecifications = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rewardSpecifications")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardSpecifications")]
        public Reward RewardSpecifications
        {
            get
            {
                return _rewardSpecifications;
            }
            set
            {
                _rewardSpecifications = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stateIndex")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stateIndex")]
        public int StateIndex
        {
            get
            {
                return _stateIndex;
            }
            set
            {
                _stateIndex = value;
            }
        }
    
        public System.IObservable<PatchStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PatchStatistics
                {
                    Label = _label,
                    OdorSpecifications = _odorSpecifications,
                    RewardSpecifications = _rewardSpecifications,
                    StateIndex = _stateIndex
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Matrix2d
    {
    
        private System.Collections.Generic.List<System.Collections.Generic.List<double>> _data = new System.Collections.Generic.List<System.Collections.Generic.List<double>>();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("data")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="data")]
        public System.Collections.Generic.List<System.Collections.Generic.List<double>> Data
        {
            get
            {
                return _data;
            }
            set
            {
                _data = value;
            }
        }
    
        public System.IObservable<Matrix2d> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Matrix2d
                {
                    Data = _data
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VideoCaptureDevice
    {
    
        private int _index = 0;
    
        [Newtonsoft.Json.JsonPropertyAttribute("index")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        public System.IObservable<VideoCaptureDevice> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new VideoCaptureDevice
                {
                    Index = _index
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpBoard
    {
    
        private HarpBoardDeviceType _deviceType;
    
        private string _portName;
    
        private string _serialNumber;
    
        private string _deviceName;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("deviceType", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="deviceType")]
        public HarpBoardDeviceType DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("portName", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="portName")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("serialNumber")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serialNumber")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("deviceName")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="deviceName")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        public System.IObservable<HarpBoard> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new HarpBoard
                {
                    DeviceType = _deviceType,
                    PortName = _portName,
                    SerialNumber = _serialNumber,
                    DeviceName = _deviceName
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SpinnakerCamera
    {
    
        private int _binning = 1;
    
        private SpinnakerCameraColorProcessing _colorProcessing = AindVrForagingDataSchema.SpinnakerCameraColorProcessing.Default;
    
        private int _exposure = 1000;
    
        private int _frameRate = 30;
    
        private double _gain = 0D;
    
        private string _serialNumber;
    
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="binning")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("colorProcessing")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="colorProcessing")]
        public SpinnakerCameraColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposure")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("frameRate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frameRate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("serialNumber", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serialNumber")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        public System.IObservable<SpinnakerCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new SpinnakerCamera
                {
                    Binning = _binning,
                    ColorProcessing = _colorProcessing,
                    Exposure = _exposure,
                    FrameRate = _frameRate,
                    Gain = _gain,
                    SerialNumber = _serialNumber
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RenderingSettings
    {
    
        private string _monitorCalibrationDirectory = "Calibration\\Monitors\\";
    
        private string _textureAssetDirectory = "Textures";
    
        [Newtonsoft.Json.JsonPropertyAttribute("monitorCalibrationDirectory")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="monitorCalibrationDirectory")]
        public string MonitorCalibrationDirectory
        {
            get
            {
                return _monitorCalibrationDirectory;
            }
            set
            {
                _monitorCalibrationDirectory = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("textureAssetDirectory")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="textureAssetDirectory")]
        public string TextureAssetDirectory
        {
            get
            {
                return _textureAssetDirectory;
            }
            set
            {
                _textureAssetDirectory = value;
            }
        }
    
        public System.IObservable<RenderingSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new RenderingSettings
                {
                    MonitorCalibrationDirectory = _monitorCalibrationDirectory,
                    TextureAssetDirectory = _textureAssetDirectory
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PwmBuzzer
    {
    
        private string _model = "buzzer";
    
        private string _pin = "DO1";
    
        private double _pwmDefaultPulseDuration = 0.2D;
    
        private double _pwmFrequency = 1000D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("model")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="model")]
        public string Model
        {
            get
            {
                return _model;
            }
            set
            {
                _model = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pin")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pin")]
        public string Pin
        {
            get
            {
                return _pin;
            }
            set
            {
                _pin = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pwmDefaultPulseDuration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pwmDefaultPulseDuration")]
        public double PwmDefaultPulseDuration
        {
            get
            {
                return _pwmDefaultPulseDuration;
            }
            set
            {
                _pwmDefaultPulseDuration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pwmFrequency")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pwmFrequency")]
        public double PwmFrequency
        {
            get
            {
                return _pwmFrequency;
            }
            set
            {
                _pwmFrequency = value;
            }
        }
    
        public System.IObservable<PwmBuzzer> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PwmBuzzer
                {
                    Model = _model,
                    Pin = _pin,
                    PwmDefaultPulseDuration = _pwmDefaultPulseDuration,
                    PwmFrequency = _pwmFrequency
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Treadmill
    {
    
        private string _model = "headfix";
    
        private double _wheelDiameter = 15D;
    
        private double _pulsesPerRevolution = 2880D;
    
        private bool _invertDirection = false;
    
        [Newtonsoft.Json.JsonPropertyAttribute("model")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="model")]
        public string Model
        {
            get
            {
                return _model;
            }
            set
            {
                _model = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("wheelDiameter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="wheelDiameter")]
        public double WheelDiameter
        {
            get
            {
                return _wheelDiameter;
            }
            set
            {
                _wheelDiameter = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulsesPerRevolution")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulsesPerRevolution")]
        public double PulsesPerRevolution
        {
            get
            {
                return _pulsesPerRevolution;
            }
            set
            {
                _pulsesPerRevolution = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("invertDirection")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="invertDirection")]
        public bool InvertDirection
        {
            get
            {
                return _invertDirection;
            }
            set
            {
                _invertDirection = value;
            }
        }
    
        public System.IObservable<Treadmill> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Treadmill
                {
                    Model = _model,
                    WheelDiameter = _wheelDiameter,
                    PulsesPerRevolution = _pulsesPerRevolution,
                    InvertDirection = _invertDirection
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Valve
    {
    
        private Calibration _calibration;
    
        private string _model = "valve";
    
        private string _pin = "SupplyPort0";
    
        private string _valveType = "air";
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration")]
        public Calibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("model")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="model")]
        public string Model
        {
            get
            {
                return _model;
            }
            set
            {
                _model = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pin")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pin")]
        public string Pin
        {
            get
            {
                return _pin;
            }
            set
            {
                _pin = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("valveType")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valveType")]
        public string ValveType
        {
            get
            {
                return _valveType;
            }
            set
            {
                _valveType = value;
            }
        }
    
        public System.IObservable<Valve> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Valve
                {
                    Calibration = _calibration,
                    Model = _model,
                    Pin = _pin,
                    ValveType = _valveType
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Vector3
    {
    
        private double _x = 0D;
    
        private double _y = 0D;
    
        private double _z = 0D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="x")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="y")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("z")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="z")]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<Vector3> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Vector3
                {
                    X = _x,
                    Y = _y,
                    Z = _z
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TruncatedExponential
    {
    
        private double _maximum = 1D;
    
        private double _mean = 0.5D;
    
        private double _minimum = 0D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("maximum")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maximum")]
        public double Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="mean")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("minimum")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minimum")]
        public double Minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }
    
        public System.IObservable<TruncatedExponential> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new TruncatedExponential
                {
                    Maximum = _maximum,
                    Mean = _mean,
                    Minimum = _minimum
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingSession
    {
    
        private EnvironmentStatistics _environmentStatistics = new EnvironmentStatistics();
    
        private Hardware _hardware = new Hardware();
    
        private Metadata _metadata = new Metadata();
    
        private TaskLogicControl _taskLogicControl = new TaskLogicControl();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("environmentStatistics", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="environmentStatistics")]
        public EnvironmentStatistics EnvironmentStatistics
        {
            get
            {
                return _environmentStatistics;
            }
            set
            {
                _environmentStatistics = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("hardware", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="hardware")]
        public Hardware Hardware
        {
            get
            {
                return _hardware;
            }
            set
            {
                _hardware = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("metadata", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("taskLogicControl", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="taskLogicControl")]
        public TaskLogicControl TaskLogicControl
        {
            get
            {
                return _taskLogicControl;
            }
            set
            {
                _taskLogicControl = value;
            }
        }
    
        public System.IObservable<AindVrForagingSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new AindVrForagingSession
                {
                    EnvironmentStatistics = _environmentStatistics,
                    Hardware = _hardware,
                    Metadata = _metadata,
                    TaskLogicControl = _taskLogicControl
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Textures
    {
    
        private Floor _floor = new Floor();
    
        private Floor _rightWall = new Floor();
    
        private Floor _leftWall = new Floor();
    
        private Floor _ceiling = new Floor();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("floor", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="floor")]
        public Floor Floor
        {
            get
            {
                return _floor;
            }
            set
            {
                _floor = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rightWall", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rightWall")]
        public Floor RightWall
        {
            get
            {
                return _rightWall;
            }
            set
            {
                _rightWall = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("leftWall", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="leftWall")]
        public Floor LeftWall
        {
            get
            {
                return _leftWall;
            }
            set
            {
                _leftWall = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ceiling", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ceiling")]
        public Floor Ceiling
        {
            get
            {
                return _ceiling;
            }
            set
            {
                _ceiling = value;
            }
        }
    
        public System.IObservable<Textures> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Textures
                {
                    Floor = _floor,
                    RightWall = _rightWall,
                    LeftWall = _leftWall,
                    Ceiling = _ceiling
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Odor
    {
    
        private double _concentration = 1D;
    
        private int _index;
    
        private bool _valveState = true;
    
        [Newtonsoft.Json.JsonPropertyAttribute("concentration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="concentration")]
        public double Concentration
        {
            get
            {
                return _concentration;
            }
            set
            {
                _concentration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("valveState")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valveState")]
        public bool ValveState
        {
            get
            {
                return _valveState;
            }
            set
            {
                _valveState = value;
            }
        }
    
        public System.IObservable<Odor> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Odor
                {
                    Concentration = _concentration,
                    Index = _index,
                    ValveState = _valveState
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Render
    {
    
        private double? _brightness;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("brightness")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="brightness")]
        public double? Brightness
        {
            get
            {
                return _brightness;
            }
            set
            {
                _brightness = value;
            }
        }
    
        public System.IObservable<Render> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Render
                {
                    Brightness = _brightness
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OperantLogic
    {
    
        private bool _isOperant = true;
    
        private double _stopDuration = 0D;
    
        private double _timeToCollect = 1000000D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("isOperant")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="isOperant")]
        public bool IsOperant
        {
            get
            {
                return _isOperant;
            }
            set
            {
                _isOperant = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stopDuration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stopDuration")]
        public double StopDuration
        {
            get
            {
                return _stopDuration;
            }
            set
            {
                _stopDuration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("timeToCollect")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timeToCollect")]
        public double TimeToCollect
        {
            get
            {
                return _timeToCollect;
            }
            set
            {
                _timeToCollect = value;
            }
        }
    
        public System.IObservable<OperantLogic> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OperantLogic
                {
                    IsOperant = _isOperant,
                    StopDuration = _stopDuration,
                    TimeToCollect = _timeToCollect
                }));
        }
    }


    public enum HarpBoardDeviceType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="custom")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="custom")]
        Custom = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="behavior")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior")]
        Behavior = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="clockSynchronizer")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="clockSynchronizer")]
        ClockSynchronizer = 2,
    }


    public enum SpinnakerCameraColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Calibration
    {
    
        private double _intercept = 0D;
    
        private double _slope = 1D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("intercept")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="intercept")]
        public double Intercept
        {
            get
            {
                return _intercept;
            }
            set
            {
                _intercept = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("slope")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="slope")]
        public double Slope
        {
            get
            {
                return _slope;
            }
            set
            {
                _slope = value;
            }
        }
    
        public System.IObservable<Calibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Calibration
                {
                    Intercept = _intercept,
                    Slope = _slope
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class EnvironmentStatistics
    {
    
        private System.Collections.Generic.List<PatchStatistics> _patches = new System.Collections.Generic.List<PatchStatistics>();
    
        private Matrix2d _transitionMatrix;
    
        private int? _firstState;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("patches")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="patches")]
        public System.Collections.Generic.List<PatchStatistics> Patches
        {
            get
            {
                return _patches;
            }
            set
            {
                _patches = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("transitionMatrix")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="transitionMatrix")]
        public Matrix2d TransitionMatrix
        {
            get
            {
                return _transitionMatrix;
            }
            set
            {
                _transitionMatrix = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("firstState")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="firstState")]
        public int? FirstState
        {
            get
            {
                return _firstState;
            }
            set
            {
                _firstState = value;
            }
        }
    
        public System.IObservable<EnvironmentStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new EnvironmentStatistics
                {
                    Patches = _patches,
                    TransitionMatrix = _transitionMatrix,
                    FirstState = _firstState
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Hardware
    {
    
        private VideoCaptureDevice _auxiliaryCamera0;
    
        private VideoCaptureDevice _auxiliaryCamera1;
    
        private HarpBoard _harpBehaviorBoard;
    
        private SpinnakerCamera _mainCamera;
    
        private RenderingSettings _screen;
    
        private PwmBuzzer _speaker;
    
        private Treadmill _treadmill;
    
        private Valves _valves;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("auxiliaryCamera0")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="auxiliaryCamera0")]
        public VideoCaptureDevice AuxiliaryCamera0
        {
            get
            {
                return _auxiliaryCamera0;
            }
            set
            {
                _auxiliaryCamera0 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("auxiliaryCamera1")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="auxiliaryCamera1")]
        public VideoCaptureDevice AuxiliaryCamera1
        {
            get
            {
                return _auxiliaryCamera1;
            }
            set
            {
                _auxiliaryCamera1 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpBehaviorBoard")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpBehaviorBoard")]
        public HarpBoard HarpBehaviorBoard
        {
            get
            {
                return _harpBehaviorBoard;
            }
            set
            {
                _harpBehaviorBoard = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mainCamera")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="mainCamera")]
        public SpinnakerCamera MainCamera
        {
            get
            {
                return _mainCamera;
            }
            set
            {
                _mainCamera = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("screen")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="screen")]
        public RenderingSettings Screen
        {
            get
            {
                return _screen;
            }
            set
            {
                _screen = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("speaker")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="speaker")]
        public PwmBuzzer Speaker
        {
            get
            {
                return _speaker;
            }
            set
            {
                _speaker = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("treadmill")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="treadmill")]
        public Treadmill Treadmill
        {
            get
            {
                return _treadmill;
            }
            set
            {
                _treadmill = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("valves")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valves")]
        public Valves Valves
        {
            get
            {
                return _valves;
            }
            set
            {
                _valves = value;
            }
        }
    
        public System.IObservable<Hardware> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Hardware
                {
                    AuxiliaryCamera0 = _auxiliaryCamera0,
                    AuxiliaryCamera1 = _auxiliaryCamera1,
                    HarpBehaviorBoard = _harpBehaviorBoard,
                    MainCamera = _mainCamera,
                    Screen = _screen,
                    Speaker = _speaker,
                    Treadmill = _treadmill,
                    Valves = _valves
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _commitHash;
    
        private string _experiment;
    
        private string _notes = "";
    
        private double? _rngSeed;
    
        private string _rootPath;
    
        private string _subject;
    
        private string _version;
    
        [Newtonsoft.Json.JsonPropertyAttribute("commitHash", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="commitHash")]
        public string CommitHash
        {
            get
            {
                return _commitHash;
            }
            set
            {
                _commitHash = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("experiment", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="experiment")]
        public string Experiment
        {
            get
            {
                return _experiment;
            }
            set
            {
                _experiment = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rngSeed")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rngSeed")]
        public double? RngSeed
        {
            get
            {
                return _rngSeed;
            }
            set
            {
                _rngSeed = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("rootPath", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rootPath")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("subject", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="subject")]
        public string Subject
        {
            get
            {
                return _subject;
            }
            set
            {
                _subject = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Metadata
                {
                    CommitHash = _commitHash,
                    Experiment = _experiment,
                    Notes = _notes,
                    RngSeed = _rngSeed,
                    RootPath = _rootPath,
                    Subject = _subject,
                    Version = _version
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TaskLogicControl
    {
    
        private OdorControl _odorControl = new OdorControl();
    
        private PositionControl _positionControl = new PositionControl();
    
        private TaskStage _taskStage;
    
        private HabituationSettings _habituationSettings;
    
        private VirtualSiteGeneration _virtualSiteGeneration;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorControl", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorControl")]
        public OdorControl OdorControl
        {
            get
            {
                return _odorControl;
            }
            set
            {
                _odorControl = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("positionControl", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="positionControl")]
        public PositionControl PositionControl
        {
            get
            {
                return _positionControl;
            }
            set
            {
                _positionControl = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("taskStage", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="taskStage")]
        public TaskStage TaskStage
        {
            get
            {
                return _taskStage;
            }
            set
            {
                _taskStage = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("habituationSettings")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="habituationSettings")]
        public HabituationSettings HabituationSettings
        {
            get
            {
                return _habituationSettings;
            }
            set
            {
                _habituationSettings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("virtualSiteGeneration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="virtualSiteGeneration")]
        public VirtualSiteGeneration VirtualSiteGeneration
        {
            get
            {
                return _virtualSiteGeneration;
            }
            set
            {
                _virtualSiteGeneration = value;
            }
        }
    
        public System.IObservable<TaskLogicControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new TaskLogicControl
                {
                    OdorControl = _odorControl,
                    PositionControl = _positionControl,
                    TaskStage = _taskStage,
                    HabituationSettings = _habituationSettings,
                    VirtualSiteGeneration = _virtualSiteGeneration
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Floor
    {
    
        private string _name = "default";
    
        private TextureSize _textureSize;
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("textureSize")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="textureSize")]
        public TextureSize TextureSize
        {
            get
            {
                return _textureSize;
            }
            set
            {
                _textureSize = value;
            }
        }
    
        public System.IObservable<Floor> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Floor
                {
                    Name = _name,
                    TextureSize = _textureSize
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Valves
    {
    
        private Valve _odor1 = new Valve();
    
        private Valve _odor2 = new Valve();
    
        private Valve _water = new Valve();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor1", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odor1")]
        public Valve Odor1
        {
            get
            {
                return _odor1;
            }
            set
            {
                _odor1 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor2", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odor2")]
        public Valve Odor2
        {
            get
            {
                return _odor2;
            }
            set
            {
                _odor2 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="water")]
        public Valve Water
        {
            get
            {
                return _water;
            }
            set
            {
                _water = value;
            }
        }
    
        public System.IObservable<Valves> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Valves
                {
                    Odor1 = _odor1,
                    Odor2 = _odor2,
                    Water = _water
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OdorControl
    {
    
        private double _valveMaxOpenTime;
    
        [Newtonsoft.Json.JsonPropertyAttribute("valveMaxOpenTime")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valveMaxOpenTime")]
        public double ValveMaxOpenTime
        {
            get
            {
                return _valveMaxOpenTime;
            }
            set
            {
                _valveMaxOpenTime = value;
            }
        }
    
        public System.IObservable<OdorControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OdorControl
                {
                    ValveMaxOpenTime = _valveMaxOpenTime
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PositionControl
    {
    
        private Vector3 _gain;
    
        private Vector3 _initialPosition;
    
        private StopResponseConfig _stopResponseConfig;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        public Vector3 Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("initialPosition")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="initialPosition")]
        public Vector3 InitialPosition
        {
            get
            {
                return _initialPosition;
            }
            set
            {
                _initialPosition = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stopResponseConfig")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stopResponseConfig")]
        public StopResponseConfig StopResponseConfig
        {
            get
            {
                return _stopResponseConfig;
            }
            set
            {
                _stopResponseConfig = value;
            }
        }
    
        public System.IObservable<PositionControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PositionControl
                {
                    Gain = _gain,
                    InitialPosition = _initialPosition,
                    StopResponseConfig = _stopResponseConfig
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HabituationSettings
    {
    
        private TruncatedExponential _distanceToReward = new TruncatedExponential();
    
        private Reward _reward;
    
        private double? _brightness;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distanceToReward", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distanceToReward")]
        public TruncatedExponential DistanceToReward
        {
            get
            {
                return _distanceToReward;
            }
            set
            {
                _distanceToReward = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward")]
        public Reward Reward
        {
            get
            {
                return _reward;
            }
            set
            {
                _reward = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("brightness")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="brightness")]
        public double? Brightness
        {
            get
            {
                return _brightness;
            }
            set
            {
                _brightness = value;
            }
        }
    
        public System.IObservable<HabituationSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new HabituationSettings
                {
                    DistanceToReward = _distanceToReward,
                    Reward = _reward,
                    Brightness = _brightness
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VirtualSiteGeneration
    {
    
        private GapSite _gapSite = new GapSite();
    
        private InterPatchSite _interPatchSite = new InterPatchSite();
    
        private RewardSite _rewardSite = new RewardSite();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gapSite", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gapSite")]
        public GapSite GapSite
        {
            get
            {
                return _gapSite;
            }
            set
            {
                _gapSite = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("interPatchSite", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="interPatchSite")]
        public InterPatchSite InterPatchSite
        {
            get
            {
                return _interPatchSite;
            }
            set
            {
                _interPatchSite = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rewardSite", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardSite")]
        public RewardSite RewardSite
        {
            get
            {
                return _rewardSite;
            }
            set
            {
                _rewardSite = value;
            }
        }
    
        public System.IObservable<VirtualSiteGeneration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new VirtualSiteGeneration
                {
                    GapSite = _gapSite,
                    InterPatchSite = _interPatchSite,
                    RewardSite = _rewardSite
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TextureSize
    {
    
        private double _x = 40D;
    
        private double _y = 40D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="x")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="y")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        public System.IObservable<TextureSize> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new TextureSize
                {
                    X = _x,
                    Y = _y
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class StopResponseConfig
    {
    
        private double _frequencyFilterCutoff;
    
        private double _velocityThreshold;
    
        [Newtonsoft.Json.JsonPropertyAttribute("frequencyFilterCutoff")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frequencyFilterCutoff")]
        public double FrequencyFilterCutoff
        {
            get
            {
                return _frequencyFilterCutoff;
            }
            set
            {
                _frequencyFilterCutoff = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("velocityThreshold")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="velocityThreshold")]
        public double VelocityThreshold
        {
            get
            {
                return _velocityThreshold;
            }
            set
            {
                _velocityThreshold = value;
            }
        }
    
        public System.IObservable<StopResponseConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new StopResponseConfig
                {
                    FrequencyFilterCutoff = _frequencyFilterCutoff,
                    VelocityThreshold = _velocityThreshold
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class GapSite
    {
    
        private double? _brightness;
    
        private SiteLabel _label = AindVrForagingDataSchema.SiteLabel.Gap;
    
        private TruncatedExponential _lengthDistribution;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("brightness")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="brightness")]
        public double? Brightness
        {
            get
            {
                return _brightness;
            }
            set
            {
                _brightness = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        public SiteLabel Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lengthDistribution")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lengthDistribution")]
        public TruncatedExponential LengthDistribution
        {
            get
            {
                return _lengthDistribution;
            }
            set
            {
                _lengthDistribution = value;
            }
        }
    
        public System.IObservable<GapSite> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new GapSite
                {
                    Brightness = _brightness,
                    Label = _label,
                    LengthDistribution = _lengthDistribution
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class InterPatchSite
    {
    
        private double? _brightness;
    
        private SiteLabel _label = AindVrForagingDataSchema.SiteLabel.InterPatch;
    
        private TruncatedExponential _lengthDistribution;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("brightness")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="brightness")]
        public double? Brightness
        {
            get
            {
                return _brightness;
            }
            set
            {
                _brightness = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        public SiteLabel Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lengthDistribution")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lengthDistribution")]
        public TruncatedExponential LengthDistribution
        {
            get
            {
                return _lengthDistribution;
            }
            set
            {
                _lengthDistribution = value;
            }
        }
    
        public System.IObservable<InterPatchSite> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new InterPatchSite
                {
                    Brightness = _brightness,
                    Label = _label,
                    LengthDistribution = _lengthDistribution
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardSite
    {
    
        private double? _brightness;
    
        private SiteLabel _label = AindVrForagingDataSchema.SiteLabel.Reward;
    
        private TruncatedExponential _lengthDistribution;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("brightness")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="brightness")]
        public double? Brightness
        {
            get
            {
                return _brightness;
            }
            set
            {
                _brightness = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        public SiteLabel Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lengthDistribution")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lengthDistribution")]
        public TruncatedExponential LengthDistribution
        {
            get
            {
                return _lengthDistribution;
            }
            set
            {
                _lengthDistribution = value;
            }
        }
    
        public System.IObservable<RewardSite> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new RewardSite
                {
                    Brightness = _brightness,
                    Label = _label,
                    LengthDistribution = _lengthDistribution
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<CorridorSpecifications> source)
        {
            return Process<CorridorSpecifications>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSite> source)
        {
            return Process<VirtualSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reward> source)
        {
            return Process<Reward>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchStatistics> source)
        {
            return Process<PatchStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Matrix2d> source)
        {
            return Process<Matrix2d>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoCaptureDevice> source)
        {
            return Process<VideoCaptureDevice>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBoard> source)
        {
            return Process<HarpBoard>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RenderingSettings> source)
        {
            return Process<RenderingSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PwmBuzzer> source)
        {
            return Process<PwmBuzzer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Treadmill> source)
        {
            return Process<Treadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valve> source)
        {
            return Process<Valve>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Vector3> source)
        {
            return Process<Vector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncatedExponential> source)
        {
            return Process<TruncatedExponential>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingSession> source)
        {
            return Process<AindVrForagingSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Textures> source)
        {
            return Process<Textures>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Odor> source)
        {
            return Process<Odor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Render> source)
        {
            return Process<Render>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperantLogic> source)
        {
            return Process<OperantLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Calibration> source)
        {
            return Process<Calibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EnvironmentStatistics> source)
        {
            return Process<EnvironmentStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Hardware> source)
        {
            return Process<Hardware>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TaskLogicControl> source)
        {
            return Process<TaskLogicControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Floor> source)
        {
            return Process<Floor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valves> source)
        {
            return Process<Valves>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorControl> source)
        {
            return Process<OdorControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PositionControl> source)
        {
            return Process<PositionControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HabituationSettings> source)
        {
            return Process<HabituationSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSiteGeneration> source)
        {
            return Process<VirtualSiteGeneration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TextureSize> source)
        {
            return Process<TextureSize>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StopResponseConfig> source)
        {
            return Process<StopResponseConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GapSite> source)
        {
            return Process<GapSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<InterPatchSite> source)
        {
            return Process<InterPatchSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSite> source)
        {
            return Process<RewardSite>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CorridorSpecifications>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reward>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Matrix2d>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoCaptureDevice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBoard>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RenderingSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PwmBuzzer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Treadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valve>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Vector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncatedExponential>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Textures>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Odor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Render>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperantLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Calibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EnvironmentStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Hardware>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TaskLogicControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Floor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valves>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PositionControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HabituationSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSiteGeneration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TextureSize>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StopResponseConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GapSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<InterPatchSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSite>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<CorridorSpecifications> source)
        {
            return Process<CorridorSpecifications>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSite> source)
        {
            return Process<VirtualSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reward> source)
        {
            return Process<Reward>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchStatistics> source)
        {
            return Process<PatchStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Matrix2d> source)
        {
            return Process<Matrix2d>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoCaptureDevice> source)
        {
            return Process<VideoCaptureDevice>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBoard> source)
        {
            return Process<HarpBoard>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RenderingSettings> source)
        {
            return Process<RenderingSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PwmBuzzer> source)
        {
            return Process<PwmBuzzer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Treadmill> source)
        {
            return Process<Treadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valve> source)
        {
            return Process<Valve>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Vector3> source)
        {
            return Process<Vector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncatedExponential> source)
        {
            return Process<TruncatedExponential>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingSession> source)
        {
            return Process<AindVrForagingSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Textures> source)
        {
            return Process<Textures>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Odor> source)
        {
            return Process<Odor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Render> source)
        {
            return Process<Render>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperantLogic> source)
        {
            return Process<OperantLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Calibration> source)
        {
            return Process<Calibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EnvironmentStatistics> source)
        {
            return Process<EnvironmentStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Hardware> source)
        {
            return Process<Hardware>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TaskLogicControl> source)
        {
            return Process<TaskLogicControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Floor> source)
        {
            return Process<Floor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valves> source)
        {
            return Process<Valves>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorControl> source)
        {
            return Process<OdorControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PositionControl> source)
        {
            return Process<PositionControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HabituationSettings> source)
        {
            return Process<HabituationSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSiteGeneration> source)
        {
            return Process<VirtualSiteGeneration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TextureSize> source)
        {
            return Process<TextureSize>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StopResponseConfig> source)
        {
            return Process<StopResponseConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GapSite> source)
        {
            return Process<GapSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<InterPatchSite> source)
        {
            return Process<InterPatchSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSite> source)
        {
            return Process<RewardSite>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CorridorSpecifications>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reward>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Matrix2d>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoCaptureDevice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBoard>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RenderingSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PwmBuzzer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Treadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valve>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Vector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncatedExponential>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Textures>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Odor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Render>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperantLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Calibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EnvironmentStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Hardware>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TaskLogicControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Floor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valves>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PositionControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HabituationSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSiteGeneration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TextureSize>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StopResponseConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GapSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<InterPatchSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSite>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}