//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema.Rig
{
    #pragma warning disable // Disable all warnings

    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VideoCaptureDevice
    {
    
        private int _index = 0;
    
        [Newtonsoft.Json.JsonPropertyAttribute("index")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        public System.IObservable<VideoCaptureDevice> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new VideoCaptureDevice
                {
                    Index = _index
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpBoard
    {
    
        private HarpBoardDeviceType _deviceType;
    
        private string _portName;
    
        private string _serialNumber;
    
        private string _deviceName;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("deviceType", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="deviceType")]
        public HarpBoardDeviceType DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("portName", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="portName")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("serialNumber")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serialNumber")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("deviceName")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="deviceName")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        public System.IObservable<HarpBoard> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new HarpBoard
                {
                    DeviceType = _deviceType,
                    PortName = _portName,
                    SerialNumber = _serialNumber,
                    DeviceName = _deviceName
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SpinnakerCamera
    {
    
        private int _binning = 1;
    
        private SpinnakerCameraColorProcessing _colorProcessing = AindVrForagingDataSchema.Rig.SpinnakerCameraColorProcessing.Default;
    
        private int _exposure = 1000;
    
        private int _frameRate = 30;
    
        private double _gain = 0D;
    
        private string _serialNumber;
    
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="binning")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("colorProcessing")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="colorProcessing")]
        public SpinnakerCameraColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposure")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("frameRate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frameRate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("serialNumber", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serialNumber")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        public System.IObservable<SpinnakerCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new SpinnakerCamera
                {
                    Binning = _binning,
                    ColorProcessing = _colorProcessing,
                    Exposure = _exposure,
                    FrameRate = _frameRate,
                    Gain = _gain,
                    SerialNumber = _serialNumber
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RenderingSettings
    {
    
        private string _monitorCalibrationDirectory = "Calibration\\Monitors\\";
    
        private string _textureAssetDirectory = "Textures";
    
        [Newtonsoft.Json.JsonPropertyAttribute("monitorCalibrationDirectory")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="monitorCalibrationDirectory")]
        public string MonitorCalibrationDirectory
        {
            get
            {
                return _monitorCalibrationDirectory;
            }
            set
            {
                _monitorCalibrationDirectory = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("textureAssetDirectory")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="textureAssetDirectory")]
        public string TextureAssetDirectory
        {
            get
            {
                return _textureAssetDirectory;
            }
            set
            {
                _textureAssetDirectory = value;
            }
        }
    
        public System.IObservable<RenderingSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new RenderingSettings
                {
                    MonitorCalibrationDirectory = _monitorCalibrationDirectory,
                    TextureAssetDirectory = _textureAssetDirectory
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Display
    {
    
        private int _displayDevice = 1;
    
        private int _targetRenderFrequency = 60;
    
        private int _targetUpdateFrequency = 120;
    
        [Newtonsoft.Json.JsonPropertyAttribute("displayDevice")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="displayDevice")]
        public int DisplayDevice
        {
            get
            {
                return _displayDevice;
            }
            set
            {
                _displayDevice = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("targetRenderFrequency")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targetRenderFrequency")]
        public int TargetRenderFrequency
        {
            get
            {
                return _targetRenderFrequency;
            }
            set
            {
                _targetRenderFrequency = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("targetUpdateFrequency")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targetUpdateFrequency")]
        public int TargetUpdateFrequency
        {
            get
            {
                return _targetUpdateFrequency;
            }
            set
            {
                _targetUpdateFrequency = value;
            }
        }
    
        public System.IObservable<Display> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Display
                {
                    DisplayDevice = _displayDevice,
                    TargetRenderFrequency = _targetRenderFrequency,
                    TargetUpdateFrequency = _targetUpdateFrequency
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PwmBuzzer
    {
    
        private string _model = "buzzer";
    
        private string _pin = "DO1";
    
        private double _pwmDefaultPulseDuration = 0.2D;
    
        private double _pwmFrequency = 1000D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("model")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="model")]
        public string Model
        {
            get
            {
                return _model;
            }
            set
            {
                _model = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pin")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pin")]
        public string Pin
        {
            get
            {
                return _pin;
            }
            set
            {
                _pin = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pwmDefaultPulseDuration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pwmDefaultPulseDuration")]
        public double PwmDefaultPulseDuration
        {
            get
            {
                return _pwmDefaultPulseDuration;
            }
            set
            {
                _pwmDefaultPulseDuration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pwmFrequency")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pwmFrequency")]
        public double PwmFrequency
        {
            get
            {
                return _pwmFrequency;
            }
            set
            {
                _pwmFrequency = value;
            }
        }
    
        public System.IObservable<PwmBuzzer> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PwmBuzzer
                {
                    Model = _model,
                    Pin = _pin,
                    PwmDefaultPulseDuration = _pwmDefaultPulseDuration,
                    PwmFrequency = _pwmFrequency
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Treadmill
    {
    
        private string _model = "headfix";
    
        private double _wheelDiameter = 15D;
    
        private double _pulsesPerRevolution = 2880D;
    
        private bool _invertDirection = false;
    
        [Newtonsoft.Json.JsonPropertyAttribute("model")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="model")]
        public string Model
        {
            get
            {
                return _model;
            }
            set
            {
                _model = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("wheelDiameter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="wheelDiameter")]
        public double WheelDiameter
        {
            get
            {
                return _wheelDiameter;
            }
            set
            {
                _wheelDiameter = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulsesPerRevolution")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulsesPerRevolution")]
        public double PulsesPerRevolution
        {
            get
            {
                return _pulsesPerRevolution;
            }
            set
            {
                _pulsesPerRevolution = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("invertDirection")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="invertDirection")]
        public bool InvertDirection
        {
            get
            {
                return _invertDirection;
            }
            set
            {
                _invertDirection = value;
            }
        }
    
        public System.IObservable<Treadmill> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Treadmill
                {
                    Model = _model,
                    WheelDiameter = _wheelDiameter,
                    PulsesPerRevolution = _pulsesPerRevolution,
                    InvertDirection = _invertDirection
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Valve
    {
    
        private Calibration _calibration;
    
        private string _model = "valve";
    
        private string _pin = "SupplyPort0";
    
        private string _valveType = "air";
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration")]
        public Calibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("model")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="model")]
        public string Model
        {
            get
            {
                return _model;
            }
            set
            {
                _model = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pin")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pin")]
        public string Pin
        {
            get
            {
                return _pin;
            }
            set
            {
                _pin = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("valveType")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valveType")]
        public string ValveType
        {
            get
            {
                return _valveType;
            }
            set
            {
                _valveType = value;
            }
        }
    
        public System.IObservable<Valve> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Valve
                {
                    Calibration = _calibration,
                    Model = _model,
                    Pin = _pin,
                    ValveType = _valveType
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ServoMotor
    {
    
        private string _model = "servoMotor";
    
        private string _pin = "DO2";
    
        private int _period = 20000;
    
        private int _pulseDurationUsMin = 1000;
    
        private int _pulseDurationUsMax = 2000;
    
        private int _pulseDurationUsDefault = 2000;
    
        [Newtonsoft.Json.JsonPropertyAttribute("model")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="model")]
        public string Model
        {
            get
            {
                return _model;
            }
            set
            {
                _model = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pin")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pin")]
        public string Pin
        {
            get
            {
                return _pin;
            }
            set
            {
                _pin = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("period")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="period")]
        public int Period
        {
            get
            {
                return _period;
            }
            set
            {
                _period = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulseDurationUsMin")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulseDurationUsMin")]
        public int PulseDurationUsMin
        {
            get
            {
                return _pulseDurationUsMin;
            }
            set
            {
                _pulseDurationUsMin = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulseDurationUsMax")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulseDurationUsMax")]
        public int PulseDurationUsMax
        {
            get
            {
                return _pulseDurationUsMax;
            }
            set
            {
                _pulseDurationUsMax = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("pulseDurationUsDefault")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulseDurationUsDefault")]
        public int PulseDurationUsDefault
        {
            get
            {
                return _pulseDurationUsDefault;
            }
            set
            {
                _pulseDurationUsDefault = value;
            }
        }
    
        public System.IObservable<ServoMotor> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ServoMotor
                {
                    Model = _model,
                    Pin = _pin,
                    Period = _period,
                    PulseDurationUsMin = _pulseDurationUsMin,
                    PulseDurationUsMax = _pulseDurationUsMax,
                    PulseDurationUsDefault = _pulseDurationUsDefault
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingRig
    {
    
        private VideoCaptureDevice _auxiliaryCamera0;
    
        private VideoCaptureDevice _auxiliaryCamera1;
    
        private HarpBoard _harpBehavior = new HarpBoard();
    
        private HarpBoard _harpOlfactometer = new HarpBoard();
    
        private HarpBoard _harpLickometer = new HarpBoard();
    
        private HarpBoard _harpSynchronizer = new HarpBoard();
    
        private HarpBoard _harpAnalogInput;
    
        private SpinnakerCamera _faceCamera = new SpinnakerCamera();
    
        private SpinnakerCamera _topBodyCamera;
    
        private SpinnakerCamera _sideBodyCamera;
    
        private Graphics _graphics = new Graphics();
    
        private PwmBuzzer _speaker = new PwmBuzzer();
    
        private Treadmill _treadmill = new Treadmill();
    
        private Valves _valves = new Valves();
    
        private ServoMotor _movableSpout = new ServoMotor();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("auxiliaryCamera0")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="auxiliaryCamera0")]
        public VideoCaptureDevice AuxiliaryCamera0
        {
            get
            {
                return _auxiliaryCamera0;
            }
            set
            {
                _auxiliaryCamera0 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("auxiliaryCamera1")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="auxiliaryCamera1")]
        public VideoCaptureDevice AuxiliaryCamera1
        {
            get
            {
                return _auxiliaryCamera1;
            }
            set
            {
                _auxiliaryCamera1 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpBehavior", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpBehavior")]
        public HarpBoard HarpBehavior
        {
            get
            {
                return _harpBehavior;
            }
            set
            {
                _harpBehavior = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpOlfactometer", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpOlfactometer")]
        public HarpBoard HarpOlfactometer
        {
            get
            {
                return _harpOlfactometer;
            }
            set
            {
                _harpOlfactometer = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpLickometer", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpLickometer")]
        public HarpBoard HarpLickometer
        {
            get
            {
                return _harpLickometer;
            }
            set
            {
                _harpLickometer = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpSynchronizer", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpSynchronizer")]
        public HarpBoard HarpSynchronizer
        {
            get
            {
                return _harpSynchronizer;
            }
            set
            {
                _harpSynchronizer = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpAnalogInput")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpAnalogInput")]
        public HarpBoard HarpAnalogInput
        {
            get
            {
                return _harpAnalogInput;
            }
            set
            {
                _harpAnalogInput = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("faceCamera", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="faceCamera")]
        public SpinnakerCamera FaceCamera
        {
            get
            {
                return _faceCamera;
            }
            set
            {
                _faceCamera = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("topBodyCamera")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="topBodyCamera")]
        public SpinnakerCamera TopBodyCamera
        {
            get
            {
                return _topBodyCamera;
            }
            set
            {
                _topBodyCamera = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sideBodyCamera")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sideBodyCamera")]
        public SpinnakerCamera SideBodyCamera
        {
            get
            {
                return _sideBodyCamera;
            }
            set
            {
                _sideBodyCamera = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("graphics", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="graphics")]
        public Graphics Graphics
        {
            get
            {
                return _graphics;
            }
            set
            {
                _graphics = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("speaker", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="speaker")]
        public PwmBuzzer Speaker
        {
            get
            {
                return _speaker;
            }
            set
            {
                _speaker = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("treadmill", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="treadmill")]
        public Treadmill Treadmill
        {
            get
            {
                return _treadmill;
            }
            set
            {
                _treadmill = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("valves", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valves")]
        public Valves Valves
        {
            get
            {
                return _valves;
            }
            set
            {
                _valves = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("movableSpout", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="movableSpout")]
        public ServoMotor MovableSpout
        {
            get
            {
                return _movableSpout;
            }
            set
            {
                _movableSpout = value;
            }
        }
    
        public System.IObservable<AindVrForagingRig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new AindVrForagingRig
                {
                    AuxiliaryCamera0 = _auxiliaryCamera0,
                    AuxiliaryCamera1 = _auxiliaryCamera1,
                    HarpBehavior = _harpBehavior,
                    HarpOlfactometer = _harpOlfactometer,
                    HarpLickometer = _harpLickometer,
                    HarpSynchronizer = _harpSynchronizer,
                    HarpAnalogInput = _harpAnalogInput,
                    FaceCamera = _faceCamera,
                    TopBodyCamera = _topBodyCamera,
                    SideBodyCamera = _sideBodyCamera,
                    Graphics = _graphics,
                    Speaker = _speaker,
                    Treadmill = _treadmill,
                    Valves = _valves,
                    MovableSpout = _movableSpout
                }));
        }
    }


    public enum HarpBoardDeviceType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="custom")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="custom")]
        Custom = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="behavior")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior")]
        Behavior = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="clockSynchronizer")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="clockSynchronizer")]
        ClockSynchronizer = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="lickometer")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lickometer")]
        Lickometer = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="olfactometer")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="olfactometer")]
        Olfactometer = 4,
    }


    public enum SpinnakerCameraColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Calibration
    {
    
        private double _intercept = 0D;
    
        private double _slope = 1D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("intercept")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="intercept")]
        public double Intercept
        {
            get
            {
                return _intercept;
            }
            set
            {
                _intercept = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("slope")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="slope")]
        public double Slope
        {
            get
            {
                return _slope;
            }
            set
            {
                _slope = value;
            }
        }
    
        public System.IObservable<Calibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Calibration
                {
                    Intercept = _intercept,
                    Slope = _slope
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Graphics
    {
    
        private RenderingSettings _render;
    
        private Display _display;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("render")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="render")]
        public RenderingSettings Render
        {
            get
            {
                return _render;
            }
            set
            {
                _render = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("display")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="display")]
        public Display Display
        {
            get
            {
                return _display;
            }
            set
            {
                _display = value;
            }
        }
    
        public System.IObservable<Graphics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Graphics
                {
                    Render = _render,
                    Display = _display
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Valves
    {
    
        private Valve _water = new Valve();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="water")]
        public Valve Water
        {
            get
            {
                return _water;
            }
            set
            {
                _water = value;
            }
        }
    
        public System.IObservable<Valves> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Valves
                {
                    Water = _water
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<VideoCaptureDevice> source)
        {
            return Process<VideoCaptureDevice>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBoard> source)
        {
            return Process<HarpBoard>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RenderingSettings> source)
        {
            return Process<RenderingSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Display> source)
        {
            return Process<Display>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PwmBuzzer> source)
        {
            return Process<PwmBuzzer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Treadmill> source)
        {
            return Process<Treadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valve> source)
        {
            return Process<Valve>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ServoMotor> source)
        {
            return Process<ServoMotor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingRig> source)
        {
            return Process<AindVrForagingRig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Calibration> source)
        {
            return Process<Calibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Graphics> source)
        {
            return Process<Graphics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valves> source)
        {
            return Process<Valves>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoCaptureDevice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBoard>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RenderingSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Display>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PwmBuzzer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Treadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valve>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ServoMotor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingRig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Calibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Graphics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valves>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<VideoCaptureDevice> source)
        {
            return Process<VideoCaptureDevice>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBoard> source)
        {
            return Process<HarpBoard>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RenderingSettings> source)
        {
            return Process<RenderingSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Display> source)
        {
            return Process<Display>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PwmBuzzer> source)
        {
            return Process<PwmBuzzer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Treadmill> source)
        {
            return Process<Treadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valve> source)
        {
            return Process<Valve>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ServoMotor> source)
        {
            return Process<ServoMotor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingRig> source)
        {
            return Process<AindVrForagingRig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Calibration> source)
        {
            return Process<Calibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Graphics> source)
        {
            return Process<Graphics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valves> source)
        {
            return Process<Valves>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoCaptureDevice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBoard>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RenderingSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Display>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PwmBuzzer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Treadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valve>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ServoMotor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingRig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Calibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Graphics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valves>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}