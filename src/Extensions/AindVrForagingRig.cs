//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema.Rig
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Additional settings for the manipulator device
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Additional settings for the manipulator device")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindManipulatorAdditionalSettings
    {
    
        private Axis _spoutAxis = AindVrForagingDataSchema.Rig.Axis.Y1;
    
        public AindManipulatorAdditionalSettings()
        {
        }
    
        protected AindManipulatorAdditionalSettings(AindManipulatorAdditionalSettings other)
        {
            _spoutAxis = other._spoutAxis;
        }
    
        /// <summary>
        /// Spout axis
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("spout_axis")]
        [System.ComponentModel.DescriptionAttribute("Spout axis")]
        public Axis SpoutAxis
        {
            get
            {
                return _spoutAxis;
            }
            set
            {
                _spoutAxis = value;
            }
        }
    
        public System.IObservable<AindManipulatorAdditionalSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorAdditionalSettings(this)));
        }
    
        public System.IObservable<AindManipulatorAdditionalSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorAdditionalSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("spout_axis = " + _spoutAxis);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Aind manipulator calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Aind manipulator calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindManipulatorCalibration
    {
    
        private string _deviceName = "AindManipulator";
    
        private AindManipulatorCalibrationInput _input = new AindManipulatorCalibrationInput();
    
        private AindManipulatorCalibrationOutput _output = new AindManipulatorCalibrationOutput();
    
        private System.DateTimeOffset? _date;
    
        private string _description = "Calibration of the load cells system";
    
        private string _notes;
    
        public AindManipulatorCalibration()
        {
        }
    
        protected AindManipulatorCalibration(AindManipulatorCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public AindManipulatorCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public AindManipulatorCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<AindManipulatorCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorCalibration(this)));
        }
    
        public System.IObservable<AindManipulatorCalibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_name = " + _deviceName + ", ");
            stringBuilder.Append("input = " + _input + ", ");
            stringBuilder.Append("output = " + _output + ", ");
            stringBuilder.Append("date = " + _date + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindManipulatorCalibrationInput
    {
    
        private ManipulatorPosition _fullStepToMm;
    
        private System.Collections.Generic.List<AxisConfiguration> _axisConfiguration = new System.Collections.Generic.List<AxisConfiguration>();
    
        private System.Collections.Generic.List<Axis> _homingOrder = new System.Collections.Generic.List<Axis>();
    
        private ManipulatorPosition _initialPosition;
    
        public AindManipulatorCalibrationInput()
        {
        }
    
        protected AindManipulatorCalibrationInput(AindManipulatorCalibrationInput other)
        {
            _fullStepToMm = other._fullStepToMm;
            _axisConfiguration = other._axisConfiguration;
            _homingOrder = other._homingOrder;
            _initialPosition = other._initialPosition;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("full_step_to_mm")]
        public ManipulatorPosition FullStepToMm
        {
            get
            {
                return _fullStepToMm;
            }
            set
            {
                _fullStepToMm = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("axis_configuration")]
        public System.Collections.Generic.List<AxisConfiguration> AxisConfiguration
        {
            get
            {
                return _axisConfiguration;
            }
            set
            {
                _axisConfiguration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("homing_order")]
        public System.Collections.Generic.List<Axis> HomingOrder
        {
            get
            {
                return _homingOrder;
            }
            set
            {
                _homingOrder = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("initial_position")]
        public ManipulatorPosition InitialPosition
        {
            get
            {
                return _initialPosition;
            }
            set
            {
                _initialPosition = value;
            }
        }
    
        public System.IObservable<AindManipulatorCalibrationInput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorCalibrationInput(this)));
        }
    
        public System.IObservable<AindManipulatorCalibrationInput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("full_step_to_mm = " + _fullStepToMm + ", ");
            stringBuilder.Append("axis_configuration = " + _axisConfiguration + ", ");
            stringBuilder.Append("homing_order = " + _homingOrder + ", ");
            stringBuilder.Append("initial_position = " + _initialPosition);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindManipulatorCalibrationOutput
    {
    
        public AindManipulatorCalibrationOutput()
        {
        }
    
        protected AindManipulatorCalibrationOutput(AindManipulatorCalibrationOutput other)
        {
        }
    
        public System.IObservable<AindManipulatorCalibrationOutput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorCalibrationOutput(this)));
        }
    
        public System.IObservable<AindManipulatorCalibrationOutput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Overrides the default settings for the manipulator device by spec'ing additional_settings field
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Overrides the default settings for the manipulator device by spec\'ing additional_" +
        "settings field")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindManipulatorDevice
    {
    
        private string _deviceType = "StepperDriver";
    
        private AindManipulatorAdditionalSettings _additionalSettings;
    
        private AindManipulatorCalibration _calibration;
    
        private int _whoAmI = 1130;
    
        private string _serialNumber;
    
        private string _portName;
    
        public AindManipulatorDevice()
        {
        }
    
        protected AindManipulatorDevice(AindManipulatorDevice other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public AindManipulatorAdditionalSettings AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        public AindManipulatorCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<AindManipulatorDevice> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorDevice(this)));
        }
    
        public System.IObservable<AindManipulatorDevice> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorDevice(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Motor axis available
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum Axis
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        X = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Y1 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Y2 = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
        Z = 4,
    }


    /// <summary>
    /// Axis configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Axis configuration")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AxisConfiguration
    {
    
        private Axis _axis;
    
        private int _stepAccelerationInterval = 100;
    
        private int _stepInterval = 100;
    
        private MicrostepResolution _microstepResolution = AindVrForagingDataSchema.Rig.MicrostepResolution.Microstep8;
    
        private int _maximumStepInterval = 2000;
    
        private MotorOperationMode _motorOperationMode = AindVrForagingDataSchema.Rig.MotorOperationMode.Quiet;
    
        private double _maxLimit = 25D;
    
        private double _minLimit = -0.01D;
    
        public AxisConfiguration()
        {
        }
    
        protected AxisConfiguration(AxisConfiguration other)
        {
            _axis = other._axis;
            _stepAccelerationInterval = other._stepAccelerationInterval;
            _stepInterval = other._stepInterval;
            _microstepResolution = other._microstepResolution;
            _maximumStepInterval = other._maximumStepInterval;
            _motorOperationMode = other._motorOperationMode;
            _maxLimit = other._maxLimit;
            _minLimit = other._minLimit;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("axis", Required=Newtonsoft.Json.Required.Always)]
        public Axis Axis
        {
            get
            {
                return _axis;
            }
            set
            {
                _axis = value;
            }
        }
    
        /// <summary>
        /// Acceleration of the step interval in microseconds
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("step_acceleration_interval")]
        [System.ComponentModel.DescriptionAttribute("Acceleration of the step interval in microseconds")]
        public int StepAccelerationInterval
        {
            get
            {
                return _stepAccelerationInterval;
            }
            set
            {
                _stepAccelerationInterval = value;
            }
        }
    
        /// <summary>
        /// Step interval in microseconds.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("step_interval")]
        [System.ComponentModel.DescriptionAttribute("Step interval in microseconds.")]
        public int StepInterval
        {
            get
            {
                return _stepInterval;
            }
            set
            {
                _stepInterval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("microstep_resolution")]
        public MicrostepResolution MicrostepResolution
        {
            get
            {
                return _microstepResolution;
            }
            set
            {
                _microstepResolution = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("maximum_step_interval")]
        public int MaximumStepInterval
        {
            get
            {
                return _maximumStepInterval;
            }
            set
            {
                _maximumStepInterval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("motor_operation_mode")]
        public MotorOperationMode MotorOperationMode
        {
            get
            {
                return _motorOperationMode;
            }
            set
            {
                _motorOperationMode = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("max_limit")]
        public double MaxLimit
        {
            get
            {
                return _maxLimit;
            }
            set
            {
                _maxLimit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("min_limit")]
        public double MinLimit
        {
            get
            {
                return _minLimit;
            }
            set
            {
                _minLimit = value;
            }
        }
    
        public System.IObservable<AxisConfiguration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AxisConfiguration(this)));
        }
    
        public System.IObservable<AxisConfiguration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AxisConfiguration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("axis = " + _axis + ", ");
            stringBuilder.Append("step_acceleration_interval = " + _stepAccelerationInterval + ", ");
            stringBuilder.Append("step_interval = " + _stepInterval + ", ");
            stringBuilder.Append("microstep_resolution = " + _microstepResolution + ", ");
            stringBuilder.Append("maximum_step_interval = " + _maximumStepInterval + ", ");
            stringBuilder.Append("motor_operation_mode = " + _motorOperationMode + ", ");
            stringBuilder.Append("max_limit = " + _maxLimit + ", ");
            stringBuilder.Append("min_limit = " + _minLimit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BaseModel
    {
    
        public BaseModel()
        {
        }
    
        protected BaseModel(BaseModel other)
        {
        }
    
        public System.IObservable<BaseModel> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BaseModel(this)));
        }
    
        public System.IObservable<BaseModel> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BaseModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CameraControllerSpinnakerCamera
    {
    
        private string _deviceType = "CameraController";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private System.Collections.Generic.IDictionary<string, SpinnakerCamera> _cameras = new System.Collections.Generic.Dictionary<string, SpinnakerCamera>();
    
        private int? _frameRate;
    
        public CameraControllerSpinnakerCamera()
        {
        }
    
        protected CameraControllerSpinnakerCamera(CameraControllerSpinnakerCamera other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _cameras = other._cameras;
            _frameRate = other._frameRate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Cameras to be instantiated
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cameras", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Cameras to be instantiated")]
        public System.Collections.Generic.IDictionary<string, SpinnakerCamera> Cameras
        {
            get
            {
                return _cameras;
            }
            set
            {
                _cameras = value;
            }
        }
    
        /// <summary>
        /// Frame rate of the trigger to all cameras
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Frame rate of the trigger to all cameras")]
        public int? FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        public System.IObservable<CameraControllerSpinnakerCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraControllerSpinnakerCamera(this)));
        }
    
        public System.IObservable<CameraControllerSpinnakerCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraControllerSpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("cameras = " + _cameras + ", ");
            stringBuilder.Append("frame_rate = " + _frameRate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CameraControllerWebCamera
    {
    
        private string _deviceType = "CameraController";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private System.Collections.Generic.IDictionary<string, WebCamera> _cameras = new System.Collections.Generic.Dictionary<string, WebCamera>();
    
        private int? _frameRate;
    
        public CameraControllerWebCamera()
        {
        }
    
        protected CameraControllerWebCamera(CameraControllerWebCamera other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _cameras = other._cameras;
            _frameRate = other._frameRate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Cameras to be instantiated
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cameras", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Cameras to be instantiated")]
        public System.Collections.Generic.IDictionary<string, WebCamera> Cameras
        {
            get
            {
                return _cameras;
            }
            set
            {
                _cameras = value;
            }
        }
    
        /// <summary>
        /// Frame rate of the trigger to all cameras
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Frame rate of the trigger to all cameras")]
        public int? FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        public System.IObservable<CameraControllerWebCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraControllerWebCamera(this)));
        }
    
        public System.IObservable<CameraControllerWebCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraControllerWebCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("cameras = " + _cameras + ", ");
            stringBuilder.Append("frame_rate = " + _frameRate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ConnectedClockOutput
    {
    
        private string _targetDevice;
    
        private int _outputChannel;
    
        public ConnectedClockOutput()
        {
        }
    
        protected ConnectedClockOutput(ConnectedClockOutput other)
        {
            _targetDevice = other._targetDevice;
            _outputChannel = other._outputChannel;
        }
    
        /// <summary>
        /// Optional device name to provide user additional information
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_device")]
        [System.ComponentModel.DescriptionAttribute("Optional device name to provide user additional information")]
        public string TargetDevice
        {
            get
            {
                return _targetDevice;
            }
            set
            {
                _targetDevice = value;
            }
        }
    
        /// <summary>
        /// Output channel
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output_channel", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Output channel")]
        public int OutputChannel
        {
            get
            {
                return _outputChannel;
            }
            set
            {
                _outputChannel = value;
            }
        }
    
        public System.IObservable<ConnectedClockOutput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ConnectedClockOutput(this)));
        }
    
        public System.IObservable<ConnectedClockOutput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ConnectedClockOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("target_device = " + _targetDevice + ", ");
            stringBuilder.Append("output_channel = " + _outputChannel);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DisplayCalibration
    {
    
        private DisplayIntrinsics _intrinsics;
    
        private DisplayExtrinsics _extrinsics;
    
        public DisplayCalibration()
        {
        }
    
        protected DisplayCalibration(DisplayCalibration other)
        {
            _intrinsics = other._intrinsics;
            _extrinsics = other._extrinsics;
        }
    
        /// <summary>
        /// Intrinsics
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("intrinsics")]
        [System.ComponentModel.DescriptionAttribute("Intrinsics")]
        public DisplayIntrinsics Intrinsics
        {
            get
            {
                return _intrinsics;
            }
            set
            {
                _intrinsics = value;
            }
        }
    
        /// <summary>
        /// Extrinsics
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("extrinsics")]
        [System.ComponentModel.DescriptionAttribute("Extrinsics")]
        public DisplayExtrinsics Extrinsics
        {
            get
            {
                return _extrinsics;
            }
            set
            {
                _extrinsics = value;
            }
        }
    
        public System.IObservable<DisplayCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DisplayCalibration(this)));
        }
    
        public System.IObservable<DisplayCalibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DisplayCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("intrinsics = " + _intrinsics + ", ");
            stringBuilder.Append("extrinsics = " + _extrinsics);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DisplayExtrinsics
    {
    
        private Vector3 _rotation;
    
        private Vector3 _translation;
    
        public DisplayExtrinsics()
        {
        }
    
        protected DisplayExtrinsics(DisplayExtrinsics other)
        {
            _rotation = other._rotation;
            _translation = other._translation;
        }
    
        /// <summary>
        /// Rotation vector (radians)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rotation")]
        [System.ComponentModel.DescriptionAttribute("Rotation vector (radians)")]
        public Vector3 Rotation
        {
            get
            {
                return _rotation;
            }
            set
            {
                _rotation = value;
            }
        }
    
        /// <summary>
        /// Translation (in cm)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("translation")]
        [System.ComponentModel.DescriptionAttribute("Translation (in cm)")]
        public Vector3 Translation
        {
            get
            {
                return _translation;
            }
            set
            {
                _translation = value;
            }
        }
    
        public System.IObservable<DisplayExtrinsics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DisplayExtrinsics(this)));
        }
    
        public System.IObservable<DisplayExtrinsics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DisplayExtrinsics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("rotation = " + _rotation + ", ");
            stringBuilder.Append("translation = " + _translation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DisplayIntrinsics
    {
    
        private int _frameWidth = 1920;
    
        private int _frameHeight = 1080;
    
        private double _displayWidth = 20D;
    
        private double _displayHeight = 15D;
    
        public DisplayIntrinsics()
        {
        }
    
        protected DisplayIntrinsics(DisplayIntrinsics other)
        {
            _frameWidth = other._frameWidth;
            _frameHeight = other._frameHeight;
            _displayWidth = other._displayWidth;
            _displayHeight = other._displayHeight;
        }
    
        /// <summary>
        /// Frame width (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_width")]
        [System.ComponentModel.DescriptionAttribute("Frame width (px)")]
        public int FrameWidth
        {
            get
            {
                return _frameWidth;
            }
            set
            {
                _frameWidth = value;
            }
        }
    
        /// <summary>
        /// Frame height (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_height")]
        [System.ComponentModel.DescriptionAttribute("Frame height (px)")]
        public int FrameHeight
        {
            get
            {
                return _frameHeight;
            }
            set
            {
                _frameHeight = value;
            }
        }
    
        /// <summary>
        /// Display width (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("display_width")]
        [System.ComponentModel.DescriptionAttribute("Display width (cm)")]
        public double DisplayWidth
        {
            get
            {
                return _displayWidth;
            }
            set
            {
                _displayWidth = value;
            }
        }
    
        /// <summary>
        /// Display width (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("display_height")]
        [System.ComponentModel.DescriptionAttribute("Display width (cm)")]
        public double DisplayHeight
        {
            get
            {
                return _displayHeight;
            }
            set
            {
                _displayHeight = value;
            }
        }
    
        public System.IObservable<DisplayIntrinsics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DisplayIntrinsics(this)));
        }
    
        public System.IObservable<DisplayIntrinsics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DisplayIntrinsics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("frame_width = " + _frameWidth + ", ");
            stringBuilder.Append("frame_height = " + _frameHeight + ", ");
            stringBuilder.Append("display_width = " + _displayWidth + ", ");
            stringBuilder.Append("display_height = " + _displayHeight);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DisplaysCalibration
    {
    
        private DisplayCalibration _left;
    
        private DisplayCalibration _center;
    
        private DisplayCalibration _right;
    
        public DisplaysCalibration()
        {
        }
    
        protected DisplaysCalibration(DisplaysCalibration other)
        {
            _left = other._left;
            _center = other._center;
            _right = other._right;
        }
    
        /// <summary>
        /// Left display calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("left")]
        [System.ComponentModel.DescriptionAttribute("Left display calibration")]
        public DisplayCalibration Left
        {
            get
            {
                return _left;
            }
            set
            {
                _left = value;
            }
        }
    
        /// <summary>
        /// Center display calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("center")]
        [System.ComponentModel.DescriptionAttribute("Center display calibration")]
        public DisplayCalibration Center
        {
            get
            {
                return _center;
            }
            set
            {
                _center = value;
            }
        }
    
        /// <summary>
        /// Right display calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("right")]
        [System.ComponentModel.DescriptionAttribute("Right display calibration")]
        public DisplayCalibration Right
        {
            get
            {
                return _right;
            }
            set
            {
                _right = value;
            }
        }
    
        public System.IObservable<DisplaysCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DisplaysCalibration(this)));
        }
    
        public System.IObservable<DisplaysCalibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DisplaysCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("left = " + _left + ", ");
            stringBuilder.Append("center = " + _center + ", ");
            stringBuilder.Append("right = " + _right);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpAnalogInput
    {
    
        private string _deviceType = "AnalogInput";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1236;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpAnalogInput()
        {
        }
    
        protected HarpAnalogInput(HarpAnalogInput other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpAnalogInput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpAnalogInput(this)));
        }
    
        public System.IObservable<HarpAnalogInput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpAnalogInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpBehavior
    {
    
        private string _deviceType = "Behavior";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1216;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpBehavior()
        {
        }
    
        protected HarpBehavior(HarpBehavior other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpBehavior> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpBehavior(this)));
        }
    
        public System.IObservable<HarpBehavior> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpBehavior(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpEnvironmentSensor
    {
    
        private string _deviceType = "EnvironmentSensor";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1405;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpEnvironmentSensor()
        {
        }
    
        protected HarpEnvironmentSensor(HarpEnvironmentSensor other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpEnvironmentSensor> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpEnvironmentSensor(this)));
        }
    
        public System.IObservable<HarpEnvironmentSensor> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpEnvironmentSensor(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpLicketySplit
    {
    
        private string _deviceType = "LicketySplit";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1400;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpLicketySplit()
        {
        }
    
        protected HarpLicketySplit(HarpLicketySplit other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpLicketySplit> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpLicketySplit(this)));
        }
    
        public System.IObservable<HarpLicketySplit> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpLicketySplit(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Overrides the default settings for the olfactometer calibration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Overrides the default settings for the olfactometer calibration")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpOlfactometer
    {
    
        private string _deviceType = "Olfactometer";
    
        private BaseModel _additionalSettings;
    
        private OlfactometerCalibration _calibration = new OlfactometerCalibration();
    
        private int _whoAmI = 1140;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpOlfactometer()
        {
        }
    
        protected HarpOlfactometer(HarpOlfactometer other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Olfactometer calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Olfactometer calibration")]
        public OlfactometerCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpOlfactometer> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpOlfactometer(this)));
        }
    
        public System.IObservable<HarpOlfactometer> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpOlfactometer(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpSniffDetector
    {
    
        private string _deviceType = "SniffDetector";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1401;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpSniffDetector()
        {
        }
    
        protected HarpSniffDetector(HarpSniffDetector other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpSniffDetector> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpSniffDetector(this)));
        }
    
        public System.IObservable<HarpSniffDetector> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpSniffDetector(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpWhiteRabbit
    {
    
        private string _deviceType = "WhiteRabbit";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1404;
    
        private string _serialNumber;
    
        private string _portName;
    
        private System.Collections.Generic.List<ConnectedClockOutput> _connectedClockOutputs = new System.Collections.Generic.List<ConnectedClockOutput>();
    
        public HarpWhiteRabbit()
        {
        }
    
        protected HarpWhiteRabbit(HarpWhiteRabbit other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _connectedClockOutputs = other._connectedClockOutputs;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Connected clock outputs
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("connected_clock_outputs")]
        [System.ComponentModel.DescriptionAttribute("Connected clock outputs")]
        public System.Collections.Generic.List<ConnectedClockOutput> ConnectedClockOutputs
        {
            get
            {
                return _connectedClockOutputs;
            }
            set
            {
                _connectedClockOutputs = value;
            }
        }
    
        public System.IObservable<HarpWhiteRabbit> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpWhiteRabbit(this)));
        }
    
        public System.IObservable<HarpWhiteRabbit> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpWhiteRabbit(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName + ", ");
            stringBuilder.Append("connected_clock_outputs = " + _connectedClockOutputs);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ManipulatorPosition
    {
    
        private double _x;
    
        private double _y1;
    
        private double _y2;
    
        private double _z;
    
        public ManipulatorPosition()
        {
        }
    
        protected ManipulatorPosition(ManipulatorPosition other)
        {
            _x = other._x;
            _y1 = other._y1;
            _y2 = other._y2;
            _z = other._z;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("x", Required=Newtonsoft.Json.Required.Always)]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y1", Required=Newtonsoft.Json.Required.Always)]
        public double Y1
        {
            get
            {
                return _y1;
            }
            set
            {
                _y1 = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y2", Required=Newtonsoft.Json.Required.Always)]
        public double Y2
        {
            get
            {
                return _y2;
            }
            set
            {
                _y2 = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("z", Required=Newtonsoft.Json.Required.Always)]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<ManipulatorPosition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ManipulatorPosition(this)));
        }
    
        public System.IObservable<ManipulatorPosition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ManipulatorPosition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y1 = " + _y1 + ", ");
            stringBuilder.Append("y2 = " + _y2 + ", ");
            stringBuilder.Append("z = " + _z);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Input for water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Input for water valve calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Measurement
    {
    
        private double _valveOpenInterval;
    
        private double _valveOpenTime;
    
        private System.Collections.Generic.List<double> _waterWeight = new System.Collections.Generic.List<double>();
    
        private int _repeatCount;
    
        public Measurement()
        {
        }
    
        protected Measurement(Measurement other)
        {
            _valveOpenInterval = other._valveOpenInterval;
            _valveOpenTime = other._valveOpenTime;
            _waterWeight = other._waterWeight;
            _repeatCount = other._repeatCount;
        }
    
        /// <summary>
        /// Time between two consecutive valve openings (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_interval", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Time between two consecutive valve openings (s)")]
        public double ValveOpenInterval
        {
            get
            {
                return _valveOpenInterval;
            }
            set
            {
                _valveOpenInterval = value;
            }
        }
    
        /// <summary>
        /// Valve open interval (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_time", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Valve open interval (s)")]
        public double ValveOpenTime
        {
            get
            {
                return _valveOpenTime;
            }
            set
            {
                _valveOpenTime = value;
            }
        }
    
        /// <summary>
        /// Weight of water delivered (g)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water_weight", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Weight of water delivered (g)")]
        public System.Collections.Generic.List<double> WaterWeight
        {
            get
            {
                return _waterWeight;
            }
            set
            {
                _waterWeight = value;
            }
        }
    
        /// <summary>
        /// Number of times the valve opened.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Number of times the valve opened.")]
        public int RepeatCount
        {
            get
            {
                return _repeatCount;
            }
            set
            {
                _repeatCount = value;
            }
        }
    
        public System.IObservable<Measurement> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Measurement(this)));
        }
    
        public System.IObservable<Measurement> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Measurement(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("valve_open_interval = " + _valveOpenInterval + ", ");
            stringBuilder.Append("valve_open_time = " + _valveOpenTime + ", ");
            stringBuilder.Append("water_weight = " + _waterWeight + ", ");
            stringBuilder.Append("repeat_count = " + _repeatCount);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MicrostepResolution
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Microstep8 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Microstep16 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Microstep32 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Microstep64 = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MotorOperationMode
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Quiet = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Dynamic = 1,
    }


    /// <summary>
    /// Olfactometer calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Olfactometer calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerCalibration
    {
    
        private string _deviceName = "Olfactometer";
    
        private OlfactometerCalibrationInput _input = new OlfactometerCalibrationInput();
    
        private OlfactometerCalibrationOutput _output = new OlfactometerCalibrationOutput();
    
        private System.DateTimeOffset? _date;
    
        private string _description = "Calibration of the harp olfactometer device";
    
        private string _notes;
    
        public OlfactometerCalibration()
        {
        }
    
        protected OlfactometerCalibration(OlfactometerCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Name of the device being calibrated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Name of the device being calibrated")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public OlfactometerCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public OlfactometerCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<OlfactometerCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerCalibration(this)));
        }
    
        public System.IObservable<OlfactometerCalibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_name = " + _deviceName + ", ");
            stringBuilder.Append("input = " + _input + ", ");
            stringBuilder.Append("output = " + _output + ", ");
            stringBuilder.Append("date = " + _date + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerCalibrationInput
    {
    
        private System.Collections.Generic.IDictionary<string, OlfactometerChannelConfig> _channelConfig;
    
        public OlfactometerCalibrationInput()
        {
        }
    
        protected OlfactometerCalibrationInput(OlfactometerCalibrationInput other)
        {
            _channelConfig = other._channelConfig;
        }
    
        /// <summary>
        /// Configuration of olfactometer channels
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channel_config")]
        [System.ComponentModel.DescriptionAttribute("Configuration of olfactometer channels")]
        public System.Collections.Generic.IDictionary<string, OlfactometerChannelConfig> ChannelConfig
        {
            get
            {
                return _channelConfig;
            }
            set
            {
                _channelConfig = value;
            }
        }
    
        public System.IObservable<OlfactometerCalibrationInput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerCalibrationInput(this)));
        }
    
        public System.IObservable<OlfactometerCalibrationInput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channel_config = " + _channelConfig);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerCalibrationOutput
    {
    
        public OlfactometerCalibrationOutput()
        {
        }
    
        protected OlfactometerCalibrationOutput(OlfactometerCalibrationOutput other)
        {
        }
    
        public System.IObservable<OlfactometerCalibrationOutput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerCalibrationOutput(this)));
        }
    
        public System.IObservable<OlfactometerCalibrationOutput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Harp Olfactometer available channel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OlfactometerChannel
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Channel0 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Channel1 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Channel2 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Channel3 = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerChannelConfig
    {
    
        private int _channelIndex;
    
        private OlfactometerChannelType _channelType = AindVrForagingDataSchema.Rig.OlfactometerChannelType.Odor;
    
        private OlfactometerChannelConfigFlowRateCapacity _flowRateCapacity = AindVrForagingDataSchema.Rig.OlfactometerChannelConfigFlowRateCapacity._100;
    
        private double _flowRate = 100D;
    
        private string _odorant;
    
        private double? _odorantDilution;
    
        public OlfactometerChannelConfig()
        {
        }
    
        protected OlfactometerChannelConfig(OlfactometerChannelConfig other)
        {
            _channelIndex = other._channelIndex;
            _channelType = other._channelType;
            _flowRateCapacity = other._flowRateCapacity;
            _flowRate = other._flowRate;
            _odorant = other._odorant;
            _odorantDilution = other._odorantDilution;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("channel_index", Required=Newtonsoft.Json.Required.Always)]
        public int ChannelIndex
        {
            get
            {
                return _channelIndex;
            }
            set
            {
                _channelIndex = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channel_type")]
        public OlfactometerChannelType ChannelType
        {
            get
            {
                return _channelType;
            }
            set
            {
                _channelType = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("flow_rate_capacity")]
        public OlfactometerChannelConfigFlowRateCapacity FlowRateCapacity
        {
            get
            {
                return _flowRateCapacity;
            }
            set
            {
                _flowRateCapacity = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("flow_rate")]
        public double FlowRate
        {
            get
            {
                return _flowRate;
            }
            set
            {
                _flowRate = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("odorant")]
        public string Odorant
        {
            get
            {
                return _odorant;
            }
            set
            {
                _odorant = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorant_dilution")]
        public double? OdorantDilution
        {
            get
            {
                return _odorantDilution;
            }
            set
            {
                _odorantDilution = value;
            }
        }
    
        public System.IObservable<OlfactometerChannelConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerChannelConfig(this)));
        }
    
        public System.IObservable<OlfactometerChannelConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerChannelConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channel_index = " + _channelIndex + ", ");
            stringBuilder.Append("channel_type = " + _channelType + ", ");
            stringBuilder.Append("flow_rate_capacity = " + _flowRateCapacity + ", ");
            stringBuilder.Append("flow_rate = " + _flowRate + ", ");
            stringBuilder.Append("odorant = " + _odorant + ", ");
            stringBuilder.Append("odorant_dilution = " + _odorantDilution);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Channel type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum OlfactometerChannelType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Odor")]
        Odor = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Carrier")]
        Carrier = 1,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Rect
    {
    
        private int _x = 0;
    
        private int _y = 0;
    
        private int _width = 0;
    
        private int _height = 0;
    
        public Rect()
        {
        }
    
        protected Rect(Rect other)
        {
            _x = other._x;
            _y = other._y;
            _width = other._width;
            _height = other._height;
        }
    
        /// <summary>
        /// X coordinate of the top-left corner
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the top-left corner")]
        public int X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the top-left corner
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the top-left corner")]
        public int Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Width of the rectangle
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        [System.ComponentModel.DescriptionAttribute("Width of the rectangle")]
        public int Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
    
        /// <summary>
        /// Height of the rectangle
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        [System.ComponentModel.DescriptionAttribute("Height of the rectangle")]
        public int Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    
        public System.IObservable<Rect> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Rect(this)));
        }
    
        public System.IObservable<Rect> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Rect(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y + ", ");
            stringBuilder.Append("width = " + _width + ", ");
            stringBuilder.Append("height = " + _height);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Container class for calibration models. In a future release these will be moved to the respective devices
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Container class for calibration models. In a future release these will be moved t" +
        "o the respective devices")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RigCalibration
    {
    
        private WaterValveCalibration _waterValve = new WaterValveCalibration();
    
        public RigCalibration()
        {
        }
    
        protected RigCalibration(RigCalibration other)
        {
            _waterValve = other._waterValve;
        }
    
        /// <summary>
        /// Water valve calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water_valve", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Water valve calibration")]
        public WaterValveCalibration WaterValve
        {
            get
            {
                return _waterValve;
            }
            set
            {
                _waterValve = value;
            }
        }
    
        public System.IObservable<RigCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RigCalibration(this)));
        }
    
        public System.IObservable<RigCalibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RigCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("water_valve = " + _waterValve);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Screen
    {
    
        private string _deviceType = "Screen";
    
        private BaseModel _additionalSettings;
    
        private DisplaysCalibration _calibration;
    
        private int _displayIndex = 1;
    
        private double _targetRenderFrequency = 60D;
    
        private double _targetUpdateFrequency = 120D;
    
        private string _textureAssetsDirectory = "Textures";
    
        private double _brightness = 0D;
    
        private double _contrast = 1D;
    
        public Screen()
        {
        }
    
        protected Screen(Screen other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _displayIndex = other._displayIndex;
            _targetRenderFrequency = other._targetRenderFrequency;
            _targetUpdateFrequency = other._targetUpdateFrequency;
            _textureAssetsDirectory = other._textureAssetsDirectory;
            _brightness = other._brightness;
            _contrast = other._contrast;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Screen calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Screen calibration")]
        public DisplaysCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Display index
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("display_index")]
        [System.ComponentModel.DescriptionAttribute("Display index")]
        public int DisplayIndex
        {
            get
            {
                return _displayIndex;
            }
            set
            {
                _displayIndex = value;
            }
        }
    
        /// <summary>
        /// Target render frequency
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_render_frequency")]
        [System.ComponentModel.DescriptionAttribute("Target render frequency")]
        public double TargetRenderFrequency
        {
            get
            {
                return _targetRenderFrequency;
            }
            set
            {
                _targetRenderFrequency = value;
            }
        }
    
        /// <summary>
        /// Target update frequency
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_update_frequency")]
        [System.ComponentModel.DescriptionAttribute("Target update frequency")]
        public double TargetUpdateFrequency
        {
            get
            {
                return _targetUpdateFrequency;
            }
            set
            {
                _targetUpdateFrequency = value;
            }
        }
    
        /// <summary>
        /// Calibration directory
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("texture_assets_directory")]
        [System.ComponentModel.DescriptionAttribute("Calibration directory")]
        public string TextureAssetsDirectory
        {
            get
            {
                return _textureAssetsDirectory;
            }
            set
            {
                _textureAssetsDirectory = value;
            }
        }
    
        /// <summary>
        /// Brightness
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("brightness")]
        [System.ComponentModel.DescriptionAttribute("Brightness")]
        public double Brightness
        {
            get
            {
                return _brightness;
            }
            set
            {
                _brightness = value;
            }
        }
    
        /// <summary>
        /// Contrast
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("contrast")]
        [System.ComponentModel.DescriptionAttribute("Contrast")]
        public double Contrast
        {
            get
            {
                return _contrast;
            }
            set
            {
                _contrast = value;
            }
        }
    
        public System.IObservable<Screen> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Screen(this)));
        }
    
        public System.IObservable<Screen> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Screen(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("display_index = " + _displayIndex + ", ");
            stringBuilder.Append("target_render_frequency = " + _targetRenderFrequency + ", ");
            stringBuilder.Append("target_update_frequency = " + _targetUpdateFrequency + ", ");
            stringBuilder.Append("texture_assets_directory = " + _textureAssetsDirectory + ", ");
            stringBuilder.Append("brightness = " + _brightness + ", ");
            stringBuilder.Append("contrast = " + _contrast);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SpinnakerCamera
    {
    
        private string _deviceType = "SpinnakerCamera";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private string _serialNumber;
    
        private int _binning = 1;
    
        private SpinnakerCameraColorProcessing _colorProcessing = AindVrForagingDataSchema.Rig.SpinnakerCameraColorProcessing.Default;
    
        private int _exposure = 1000;
    
        private double _gain = 0D;
    
        private double? _gamma;
    
        private SpinnakerCameraAdcBitDepth? _adcBitDepth = AindVrForagingDataSchema.Rig.SpinnakerCameraAdcBitDepth.Adc8bit;
    
        private SpinnakerCameraPixelFormat? _pixelFormat = AindVrForagingDataSchema.Rig.SpinnakerCameraPixelFormat.Mono8;
    
        private Rect _regionOfInterest;
    
        private VideoWriter _videoWriter;
    
        public SpinnakerCamera()
        {
        }
    
        protected SpinnakerCamera(SpinnakerCamera other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _serialNumber = other._serialNumber;
            _binning = other._binning;
            _colorProcessing = other._colorProcessing;
            _exposure = other._exposure;
            _gain = other._gain;
            _gamma = other._gamma;
            _adcBitDepth = other._adcBitDepth;
            _pixelFormat = other._pixelFormat;
            _regionOfInterest = other._regionOfInterest;
            _videoWriter = other._videoWriter;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Camera serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Binning
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [System.ComponentModel.DescriptionAttribute("Binning")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        /// <summary>
        /// Color processing
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("color_processing")]
        [System.ComponentModel.DescriptionAttribute("Color processing")]
        public SpinnakerCameraColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        /// <summary>
        /// Exposure time
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [System.ComponentModel.DescriptionAttribute("Exposure time")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        /// <summary>
        /// Gain
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("Gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Gamma. If None, will disable gamma correction.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gamma")]
        [System.ComponentModel.DescriptionAttribute("Gamma. If None, will disable gamma correction.")]
        public double? Gamma
        {
            get
            {
                return _gamma;
            }
            set
            {
                _gamma = value;
            }
        }
    
        /// <summary>
        /// ADC bit depth. If None will be left as default.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("adc_bit_depth")]
        [System.ComponentModel.DescriptionAttribute("ADC bit depth. If None will be left as default.")]
        public SpinnakerCameraAdcBitDepth? AdcBitDepth
        {
            get
            {
                return _adcBitDepth;
            }
            set
            {
                _adcBitDepth = value;
            }
        }
    
        /// <summary>
        /// Pixel format. If None will be left as default.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pixel_format")]
        [System.ComponentModel.DescriptionAttribute("Pixel format. If None will be left as default.")]
        public SpinnakerCameraPixelFormat? PixelFormat
        {
            get
            {
                return _pixelFormat;
            }
            set
            {
                _pixelFormat = value;
            }
        }
    
        /// <summary>
        /// Region of interest
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("region_of_interest")]
        [System.ComponentModel.DescriptionAttribute("Region of interest")]
        public Rect RegionOfInterest
        {
            get
            {
                return _regionOfInterest;
            }
            set
            {
                _regionOfInterest = value;
            }
        }
    
        /// <summary>
        /// Video writer. If not provided, no video will be saved.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("video_writer")]
        [System.ComponentModel.DescriptionAttribute("Video writer. If not provided, no video will be saved.")]
        public VideoWriter VideoWriter
        {
            get
            {
                return _videoWriter;
            }
            set
            {
                _videoWriter = value;
            }
        }
    
        public System.IObservable<SpinnakerCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SpinnakerCamera(this)));
        }
    
        public System.IObservable<SpinnakerCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("binning = " + _binning + ", ");
            stringBuilder.Append("color_processing = " + _colorProcessing + ", ");
            stringBuilder.Append("exposure = " + _exposure + ", ");
            stringBuilder.Append("gain = " + _gain + ", ");
            stringBuilder.Append("gamma = " + _gamma + ", ");
            stringBuilder.Append("adc_bit_depth = " + _adcBitDepth + ", ");
            stringBuilder.Append("pixel_format = " + _pixelFormat + ", ");
            stringBuilder.Append("region_of_interest = " + _regionOfInterest + ", ");
            stringBuilder.Append("video_writer = " + _videoWriter);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SpinnakerCameraAdcBitDepth
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Adc8bit = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Adc10bit = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Adc12bit = 2,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SpinnakerCameraPixelFormat
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Mono8 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Mono16 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Rgb8packed = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Bayergr8 = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
        Bayerrg8 = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
        Bayergb8 = 5,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
        Bayerbg8 = 6,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
        Bayergr16 = 7,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
        Bayerrg16 = 8,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
        Bayergb16 = 9,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
        Bayerbg16 = 10,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
        Mono12packed = 11,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
        Bayergr12packed = 12,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
        Bayerrg12packed = 13,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
        Bayergb12packed = 14,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
        Bayerbg12packed = 15,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
        Yuv411packed = 16,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
        Yuv422packed = 17,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
        Yuv444packed = 18,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
        Mono12p = 19,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
        Bayergr12p = 20,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
        Bayerrg12p = 21,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
        Bayergb12p = 22,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
        Bayerbg12p = 23,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
        Ycbcr8 = 24,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
        Ycbcr4228 = 25,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
        Ycbcr4118 = 26,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
        Bgr8 = 27,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
        Bgra8 = 28,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
        Mono10packed = 29,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
        Bayergr10packed = 30,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
        Bayerrg10packed = 31,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
        Bayergb10packed = 32,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="33")]
        Bayerbg10packed = 33,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="34")]
        Mono10p = 34,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="35")]
        Bayergr10p = 35,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="36")]
        Bayerrg10p = 36,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
        Bayergb10p = 37,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
        Bayerbg10p = 38,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
        Mono1p = 39,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
        Mono2p = 40,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
        Mono4p = 41,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
        Mono8s = 42,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
        Mono10 = 43,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
        Mono12 = 44,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
        Mono14 = 45,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
        Mono16s = 46,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
        Mono32f = 47,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
        Bayerbg10 = 48,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
        Bayerbg12 = 49,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
        Bayergb10 = 50,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
        Bayergb12 = 51,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
        Bayergr10 = 52,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
        Bayergr12 = 53,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
        Bayerrg10 = 54,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
        Bayerrg12 = 55,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
        Rgba8 = 56,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
        Rgba10 = 57,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
        Rgba10p = 58,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
        Rgba12 = 59,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
        Rgba12p = 60,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
        Rgba14 = 61,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
        Rgba16 = 62,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
        Rgb8 = 63,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
        Rgb8Planar = 64,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
        Rgb10 = 65,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
        Rgb10Planar = 66,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
        Rgb10p = 67,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
        Rgb10p32 = 68,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
        Rgb12 = 69,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
        Rgb12Planar = 70,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
        Rgb12p = 71,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
        Rgb14 = 72,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
        Rgb16 = 73,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
        Rgb16s = 74,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
        Rgb32f = 75,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
        Rgb16Planar = 76,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
        Rgb565p = 77,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
        Bgra10 = 78,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
        Bgra10p = 79,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
        Bgra12 = 80,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
        Bgra12p = 81,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
        Bgra14 = 82,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
        Bgra16 = 83,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
        Rgba32f = 84,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
        Bgr10 = 85,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
        Bgr10p = 86,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
        Bgr12 = 87,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
        Bgr12p = 88,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
        Bgr14 = 89,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
        Bgr16 = 90,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
        Bgr565p = 91,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="92")]
        R8 = 92,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="93")]
        R10 = 93,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="94")]
        R12 = 94,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="95")]
        R16 = 95,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="96")]
        G8 = 96,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="97")]
        G10 = 97,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="98")]
        G12 = 98,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="99")]
        G16 = 99,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
        B8 = 100,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="101")]
        B10 = 101,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="102")]
        B12 = 102,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="103")]
        B16 = 103,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="104")]
        Coord3dAbc8 = 104,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="105")]
        Coord3dAbc8Planar = 105,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="106")]
        Coord3dAbc10p = 106,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="107")]
        Coord3dAbc10pPlanar = 107,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="108")]
        Coord3dAbc12p = 108,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="109")]
        Coord3dAbc12pPlanar = 109,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="110")]
        Coord3dAbc16 = 110,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="111")]
        Coord3dAbc16Planar = 111,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="112")]
        Coord3dAbc32f = 112,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="113")]
        Coord3dAbc32fPlanar = 113,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="114")]
        Coord3dAc8 = 114,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="115")]
        Coord3dAc8Planar = 115,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="116")]
        Coord3dAc10p = 116,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="117")]
        Coord3dAc10pPlanar = 117,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="118")]
        Coord3dAc12p = 118,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="119")]
        Coord3dAc12pPlanar = 119,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="120")]
        Coord3dAc16 = 120,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="121")]
        Coord3dAc16Planar = 121,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="122")]
        Coord3dAc32f = 122,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="123")]
        Coord3dAc32fPlanar = 123,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="124")]
        Coord3dA8 = 124,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="125")]
        Coord3dA10p = 125,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="126")]
        Coord3dA12p = 126,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="127")]
        Coord3dA16 = 127,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
        Coord3dA32f = 128,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="129")]
        Coord3dB8 = 129,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="130")]
        Coord3dB10p = 130,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="131")]
        Coord3dB12p = 131,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="132")]
        Coord3dB16 = 132,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="133")]
        Coord3dB32f = 133,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="134")]
        Coord3dC8 = 134,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="135")]
        Coord3dC10p = 135,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="136")]
        Coord3dC12p = 136,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="137")]
        Coord3dC16 = 137,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="138")]
        Coord3dC32f = 138,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="139")]
        Confidence1 = 139,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="140")]
        Confidence1p = 140,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="141")]
        Confidence8 = 141,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="142")]
        Confidence16 = 142,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="143")]
        Confidence32f = 143,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Treadmill
    {
    
        private string _deviceType = "Treadmill";
    
        private BaseModel _additionalSettings;
    
        private TreadmillCalibration _calibration;
    
        private int _whoAmI = 1402;
    
        private string _serialNumber;
    
        private string _portName;
    
        public Treadmill()
        {
        }
    
        protected Treadmill(Treadmill other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        public TreadmillCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<Treadmill> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Treadmill(this)));
        }
    
        public System.IObservable<Treadmill> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Treadmill(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Treadmill calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Treadmill calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TreadmillCalibration
    {
    
        private string _deviceName = "Treadmill";
    
        private TreadmillCalibrationInput _input = new TreadmillCalibrationInput();
    
        private TreadmillCalibrationOutput _output = new TreadmillCalibrationOutput();
    
        private System.DateTimeOffset? _date;
    
        private string _description = "Calibration of the treadmill system";
    
        private string _notes;
    
        public TreadmillCalibration()
        {
        }
    
        protected TreadmillCalibration(TreadmillCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public TreadmillCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public TreadmillCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<TreadmillCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TreadmillCalibration(this)));
        }
    
        public System.IObservable<TreadmillCalibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TreadmillCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_name = " + _deviceName + ", ");
            stringBuilder.Append("input = " + _input + ", ");
            stringBuilder.Append("output = " + _output + ", ");
            stringBuilder.Append("date = " + _date + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TreadmillCalibrationInput
    {
    
        public TreadmillCalibrationInput()
        {
        }
    
        protected TreadmillCalibrationInput(TreadmillCalibrationInput other)
        {
        }
    
        public System.IObservable<TreadmillCalibrationInput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TreadmillCalibrationInput(this)));
        }
    
        public System.IObservable<TreadmillCalibrationInput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TreadmillCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TreadmillCalibrationOutput
    {
    
        private double _wheelDiameter = 15D;
    
        private int _pulsesPerRevolution = 28800;
    
        private bool _invertDirection = false;
    
        private System.Collections.Generic.List<System.Collections.Generic.List<double>> _brakeLookupCalibration = new System.Collections.Generic.List<System.Collections.Generic.List<double>>();
    
        public TreadmillCalibrationOutput()
        {
        }
    
        protected TreadmillCalibrationOutput(TreadmillCalibrationOutput other)
        {
            _wheelDiameter = other._wheelDiameter;
            _pulsesPerRevolution = other._pulsesPerRevolution;
            _invertDirection = other._invertDirection;
            _brakeLookupCalibration = other._brakeLookupCalibration;
        }
    
        /// <summary>
        /// Wheel diameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("wheel_diameter")]
        [System.ComponentModel.DescriptionAttribute("Wheel diameter")]
        public double WheelDiameter
        {
            get
            {
                return _wheelDiameter;
            }
            set
            {
                _wheelDiameter = value;
            }
        }
    
        /// <summary>
        /// Pulses per revolution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pulses_per_revolution")]
        [System.ComponentModel.DescriptionAttribute("Pulses per revolution")]
        public int PulsesPerRevolution
        {
            get
            {
                return _pulsesPerRevolution;
            }
            set
            {
                _pulsesPerRevolution = value;
            }
        }
    
        /// <summary>
        /// Invert direction
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("invert_direction")]
        [System.ComponentModel.DescriptionAttribute("Invert direction")]
        public bool InvertDirection
        {
            get
            {
                return _invertDirection;
            }
            set
            {
                _invertDirection = value;
            }
        }
    
        /// <summary>
        /// Brake lookup calibration. Each pair of values define (input [torque], output [brake set-point U16])
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("brake_lookup_calibration", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Brake lookup calibration. Each pair of values define (input [torque], output [bra" +
            "ke set-point U16])")]
        public System.Collections.Generic.List<System.Collections.Generic.List<double>> BrakeLookupCalibration
        {
            get
            {
                return _brakeLookupCalibration;
            }
            set
            {
                _brakeLookupCalibration = value;
            }
        }
    
        public System.IObservable<TreadmillCalibrationOutput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TreadmillCalibrationOutput(this)));
        }
    
        public System.IObservable<TreadmillCalibrationOutput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TreadmillCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("wheel_diameter = " + _wheelDiameter + ", ");
            stringBuilder.Append("pulses_per_revolution = " + _pulsesPerRevolution + ", ");
            stringBuilder.Append("invert_direction = " + _invertDirection + ", ");
            stringBuilder.Append("brake_lookup_calibration = " + _brakeLookupCalibration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Vector3
    {
    
        private double _x = 0D;
    
        private double _y = 0D;
    
        private double _z = 0D;
    
        public Vector3()
        {
        }
    
        protected Vector3(Vector3 other)
        {
            _x = other._x;
            _y = other._y;
            _z = other._z;
        }
    
        /// <summary>
        /// X coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the point")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the point")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Z coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("z")]
        [System.ComponentModel.DescriptionAttribute("Z coordinate of the point")]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<Vector3> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Vector3(this)));
        }
    
        public System.IObservable<Vector3> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Vector3(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y + ", ");
            stringBuilder.Append("z = " + _z);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "video_writer_type")]
    [JsonInheritanceAttribute("FFMPEG", typeof(VideoWriterFfmpeg))]
    [JsonInheritanceAttribute("OPENCV", typeof(VideoWriterOpenCv))]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VideoWriter
    {
    
        public VideoWriter()
        {
        }
    
        protected VideoWriter(VideoWriter other)
        {
        }
    
        public System.IObservable<VideoWriter> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriter(this)));
        }
    
        public System.IObservable<VideoWriter> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriter(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VideoWriterFfmpeg : VideoWriter
    {
    
        private int _frameRate = 30;
    
        private string _containerExtension = "mp4";
    
        private string _outputArguments = "-vf \"scale=out_color_matrix=bt709:out_range=full,format=bgr24,scale=out_range=full\" -c:v h264_nvenc -pix_fmt yuv420p -color_range full -colorspace bt709 -color_trc linear -tune hq -preset p4 -rc vbr -cq 12 -b:v 0M -metadata author=\"Allen Institute for Neural Dynamics\" -maxrate 700M -bufsize 350M";
    
        private string _inputArguments = "-colorspace bt709 -color_primaries bt709 -color_range full -color_trc linear";
    
        public VideoWriterFfmpeg()
        {
        }
    
        protected VideoWriterFfmpeg(VideoWriterFfmpeg other) : 
                base(other)
        {
            _frameRate = other._frameRate;
            _containerExtension = other._containerExtension;
            _outputArguments = other._outputArguments;
            _inputArguments = other._inputArguments;
        }
    
        /// <summary>
        /// Encoding frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Encoding frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Container extension
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("container_extension")]
        [System.ComponentModel.DescriptionAttribute("Container extension")]
        public string ContainerExtension
        {
            get
            {
                return _containerExtension;
            }
            set
            {
                _containerExtension = value;
            }
        }
    
        /// <summary>
        /// Output arguments
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output_arguments")]
        [System.ComponentModel.DescriptionAttribute("Output arguments")]
        public string OutputArguments
        {
            get
            {
                return _outputArguments;
            }
            set
            {
                _outputArguments = value;
            }
        }
    
        /// <summary>
        /// Input arguments
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("input_arguments")]
        [System.ComponentModel.DescriptionAttribute("Input arguments")]
        public string InputArguments
        {
            get
            {
                return _inputArguments;
            }
            set
            {
                _inputArguments = value;
            }
        }
    
        public System.IObservable<VideoWriterFfmpeg> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriterFfmpeg(this)));
        }
    
        public System.IObservable<VideoWriterFfmpeg> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriterFfmpeg(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("frame_rate = " + _frameRate + ", ");
            stringBuilder.Append("container_extension = " + _containerExtension + ", ");
            stringBuilder.Append("output_arguments = " + _outputArguments + ", ");
            stringBuilder.Append("input_arguments = " + _inputArguments);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VideoWriterOpenCv : VideoWriter
    {
    
        private int _frameRate = 30;
    
        private string _containerExtension = "avi";
    
        private string _fourCc = "FMP4";
    
        public VideoWriterOpenCv()
        {
        }
    
        protected VideoWriterOpenCv(VideoWriterOpenCv other) : 
                base(other)
        {
            _frameRate = other._frameRate;
            _containerExtension = other._containerExtension;
            _fourCc = other._fourCc;
        }
    
        /// <summary>
        /// Encoding frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Encoding frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Container extension
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("container_extension")]
        [System.ComponentModel.DescriptionAttribute("Container extension")]
        public string ContainerExtension
        {
            get
            {
                return _containerExtension;
            }
            set
            {
                _containerExtension = value;
            }
        }
    
        /// <summary>
        /// Four character code
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("four_cc")]
        [System.ComponentModel.DescriptionAttribute("Four character code")]
        public string FourCc
        {
            get
            {
                return _fourCc;
            }
            set
            {
                _fourCc = value;
            }
        }
    
        public System.IObservable<VideoWriterOpenCv> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriterOpenCv(this)));
        }
    
        public System.IObservable<VideoWriterOpenCv> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriterOpenCv(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("frame_rate = " + _frameRate + ", ");
            stringBuilder.Append("container_extension = " + _containerExtension + ", ");
            stringBuilder.Append("four_cc = " + _fourCc);
            return true;
        }
    }


    /// <summary>
    /// Water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Water valve calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WaterValveCalibration
    {
    
        private string _deviceName = "WaterValve";
    
        private WaterValveCalibrationInput _input = new WaterValveCalibrationInput();
    
        private WaterValveCalibrationOutput _output = new WaterValveCalibrationOutput();
    
        private System.DateTimeOffset? _date;
    
        private string _description = "Calibration of the water valve delivery system";
    
        private string _notes;
    
        public WaterValveCalibration()
        {
        }
    
        protected WaterValveCalibration(WaterValveCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Name of the device being calibrated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Name of the device being calibrated")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public WaterValveCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public WaterValveCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<WaterValveCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibration(this)));
        }
    
        public System.IObservable<WaterValveCalibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_name = " + _deviceName + ", ");
            stringBuilder.Append("input = " + _input + ", ");
            stringBuilder.Append("output = " + _output + ", ");
            stringBuilder.Append("date = " + _date + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WaterValveCalibrationInput
    {
    
        private System.Collections.Generic.List<Measurement> _measurements = new System.Collections.Generic.List<Measurement>();
    
        public WaterValveCalibrationInput()
        {
        }
    
        protected WaterValveCalibrationInput(WaterValveCalibrationInput other)
        {
            _measurements = other._measurements;
        }
    
        /// <summary>
        /// List of measurements
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("measurements")]
        [System.ComponentModel.DescriptionAttribute("List of measurements")]
        public System.Collections.Generic.List<Measurement> Measurements
        {
            get
            {
                return _measurements;
            }
            set
            {
                _measurements = value;
            }
        }
    
        public System.IObservable<WaterValveCalibrationInput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibrationInput(this)));
        }
    
        public System.IObservable<WaterValveCalibrationInput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("measurements = " + _measurements);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Output for water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Output for water valve calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WaterValveCalibrationOutput
    {
    
        private System.Collections.Generic.IDictionary<string, double> _intervalAverage;
    
        private double _slope;
    
        private double _offset;
    
        private double? _r2;
    
        private System.Collections.Generic.List<double> _validDomain;
    
        public WaterValveCalibrationOutput()
        {
        }
    
        protected WaterValveCalibrationOutput(WaterValveCalibrationOutput other)
        {
            _intervalAverage = other._intervalAverage;
            _slope = other._slope;
            _offset = other._offset;
            _r2 = other._r2;
            _validDomain = other._validDomain;
        }
    
        /// <summary>
        /// Dictionary keyed by measured valve interval and corresponding average single event volume.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("interval_average")]
        [System.ComponentModel.DescriptionAttribute("Dictionary keyed by measured valve interval and corresponding average single even" +
            "t volume.")]
        public System.Collections.Generic.IDictionary<string, double> IntervalAverage
        {
            get
            {
                return _intervalAverage;
            }
            set
            {
                _intervalAverage = value;
            }
        }
    
        /// <summary>
        /// Slope of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("slope", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Slope of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)")]
        public double Slope
        {
            get
            {
                return _slope;
            }
            set
            {
                _slope = value;
            }
        }
    
        /// <summary>
        /// Offset of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Offset of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)")]
        public double Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        /// <summary>
        /// R2 metric from the linear model.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("r2")]
        [System.ComponentModel.DescriptionAttribute("R2 metric from the linear model.")]
        public double? R2
        {
            get
            {
                return _r2;
            }
            set
            {
                _r2 = value;
            }
        }
    
        /// <summary>
        /// The optional time-intervals the calibration curve was calculated on.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("valid_domain")]
        [System.ComponentModel.DescriptionAttribute("The optional time-intervals the calibration curve was calculated on.")]
        public System.Collections.Generic.List<double> ValidDomain
        {
            get
            {
                return _validDomain;
            }
            set
            {
                _validDomain = value;
            }
        }
    
        public System.IObservable<WaterValveCalibrationOutput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibrationOutput(this)));
        }
    
        public System.IObservable<WaterValveCalibrationOutput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("interval_average = " + _intervalAverage + ", ");
            stringBuilder.Append("slope = " + _slope + ", ");
            stringBuilder.Append("offset = " + _offset + ", ");
            stringBuilder.Append("r2 = " + _r2 + ", ");
            stringBuilder.Append("valid_domain = " + _validDomain);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WebCamera
    {
    
        private string _deviceType = "WebCamera";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _index = 0;
    
        private VideoWriter _videoWriter;
    
        public WebCamera()
        {
        }
    
        protected WebCamera(WebCamera other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _index = other._index;
            _videoWriter = other._videoWriter;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Camera index
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("index")]
        [System.ComponentModel.DescriptionAttribute("Camera index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        /// <summary>
        /// Video writer. If not provided, no video will be saved.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("video_writer")]
        [System.ComponentModel.DescriptionAttribute("Video writer. If not provided, no video will be saved.")]
        public VideoWriter VideoWriter
        {
            get
            {
                return _videoWriter;
            }
            set
            {
                _videoWriter = value;
            }
        }
    
        public System.IObservable<WebCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WebCamera(this)));
        }
    
        public System.IObservable<WebCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WebCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("index = " + _index + ", ");
            stringBuilder.Append("video_writer = " + _videoWriter);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingRig
    {
    
        private string _aindBehaviorServicesPkgVersion = "0.9.0";
    
        private string _version = "0.5.0";
    
        private string _computerName;
    
        private string _rigName;
    
        private CameraControllerSpinnakerCamera _triggeredCameraController = new CameraControllerSpinnakerCamera();
    
        private CameraControllerWebCamera _monitoringCameraController;
    
        private HarpBehavior _harpBehavior = new HarpBehavior();
    
        private HarpOlfactometer _harpOlfactometer = new HarpOlfactometer();
    
        private HarpLicketySplit _harpLickometer = new HarpLicketySplit();
    
        private HarpWhiteRabbit _harpClockGenerator = new HarpWhiteRabbit();
    
        private HarpAnalogInput _harpAnalogInput;
    
        private Treadmill _harpTreadmill = new Treadmill();
    
        private HarpSniffDetector _harpSniffDetector;
    
        private HarpEnvironmentSensor _harpEnvironmentSensor;
    
        private AindManipulatorDevice _manipulator = new AindManipulatorDevice();
    
        private Screen _screen;
    
        private RigCalibration _calibration = new RigCalibration();
    
        public AindVrForagingRig()
        {
        }
    
        protected AindVrForagingRig(AindVrForagingRig other)
        {
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _version = other._version;
            _computerName = other._computerName;
            _rigName = other._rigName;
            _triggeredCameraController = other._triggeredCameraController;
            _monitoringCameraController = other._monitoringCameraController;
            _harpBehavior = other._harpBehavior;
            _harpOlfactometer = other._harpOlfactometer;
            _harpLickometer = other._harpLickometer;
            _harpClockGenerator = other._harpClockGenerator;
            _harpAnalogInput = other._harpAnalogInput;
            _harpTreadmill = other._harpTreadmill;
            _harpSniffDetector = other._harpSniffDetector;
            _harpEnvironmentSensor = other._harpEnvironmentSensor;
            _manipulator = other._manipulator;
            _screen = other._screen;
            _calibration = other._calibration;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Computer name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("computer_name")]
        [System.ComponentModel.DescriptionAttribute("Computer name")]
        public string ComputerName
        {
            get
            {
                return _computerName;
            }
            set
            {
                _computerName = value;
            }
        }
    
        /// <summary>
        /// Rig name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rig_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Rig name")]
        public string RigName
        {
            get
            {
                return _rigName;
            }
            set
            {
                _rigName = value;
            }
        }
    
        /// <summary>
        /// Required camera controller to triggered cameras.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("triggered_camera_controller", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Required camera controller to triggered cameras.")]
        public CameraControllerSpinnakerCamera TriggeredCameraController
        {
            get
            {
                return _triggeredCameraController;
            }
            set
            {
                _triggeredCameraController = value;
            }
        }
    
        /// <summary>
        /// Optional camera controller for monitoring cameras.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("monitoring_camera_controller")]
        [System.ComponentModel.DescriptionAttribute("Optional camera controller for monitoring cameras.")]
        public CameraControllerWebCamera MonitoringCameraController
        {
            get
            {
                return _monitoringCameraController;
            }
            set
            {
                _monitoringCameraController = value;
            }
        }
    
        /// <summary>
        /// Harp behavior
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_behavior", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp behavior")]
        public HarpBehavior HarpBehavior
        {
            get
            {
                return _harpBehavior;
            }
            set
            {
                _harpBehavior = value;
            }
        }
    
        /// <summary>
        /// Harp olfactometer
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_olfactometer", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp olfactometer")]
        public HarpOlfactometer HarpOlfactometer
        {
            get
            {
                return _harpOlfactometer;
            }
            set
            {
                _harpOlfactometer = value;
            }
        }
    
        /// <summary>
        /// Harp lickometer
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_lickometer", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp lickometer")]
        public HarpLicketySplit HarpLickometer
        {
            get
            {
                return _harpLickometer;
            }
            set
            {
                _harpLickometer = value;
            }
        }
    
        /// <summary>
        /// Harp clock generator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_clock_generator", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp clock generator")]
        public HarpWhiteRabbit HarpClockGenerator
        {
            get
            {
                return _harpClockGenerator;
            }
            set
            {
                _harpClockGenerator = value;
            }
        }
    
        /// <summary>
        /// Harp analog input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_analog_input")]
        [System.ComponentModel.DescriptionAttribute("Harp analog input")]
        public HarpAnalogInput HarpAnalogInput
        {
            get
            {
                return _harpAnalogInput;
            }
            set
            {
                _harpAnalogInput = value;
            }
        }
    
        /// <summary>
        /// Harp treadmill
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_treadmill", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp treadmill")]
        public Treadmill HarpTreadmill
        {
            get
            {
                return _harpTreadmill;
            }
            set
            {
                _harpTreadmill = value;
            }
        }
    
        /// <summary>
        /// Sniff detector settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_sniff_detector")]
        [System.ComponentModel.DescriptionAttribute("Sniff detector settings")]
        public HarpSniffDetector HarpSniffDetector
        {
            get
            {
                return _harpSniffDetector;
            }
            set
            {
                _harpSniffDetector = value;
            }
        }
    
        /// <summary>
        /// Environment sensor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_environment_sensor")]
        [System.ComponentModel.DescriptionAttribute("Environment sensor")]
        public HarpEnvironmentSensor HarpEnvironmentSensor
        {
            get
            {
                return _harpEnvironmentSensor;
            }
            set
            {
                _harpEnvironmentSensor = value;
            }
        }
    
        /// <summary>
        /// Manipulator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Manipulator")]
        public AindManipulatorDevice Manipulator
        {
            get
            {
                return _manipulator;
            }
            set
            {
                _manipulator = value;
            }
        }
    
        /// <summary>
        /// Screen settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("screen")]
        [System.ComponentModel.DescriptionAttribute("Screen settings")]
        public Screen Screen
        {
            get
            {
                return _screen;
            }
            set
            {
                _screen = value;
            }
        }
    
        /// <summary>
        /// Calibration models
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Calibration models")]
        public RigCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        public System.IObservable<AindVrForagingRig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindVrForagingRig(this)));
        }
    
        public System.IObservable<AindVrForagingRig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindVrForagingRig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("aind_behavior_services_pkg_version = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("version = " + _version + ", ");
            stringBuilder.Append("computer_name = " + _computerName + ", ");
            stringBuilder.Append("rig_name = " + _rigName + ", ");
            stringBuilder.Append("triggered_camera_controller = " + _triggeredCameraController + ", ");
            stringBuilder.Append("monitoring_camera_controller = " + _monitoringCameraController + ", ");
            stringBuilder.Append("harp_behavior = " + _harpBehavior + ", ");
            stringBuilder.Append("harp_olfactometer = " + _harpOlfactometer + ", ");
            stringBuilder.Append("harp_lickometer = " + _harpLickometer + ", ");
            stringBuilder.Append("harp_clock_generator = " + _harpClockGenerator + ", ");
            stringBuilder.Append("harp_analog_input = " + _harpAnalogInput + ", ");
            stringBuilder.Append("harp_treadmill = " + _harpTreadmill + ", ");
            stringBuilder.Append("harp_sniff_detector = " + _harpSniffDetector + ", ");
            stringBuilder.Append("harp_environment_sensor = " + _harpEnvironmentSensor + ", ");
            stringBuilder.Append("manipulator = " + _manipulator + ", ");
            stringBuilder.Append("screen = " + _screen + ", ");
            stringBuilder.Append("calibration = " + _calibration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OlfactometerChannelConfigFlowRateCapacity
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
        _100 = 100,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1000")]
        _1000 = 1000,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SpinnakerCameraColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; private set; }

        public System.Type Type { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterFfmpeg>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterOpenCv>))]
    public partial class MatchVideoWriter : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(VideoWriter);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchVideoWriter),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<VideoWriter> source)
            where TResult : VideoWriter
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<VideoWriter>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorAdditionalSettings> source)
        {
            return Process<AindManipulatorAdditionalSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorCalibration> source)
        {
            return Process<AindManipulatorCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorCalibrationInput> source)
        {
            return Process<AindManipulatorCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorCalibrationOutput> source)
        {
            return Process<AindManipulatorCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorDevice> source)
        {
            return Process<AindManipulatorDevice>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AxisConfiguration> source)
        {
            return Process<AxisConfiguration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BaseModel> source)
        {
            return Process<BaseModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraControllerSpinnakerCamera> source)
        {
            return Process<CameraControllerSpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraControllerWebCamera> source)
        {
            return Process<CameraControllerWebCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ConnectedClockOutput> source)
        {
            return Process<ConnectedClockOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DisplayCalibration> source)
        {
            return Process<DisplayCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DisplayExtrinsics> source)
        {
            return Process<DisplayExtrinsics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DisplayIntrinsics> source)
        {
            return Process<DisplayIntrinsics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DisplaysCalibration> source)
        {
            return Process<DisplaysCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpAnalogInput> source)
        {
            return Process<HarpAnalogInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBehavior> source)
        {
            return Process<HarpBehavior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpEnvironmentSensor> source)
        {
            return Process<HarpEnvironmentSensor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpLicketySplit> source)
        {
            return Process<HarpLicketySplit>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpOlfactometer> source)
        {
            return Process<HarpOlfactometer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpSniffDetector> source)
        {
            return Process<HarpSniffDetector>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpWhiteRabbit> source)
        {
            return Process<HarpWhiteRabbit>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ManipulatorPosition> source)
        {
            return Process<ManipulatorPosition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Measurement> source)
        {
            return Process<Measurement>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibration> source)
        {
            return Process<OlfactometerCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibrationInput> source)
        {
            return Process<OlfactometerCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibrationOutput> source)
        {
            return Process<OlfactometerCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannelConfig> source)
        {
            return Process<OlfactometerChannelConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rect> source)
        {
            return Process<Rect>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RigCalibration> source)
        {
            return Process<RigCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Screen> source)
        {
            return Process<Screen>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Treadmill> source)
        {
            return Process<Treadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TreadmillCalibration> source)
        {
            return Process<TreadmillCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TreadmillCalibrationInput> source)
        {
            return Process<TreadmillCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TreadmillCalibrationOutput> source)
        {
            return Process<TreadmillCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Vector3> source)
        {
            return Process<Vector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriter> source)
        {
            return Process<VideoWriter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriterFfmpeg> source)
        {
            return Process<VideoWriterFfmpeg>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriterOpenCv> source)
        {
            return Process<VideoWriterOpenCv>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibration> source)
        {
            return Process<WaterValveCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationInput> source)
        {
            return Process<WaterValveCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationOutput> source)
        {
            return Process<WaterValveCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WebCamera> source)
        {
            return Process<WebCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingRig> source)
        {
            return Process<AindVrForagingRig>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorAdditionalSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorDevice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AxisConfiguration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraControllerSpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraControllerWebCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ConnectedClockOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DisplayCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DisplayExtrinsics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DisplayIntrinsics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DisplaysCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpAnalogInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpEnvironmentSensor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpLicketySplit>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpOlfactometer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpSniffDetector>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpWhiteRabbit>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ManipulatorPosition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Measurement>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannelConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rect>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RigCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Screen>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Treadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TreadmillCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TreadmillCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TreadmillCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Vector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterFfmpeg>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterOpenCv>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WebCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingRig>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}