//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema.AindVrForagingRig
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpAnalogInput
    {
    
        private int _whoAmI = 1236;
    
        private string _deviceType = "analoginput";
    
        private string _serialNumber;
    
        private string _portName;
    
        private object _additionalSettings;
    
        public HarpAnalogInput()
        {
        }
    
        protected HarpAnalogInput(HarpAnalogInput other)
        {
            _whoAmI = other._whoAmI;
            _deviceType = other._deviceType;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _additionalSettings = other._additionalSettings;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="port_name")]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public object AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        public System.IObservable<HarpAnalogInput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpAnalogInput(this)));
        }
    
        public System.IObservable<HarpAnalogInput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpAnalogInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpBehavior
    {
    
        private int _whoAmI = 1216;
    
        private string _deviceType = "behavior";
    
        private string _serialNumber;
    
        private string _portName;
    
        private object _additionalSettings;
    
        public HarpBehavior()
        {
        }
    
        protected HarpBehavior(HarpBehavior other)
        {
            _whoAmI = other._whoAmI;
            _deviceType = other._deviceType;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _additionalSettings = other._additionalSettings;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="port_name")]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public object AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        public System.IObservable<HarpBehavior> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpBehavior(this)));
        }
    
        public System.IObservable<HarpBehavior> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpBehavior(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpClockGenerator
    {
    
        private int _whoAmI = 1158;
    
        private string _deviceType = "clockgenerator";
    
        private string _serialNumber;
    
        private string _portName;
    
        private object _additionalSettings;
    
        public HarpClockGenerator()
        {
        }
    
        protected HarpClockGenerator(HarpClockGenerator other)
        {
            _whoAmI = other._whoAmI;
            _deviceType = other._deviceType;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _additionalSettings = other._additionalSettings;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="port_name")]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public object AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        public System.IObservable<HarpClockGenerator> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpClockGenerator(this)));
        }
    
        public System.IObservable<HarpClockGenerator> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpClockGenerator(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpLickometer
    {
    
        private WhoAmI _whoAmI;
    
        private string _deviceType = "lickometer";
    
        private string _serialNumber;
    
        private string _portName;
    
        private object _additionalSettings;
    
        public HarpLickometer()
        {
        }
    
        protected HarpLickometer(HarpLickometer other)
        {
            _whoAmI = other._whoAmI;
            _deviceType = other._deviceType;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _additionalSettings = other._additionalSettings;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="who_am_i")]
        public WhoAmI WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="port_name")]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public object AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        public System.IObservable<HarpLickometer> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpLickometer(this)));
        }
    
        public System.IObservable<HarpLickometer> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpLickometer(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpOlfactometer
    {
    
        private int _whoAmI = 1140;
    
        private string _deviceType = "olfactometer";
    
        private string _serialNumber;
    
        private string _portName;
    
        private object _additionalSettings;
    
        public HarpOlfactometer()
        {
        }
    
        protected HarpOlfactometer(HarpOlfactometer other)
        {
            _whoAmI = other._whoAmI;
            _deviceType = other._deviceType;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _additionalSettings = other._additionalSettings;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="port_name")]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public object AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        public System.IObservable<HarpOlfactometer> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpOlfactometer(this)));
        }
    
        public System.IObservable<HarpOlfactometer> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpOlfactometer(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpTreadmill
    {
    
        private WhoAmI2 _whoAmI;
    
        private string _deviceType = "treadmill";
    
        private string _serialNumber;
    
        private string _portName;
    
        private object _additionalSettings;
    
        public HarpTreadmill()
        {
        }
    
        protected HarpTreadmill(HarpTreadmill other)
        {
            _whoAmI = other._whoAmI;
            _deviceType = other._deviceType;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _additionalSettings = other._additionalSettings;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="who_am_i")]
        public WhoAmI2 WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="port_name")]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public object AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        public System.IObservable<HarpTreadmill> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpTreadmill(this)));
        }
    
        public System.IObservable<HarpTreadmill> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpTreadmill(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Screen
    {
    
        private int _displayIndex = 1;
    
        private double _targetRenderFrequency = 60D;
    
        private double _targetUpdateFrequency = 120D;
    
        private string _calibrationDirectory = "Calibration\\Monitors\\";
    
        private string _textureAssetsDirectory = "Textures";
    
        public Screen()
        {
        }
    
        protected Screen(Screen other)
        {
            _displayIndex = other._displayIndex;
            _targetRenderFrequency = other._targetRenderFrequency;
            _targetUpdateFrequency = other._targetUpdateFrequency;
            _calibrationDirectory = other._calibrationDirectory;
            _textureAssetsDirectory = other._textureAssetsDirectory;
        }
    
        /// <summary>
        /// Display index
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("display_index")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="display_index")]
        [System.ComponentModel.DescriptionAttribute("Display index")]
        public int DisplayIndex
        {
            get
            {
                return _displayIndex;
            }
            set
            {
                _displayIndex = value;
            }
        }
    
        /// <summary>
        /// Target render frequency
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_render_frequency")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="target_render_frequency")]
        [System.ComponentModel.DescriptionAttribute("Target render frequency")]
        public double TargetRenderFrequency
        {
            get
            {
                return _targetRenderFrequency;
            }
            set
            {
                _targetRenderFrequency = value;
            }
        }
    
        /// <summary>
        /// Target update frequency
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_update_frequency")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="target_update_frequency")]
        [System.ComponentModel.DescriptionAttribute("Target update frequency")]
        public double TargetUpdateFrequency
        {
            get
            {
                return _targetUpdateFrequency;
            }
            set
            {
                _targetUpdateFrequency = value;
            }
        }
    
        /// <summary>
        /// Calibration directory
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_directory")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_directory")]
        [System.ComponentModel.DescriptionAttribute("Calibration directory")]
        public string CalibrationDirectory
        {
            get
            {
                return _calibrationDirectory;
            }
            set
            {
                _calibrationDirectory = value;
            }
        }
    
        /// <summary>
        /// Calibration directory
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("texture_assets_directory")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="texture_assets_directory")]
        [System.ComponentModel.DescriptionAttribute("Calibration directory")]
        public string TextureAssetsDirectory
        {
            get
            {
                return _textureAssetsDirectory;
            }
            set
            {
                _textureAssetsDirectory = value;
            }
        }
    
        public System.IObservable<Screen> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Screen(this)));
        }
    
        public System.IObservable<Screen> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Screen(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("display_index = " + _displayIndex + ", ");
            stringBuilder.Append("target_render_frequency = " + _targetRenderFrequency + ", ");
            stringBuilder.Append("target_update_frequency = " + _targetUpdateFrequency + ", ");
            stringBuilder.Append("calibration_directory = " + _calibrationDirectory + ", ");
            stringBuilder.Append("texture_assets_directory = " + _textureAssetsDirectory);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SpinnakerCamera
    {
    
        private string _serialNumber;
    
        private int _binning = 1;
    
        private SpinnakerCameraColorProcessing _colorProcessing = AindVrForagingDataSchema.AindVrForagingRig.SpinnakerCameraColorProcessing.Default;
    
        private int _exposure = 1000;
    
        private int _frameRate = 30;
    
        private double _gain = 0D;
    
        public SpinnakerCamera()
        {
        }
    
        protected SpinnakerCamera(SpinnakerCamera other)
        {
            _serialNumber = other._serialNumber;
            _binning = other._binning;
            _colorProcessing = other._colorProcessing;
            _exposure = other._exposure;
            _frameRate = other._frameRate;
            _gain = other._gain;
        }
    
        /// <summary>
        /// Camera serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serial_number")]
        [System.ComponentModel.DescriptionAttribute("Camera serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Binning
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="binning")]
        [System.ComponentModel.DescriptionAttribute("Binning")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        /// <summary>
        /// Color processing
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("color_processing")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="color_processing")]
        [System.ComponentModel.DescriptionAttribute("Color processing")]
        public SpinnakerCameraColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        /// <summary>
        /// Exposure time
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposure")]
        [System.ComponentModel.DescriptionAttribute("Exposure time")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        /// <summary>
        /// Frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Gain
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        [System.ComponentModel.DescriptionAttribute("Gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        public System.IObservable<SpinnakerCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SpinnakerCamera(this)));
        }
    
        public System.IObservable<SpinnakerCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("binning = " + _binning + ", ");
            stringBuilder.Append("color_processing = " + _colorProcessing + ", ");
            stringBuilder.Append("exposure = " + _exposure + ", ");
            stringBuilder.Append("frame_rate = " + _frameRate + ", ");
            stringBuilder.Append("gain = " + _gain);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Treadmill
    {
    
        private double _wheelDiameter = 15D;
    
        private int _pulsesPerRevolution = 28800;
    
        private bool _invertDirection = false;
    
        public Treadmill()
        {
        }
    
        protected Treadmill(Treadmill other)
        {
            _wheelDiameter = other._wheelDiameter;
            _pulsesPerRevolution = other._pulsesPerRevolution;
            _invertDirection = other._invertDirection;
        }
    
        /// <summary>
        /// Wheel diameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("wheel_diameter")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="wheel_diameter")]
        [System.ComponentModel.DescriptionAttribute("Wheel diameter")]
        public double WheelDiameter
        {
            get
            {
                return _wheelDiameter;
            }
            set
            {
                _wheelDiameter = value;
            }
        }
    
        /// <summary>
        /// Pulses per revolution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pulses_per_revolution")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulses_per_revolution")]
        [System.ComponentModel.DescriptionAttribute("Pulses per revolution")]
        public int PulsesPerRevolution
        {
            get
            {
                return _pulsesPerRevolution;
            }
            set
            {
                _pulsesPerRevolution = value;
            }
        }
    
        /// <summary>
        /// Invert direction
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("invert_direction")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="invert_direction")]
        [System.ComponentModel.DescriptionAttribute("Invert direction")]
        public bool InvertDirection
        {
            get
            {
                return _invertDirection;
            }
            set
            {
                _invertDirection = value;
            }
        }
    
        public System.IObservable<Treadmill> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Treadmill(this)));
        }
    
        public System.IObservable<Treadmill> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Treadmill(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("wheel_diameter = " + _wheelDiameter + ", ");
            stringBuilder.Append("pulses_per_revolution = " + _pulsesPerRevolution + ", ");
            stringBuilder.Append("invert_direction = " + _invertDirection);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Valve
    {
    
        private double _calibrationIntercept = 0D;
    
        private double _calibrationSlope = 1D;
    
        public Valve()
        {
        }
    
        protected Valve(Valve other)
        {
            _calibrationIntercept = other._calibrationIntercept;
            _calibrationSlope = other._calibrationSlope;
        }
    
        /// <summary>
        /// Calibration intercept
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_intercept")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_intercept")]
        [System.ComponentModel.DescriptionAttribute("Calibration intercept")]
        public double CalibrationIntercept
        {
            get
            {
                return _calibrationIntercept;
            }
            set
            {
                _calibrationIntercept = value;
            }
        }
    
        /// <summary>
        /// Calibration slope
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_slope")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_slope")]
        [System.ComponentModel.DescriptionAttribute("Calibration slope")]
        public double CalibrationSlope
        {
            get
            {
                return _calibrationSlope;
            }
            set
            {
                _calibrationSlope = value;
            }
        }
    
        public System.IObservable<Valve> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Valve(this)));
        }
    
        public System.IObservable<Valve> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Valve(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("calibration_intercept = " + _calibrationIntercept + ", ");
            stringBuilder.Append("calibration_slope = " + _calibrationSlope);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WebCamera
    {
    
        private int _index = 0;
    
        public WebCamera()
        {
        }
    
        protected WebCamera(WebCamera other)
        {
            _index = other._index;
        }
    
        /// <summary>
        /// Camera index
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("index")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="index")]
        [System.ComponentModel.DescriptionAttribute("Camera index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        public System.IObservable<WebCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WebCamera(this)));
        }
    
        public System.IObservable<WebCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WebCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("index = " + _index);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingRig
    {
    
        private string _describedBy = "pyd_taskLogic";
    
        private string _schemaVersion = "0.1.0";
    
        private System.Collections.Generic.IDictionary<string, object> _harpDevices;
    
        private System.Collections.Generic.IDictionary<string, SpinnakerCamera> _spinnakerCameras;
    
        private System.Collections.Generic.IDictionary<string, WebCamera> _webCameras;
    
        private Screen _screen;
    
        private Treadmill _treadmill;
    
        private Valve _waterValve;
    
        public AindVrForagingRig()
        {
        }
    
        protected AindVrForagingRig(AindVrForagingRig other)
        {
            _describedBy = other._describedBy;
            _schemaVersion = other._schemaVersion;
            _harpDevices = other._harpDevices;
            _spinnakerCameras = other._spinnakerCameras;
            _webCameras = other._webCameras;
            _screen = other._screen;
            _treadmill = other._treadmill;
            _waterValve = other._waterValve;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="describedBy")]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="schema_version")]
        public string SchemaVersion
        {
            get
            {
                return _schemaVersion;
            }
            set
            {
                _schemaVersion = value;
            }
        }
    
        /// <summary>
        /// Harp devices
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_devices")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harp_devices")]
        [System.ComponentModel.DescriptionAttribute("Harp devices")]
        public System.Collections.Generic.IDictionary<string, object> HarpDevices
        {
            get
            {
                return _harpDevices;
            }
            set
            {
                _harpDevices = value;
            }
        }
    
        /// <summary>
        /// Spinnaker cameras
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("spinnaker_cameras")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="spinnaker_cameras")]
        [System.ComponentModel.DescriptionAttribute("Spinnaker cameras")]
        public System.Collections.Generic.IDictionary<string, SpinnakerCamera> SpinnakerCameras
        {
            get
            {
                return _spinnakerCameras;
            }
            set
            {
                _spinnakerCameras = value;
            }
        }
    
        /// <summary>
        /// Web cameras
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("web_cameras")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="web_cameras")]
        [System.ComponentModel.DescriptionAttribute("Web cameras")]
        public System.Collections.Generic.IDictionary<string, WebCamera> WebCameras
        {
            get
            {
                return _webCameras;
            }
            set
            {
                _webCameras = value;
            }
        }
    
        /// <summary>
        /// Screen settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("screen")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="screen")]
        [System.ComponentModel.DescriptionAttribute("Screen settings")]
        public Screen Screen
        {
            get
            {
                return _screen;
            }
            set
            {
                _screen = value;
            }
        }
    
        /// <summary>
        /// Treadmill settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("treadmill")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="treadmill")]
        [System.ComponentModel.DescriptionAttribute("Treadmill settings")]
        public Treadmill Treadmill
        {
            get
            {
                return _treadmill;
            }
            set
            {
                _treadmill = value;
            }
        }
    
        /// <summary>
        /// Water valve settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water_valve")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="water_valve")]
        [System.ComponentModel.DescriptionAttribute("Water valve settings")]
        public Valve WaterValve
        {
            get
            {
                return _waterValve;
            }
            set
            {
                _waterValve = value;
            }
        }
    
        public System.IObservable<AindVrForagingRig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindVrForagingRig(this)));
        }
    
        public System.IObservable<AindVrForagingRig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindVrForagingRig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("describedBy = " + _describedBy + ", ");
            stringBuilder.Append("schema_version = " + _schemaVersion + ", ");
            stringBuilder.Append("harp_devices = " + _harpDevices + ", ");
            stringBuilder.Append("spinnaker_cameras = " + _spinnakerCameras + ", ");
            stringBuilder.Append("web_cameras = " + _webCameras + ", ");
            stringBuilder.Append("screen = " + _screen + ", ");
            stringBuilder.Append("treadmill = " + _treadmill + ", ");
            stringBuilder.Append("water_valve = " + _waterValve);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WhoAmI
    {
    
        public WhoAmI()
        {
        }
    
        protected WhoAmI(WhoAmI other)
        {
        }
    
        public System.IObservable<WhoAmI> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WhoAmI(this)));
        }
    
        public System.IObservable<WhoAmI> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WhoAmI(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WhoAmI2
    {
    
        public WhoAmI2()
        {
        }
    
        protected WhoAmI2(WhoAmI2 other)
        {
        }
    
        public System.IObservable<WhoAmI2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WhoAmI2(this)));
        }
    
        public System.IObservable<WhoAmI2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WhoAmI2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SpinnakerCameraColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<HarpAnalogInput> source)
        {
            return Process<HarpAnalogInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBehavior> source)
        {
            return Process<HarpBehavior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpClockGenerator> source)
        {
            return Process<HarpClockGenerator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpLickometer> source)
        {
            return Process<HarpLickometer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpOlfactometer> source)
        {
            return Process<HarpOlfactometer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpTreadmill> source)
        {
            return Process<HarpTreadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Screen> source)
        {
            return Process<Screen>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Treadmill> source)
        {
            return Process<Treadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valve> source)
        {
            return Process<Valve>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WebCamera> source)
        {
            return Process<WebCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingRig> source)
        {
            return Process<AindVrForagingRig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WhoAmI> source)
        {
            return Process<WhoAmI>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WhoAmI2> source)
        {
            return Process<WhoAmI2>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpAnalogInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpClockGenerator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpLickometer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpOlfactometer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpTreadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Screen>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Treadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valve>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WebCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingRig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WhoAmI>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WhoAmI2>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<HarpAnalogInput> source)
        {
            return Process<HarpAnalogInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBehavior> source)
        {
            return Process<HarpBehavior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpClockGenerator> source)
        {
            return Process<HarpClockGenerator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpLickometer> source)
        {
            return Process<HarpLickometer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpOlfactometer> source)
        {
            return Process<HarpOlfactometer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpTreadmill> source)
        {
            return Process<HarpTreadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Screen> source)
        {
            return Process<Screen>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Treadmill> source)
        {
            return Process<Treadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valve> source)
        {
            return Process<Valve>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WebCamera> source)
        {
            return Process<WebCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingRig> source)
        {
            return Process<AindVrForagingRig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WhoAmI> source)
        {
            return Process<WhoAmI>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WhoAmI2> source)
        {
            return Process<WhoAmI2>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpAnalogInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpClockGenerator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpLickometer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpOlfactometer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpTreadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Screen>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Treadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valve>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WebCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingRig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WhoAmI>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WhoAmI2>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}