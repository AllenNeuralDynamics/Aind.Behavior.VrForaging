//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema.Rig
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BaseModel
    {
    
        public BaseModel()
        {
        }
    
        protected BaseModel(BaseModel other)
        {
        }
    
        public System.IObservable<BaseModel> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BaseModel(this)));
        }
    
        public System.IObservable<BaseModel> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BaseModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CameraControllerSpinnakerCamera
    {
    
        private string _deviceType = "CameraController";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private System.Collections.Generic.IDictionary<string, SpinnakerCamera> _cameras = new System.Collections.Generic.Dictionary<string, SpinnakerCamera>();
    
        private int? _frameRate;
    
        public CameraControllerSpinnakerCamera()
        {
        }
    
        protected CameraControllerSpinnakerCamera(CameraControllerSpinnakerCamera other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _cameras = other._cameras;
            _frameRate = other._frameRate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Cameras to be instantiated
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cameras", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Cameras to be instantiated")]
        public System.Collections.Generic.IDictionary<string, SpinnakerCamera> Cameras
        {
            get
            {
                return _cameras;
            }
            set
            {
                _cameras = value;
            }
        }
    
        /// <summary>
        /// Frame rate of the trigger to all cameras
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Frame rate of the trigger to all cameras")]
        public int? FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        public System.IObservable<CameraControllerSpinnakerCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraControllerSpinnakerCamera(this)));
        }
    
        public System.IObservable<CameraControllerSpinnakerCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraControllerSpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("cameras = " + _cameras + ", ");
            stringBuilder.Append("frame_rate = " + _frameRate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CameraControllerWebCamera
    {
    
        private string _deviceType = "CameraController";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private System.Collections.Generic.IDictionary<string, WebCamera> _cameras = new System.Collections.Generic.Dictionary<string, WebCamera>();
    
        private int? _frameRate;
    
        public CameraControllerWebCamera()
        {
        }
    
        protected CameraControllerWebCamera(CameraControllerWebCamera other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _cameras = other._cameras;
            _frameRate = other._frameRate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Cameras to be instantiated
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cameras", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Cameras to be instantiated")]
        public System.Collections.Generic.IDictionary<string, WebCamera> Cameras
        {
            get
            {
                return _cameras;
            }
            set
            {
                _cameras = value;
            }
        }
    
        /// <summary>
        /// Frame rate of the trigger to all cameras
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Frame rate of the trigger to all cameras")]
        public int? FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        public System.IObservable<CameraControllerWebCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraControllerWebCamera(this)));
        }
    
        public System.IObservable<CameraControllerWebCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraControllerWebCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("cameras = " + _cameras + ", ");
            stringBuilder.Append("frame_rate = " + _frameRate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpAnalogInput
    {
    
        private string _deviceType = "analoginput";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1236;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpAnalogInput()
        {
        }
    
        protected HarpAnalogInput(HarpAnalogInput other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpAnalogInput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpAnalogInput(this)));
        }
    
        public System.IObservable<HarpAnalogInput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpAnalogInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpBehavior : TreadmillBoard
    {
    
        private string _deviceType = "behavior";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpBehavior()
        {
        }
    
        protected HarpBehavior(HarpBehavior other) : 
                base(other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpBehavior> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpBehavior(this)));
        }
    
        public System.IObservable<HarpBehavior> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpBehavior(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpClockGenerator
    {
    
        private string _deviceType = "clockgenerator";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1158;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpClockGenerator()
        {
        }
    
        protected HarpClockGenerator(HarpClockGenerator other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpClockGenerator> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpClockGenerator(this)));
        }
    
        public System.IObservable<HarpClockGenerator> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpClockGenerator(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpLickometer
    {
    
        private string _deviceType = "lickometer";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1400;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpLickometer()
        {
        }
    
        protected HarpLickometer(HarpLickometer other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpLickometer> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpLickometer(this)));
        }
    
        public System.IObservable<HarpLickometer> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpLickometer(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpOlfactometer
    {
    
        private string _deviceType = "olfactometer";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1140;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpOlfactometer()
        {
        }
    
        protected HarpOlfactometer(HarpOlfactometer other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpOlfactometer> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpOlfactometer(this)));
        }
    
        public System.IObservable<HarpOlfactometer> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpOlfactometer(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpSniffDetector
    {
    
        private string _deviceType = "sniffdetector";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1401;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpSniffDetector()
        {
        }
    
        protected HarpSniffDetector(HarpSniffDetector other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpSniffDetector> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpSniffDetector(this)));
        }
    
        public System.IObservable<HarpSniffDetector> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpSniffDetector(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpTreadmill : TreadmillBoard
    {
    
        private string _deviceType = "treadmill";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpTreadmill()
        {
        }
    
        protected HarpTreadmill(HarpTreadmill other) : 
                base(other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpTreadmill> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpTreadmill(this)));
        }
    
        public System.IObservable<HarpTreadmill> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpTreadmill(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    }


    /// <summary>
    /// Input for water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Input for water valve calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Measurement
    {
    
        private double _valveOpenInterval;
    
        private double _valveOpenTime;
    
        private System.Collections.Generic.List<double> _waterWeight = new System.Collections.Generic.List<double>();
    
        private int _repeatCount;
    
        public Measurement()
        {
        }
    
        protected Measurement(Measurement other)
        {
            _valveOpenInterval = other._valveOpenInterval;
            _valveOpenTime = other._valveOpenTime;
            _waterWeight = other._waterWeight;
            _repeatCount = other._repeatCount;
        }
    
        /// <summary>
        /// Time between two consecutive valve openings (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_interval", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Time between two consecutive valve openings (s)")]
        public double ValveOpenInterval
        {
            get
            {
                return _valveOpenInterval;
            }
            set
            {
                _valveOpenInterval = value;
            }
        }
    
        /// <summary>
        /// Valve open interval (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_time", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Valve open interval (s)")]
        public double ValveOpenTime
        {
            get
            {
                return _valveOpenTime;
            }
            set
            {
                _valveOpenTime = value;
            }
        }
    
        /// <summary>
        /// Weight of water delivered (g)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water_weight", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Weight of water delivered (g)")]
        public System.Collections.Generic.List<double> WaterWeight
        {
            get
            {
                return _waterWeight;
            }
            set
            {
                _waterWeight = value;
            }
        }
    
        /// <summary>
        /// Number of times the valve opened.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Number of times the valve opened.")]
        public int RepeatCount
        {
            get
            {
                return _repeatCount;
            }
            set
            {
                _repeatCount = value;
            }
        }
    
        public System.IObservable<Measurement> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Measurement(this)));
        }
    
        public System.IObservable<Measurement> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Measurement(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("valve_open_interval = " + _valveOpenInterval + ", ");
            stringBuilder.Append("valve_open_time = " + _valveOpenTime + ", ");
            stringBuilder.Append("water_weight = " + _waterWeight + ", ");
            stringBuilder.Append("repeat_count = " + _repeatCount);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Olfactometer calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Olfactometer calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerCalibration
    {
    
        private string _deviceName = "Olfactometer";
    
        private OlfactometerCalibrationInput _input = new OlfactometerCalibrationInput();
    
        private OlfactometerCalibrationOutput _output = new OlfactometerCalibrationOutput();
    
        private System.DateTimeOffset? _date;
    
        private string _description = "Calibration of the harp olfactometer device";
    
        private string _notes;
    
        public OlfactometerCalibration()
        {
        }
    
        protected OlfactometerCalibration(OlfactometerCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Name of the device being calibrated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Name of the device being calibrated")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public OlfactometerCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public OlfactometerCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<OlfactometerCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerCalibration(this)));
        }
    
        public System.IObservable<OlfactometerCalibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_name = " + _deviceName + ", ");
            stringBuilder.Append("input = " + _input + ", ");
            stringBuilder.Append("output = " + _output + ", ");
            stringBuilder.Append("date = " + _date + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerCalibrationInput
    {
    
        private System.Collections.Generic.IDictionary<string, OlfactometerChannelConfig> _channelConfig;
    
        public OlfactometerCalibrationInput()
        {
        }
    
        protected OlfactometerCalibrationInput(OlfactometerCalibrationInput other)
        {
            _channelConfig = other._channelConfig;
        }
    
        /// <summary>
        /// Configuration of olfactometer channels
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channel_config")]
        [System.ComponentModel.DescriptionAttribute("Configuration of olfactometer channels")]
        public System.Collections.Generic.IDictionary<string, OlfactometerChannelConfig> ChannelConfig
        {
            get
            {
                return _channelConfig;
            }
            set
            {
                _channelConfig = value;
            }
        }
    
        public System.IObservable<OlfactometerCalibrationInput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerCalibrationInput(this)));
        }
    
        public System.IObservable<OlfactometerCalibrationInput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channel_config = " + _channelConfig);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerCalibrationOutput
    {
    
        public OlfactometerCalibrationOutput()
        {
        }
    
        protected OlfactometerCalibrationOutput(OlfactometerCalibrationOutput other)
        {
        }
    
        public System.IObservable<OlfactometerCalibrationOutput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerCalibrationOutput(this)));
        }
    
        public System.IObservable<OlfactometerCalibrationOutput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerChannelConfig
    {
    
        private int _channelIndex;
    
        private OlfactometerChannelType _channelType = AindVrForagingDataSchema.Rig.OlfactometerChannelType.Odor;
    
        private OlfactometerChannelConfigFlowRateCapacity _flowRateCapacity = AindVrForagingDataSchema.Rig.OlfactometerChannelConfigFlowRateCapacity._100;
    
        private double _flowRate = 100D;
    
        private string _odorant;
    
        private double? _odorantDilution;
    
        public OlfactometerChannelConfig()
        {
        }
    
        protected OlfactometerChannelConfig(OlfactometerChannelConfig other)
        {
            _channelIndex = other._channelIndex;
            _channelType = other._channelType;
            _flowRateCapacity = other._flowRateCapacity;
            _flowRate = other._flowRate;
            _odorant = other._odorant;
            _odorantDilution = other._odorantDilution;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("channel_index", Required=Newtonsoft.Json.Required.Always)]
        public int ChannelIndex
        {
            get
            {
                return _channelIndex;
            }
            set
            {
                _channelIndex = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channel_type")]
        public OlfactometerChannelType ChannelType
        {
            get
            {
                return _channelType;
            }
            set
            {
                _channelType = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("flow_rate_capacity")]
        public OlfactometerChannelConfigFlowRateCapacity FlowRateCapacity
        {
            get
            {
                return _flowRateCapacity;
            }
            set
            {
                _flowRateCapacity = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("flow_rate")]
        public double FlowRate
        {
            get
            {
                return _flowRate;
            }
            set
            {
                _flowRate = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("odorant")]
        public string Odorant
        {
            get
            {
                return _odorant;
            }
            set
            {
                _odorant = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorant_dilution")]
        public double? OdorantDilution
        {
            get
            {
                return _odorantDilution;
            }
            set
            {
                _odorantDilution = value;
            }
        }
    
        public System.IObservable<OlfactometerChannelConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerChannelConfig(this)));
        }
    
        public System.IObservable<OlfactometerChannelConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerChannelConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channel_index = " + _channelIndex + ", ");
            stringBuilder.Append("channel_type = " + _channelType + ", ");
            stringBuilder.Append("flow_rate_capacity = " + _flowRateCapacity + ", ");
            stringBuilder.Append("flow_rate = " + _flowRate + ", ");
            stringBuilder.Append("odorant = " + _odorant + ", ");
            stringBuilder.Append("odorant_dilution = " + _odorantDilution);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Channel type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum OlfactometerChannelType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Odor")]
        Odor = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Carrier")]
        Carrier = 1,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RigCalibration
    {
    
        private WaterValveCalibration _waterValve = new WaterValveCalibration();
    
        private OlfactometerCalibration _olfactometer;
    
        public RigCalibration()
        {
        }
    
        protected RigCalibration(RigCalibration other)
        {
            _waterValve = other._waterValve;
            _olfactometer = other._olfactometer;
        }
    
        /// <summary>
        /// Water valve calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water_valve", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Water valve calibration")]
        public WaterValveCalibration WaterValve
        {
            get
            {
                return _waterValve;
            }
            set
            {
                _waterValve = value;
            }
        }
    
        /// <summary>
        /// Olfactometer calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("olfactometer")]
        [System.ComponentModel.DescriptionAttribute("Olfactometer calibration")]
        public OlfactometerCalibration Olfactometer
        {
            get
            {
                return _olfactometer;
            }
            set
            {
                _olfactometer = value;
            }
        }
    
        public System.IObservable<RigCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RigCalibration(this)));
        }
    
        public System.IObservable<RigCalibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RigCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("water_valve = " + _waterValve + ", ");
            stringBuilder.Append("olfactometer = " + _olfactometer);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Screen
    {
    
        private string _deviceType = "Screen";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _displayIndex = 1;
    
        private double _targetRenderFrequency = 60D;
    
        private double _targetUpdateFrequency = 120D;
    
        private string _calibrationDirectory = "Calibration\\Monitors\\";
    
        private string _textureAssetsDirectory = "Textures";
    
        private double _brightness = 1D;
    
        private double _contrast = 1D;
    
        public Screen()
        {
        }
    
        protected Screen(Screen other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _displayIndex = other._displayIndex;
            _targetRenderFrequency = other._targetRenderFrequency;
            _targetUpdateFrequency = other._targetUpdateFrequency;
            _calibrationDirectory = other._calibrationDirectory;
            _textureAssetsDirectory = other._textureAssetsDirectory;
            _brightness = other._brightness;
            _contrast = other._contrast;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Display index
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("display_index")]
        [System.ComponentModel.DescriptionAttribute("Display index")]
        public int DisplayIndex
        {
            get
            {
                return _displayIndex;
            }
            set
            {
                _displayIndex = value;
            }
        }
    
        /// <summary>
        /// Target render frequency
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_render_frequency")]
        [System.ComponentModel.DescriptionAttribute("Target render frequency")]
        public double TargetRenderFrequency
        {
            get
            {
                return _targetRenderFrequency;
            }
            set
            {
                _targetRenderFrequency = value;
            }
        }
    
        /// <summary>
        /// Target update frequency
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_update_frequency")]
        [System.ComponentModel.DescriptionAttribute("Target update frequency")]
        public double TargetUpdateFrequency
        {
            get
            {
                return _targetUpdateFrequency;
            }
            set
            {
                _targetUpdateFrequency = value;
            }
        }
    
        /// <summary>
        /// Calibration directory
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_directory")]
        [System.ComponentModel.DescriptionAttribute("Calibration directory")]
        public string CalibrationDirectory
        {
            get
            {
                return _calibrationDirectory;
            }
            set
            {
                _calibrationDirectory = value;
            }
        }
    
        /// <summary>
        /// Calibration directory
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("texture_assets_directory")]
        [System.ComponentModel.DescriptionAttribute("Calibration directory")]
        public string TextureAssetsDirectory
        {
            get
            {
                return _textureAssetsDirectory;
            }
            set
            {
                _textureAssetsDirectory = value;
            }
        }
    
        /// <summary>
        /// Brightness
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("brightness")]
        [System.ComponentModel.DescriptionAttribute("Brightness")]
        public double Brightness
        {
            get
            {
                return _brightness;
            }
            set
            {
                _brightness = value;
            }
        }
    
        /// <summary>
        /// Contrast
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("contrast")]
        [System.ComponentModel.DescriptionAttribute("Contrast")]
        public double Contrast
        {
            get
            {
                return _contrast;
            }
            set
            {
                _contrast = value;
            }
        }
    
        public System.IObservable<Screen> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Screen(this)));
        }
    
        public System.IObservable<Screen> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Screen(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("display_index = " + _displayIndex + ", ");
            stringBuilder.Append("target_render_frequency = " + _targetRenderFrequency + ", ");
            stringBuilder.Append("target_update_frequency = " + _targetUpdateFrequency + ", ");
            stringBuilder.Append("calibration_directory = " + _calibrationDirectory + ", ");
            stringBuilder.Append("texture_assets_directory = " + _textureAssetsDirectory + ", ");
            stringBuilder.Append("brightness = " + _brightness + ", ");
            stringBuilder.Append("contrast = " + _contrast);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SpinnakerCamera
    {
    
        private string _deviceType = "SpinnakerCamera";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private string _serialNumber;
    
        private int _binning = 1;
    
        private SpinnakerCameraColorProcessing _colorProcessing = AindVrForagingDataSchema.Rig.SpinnakerCameraColorProcessing.Default;
    
        private int _exposure = 1000;
    
        private double _gain = 0D;
    
        private VideoWriter _videoWriter;
    
        public SpinnakerCamera()
        {
        }
    
        protected SpinnakerCamera(SpinnakerCamera other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _serialNumber = other._serialNumber;
            _binning = other._binning;
            _colorProcessing = other._colorProcessing;
            _exposure = other._exposure;
            _gain = other._gain;
            _videoWriter = other._videoWriter;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Camera serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Binning
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [System.ComponentModel.DescriptionAttribute("Binning")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        /// <summary>
        /// Color processing
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("color_processing")]
        [System.ComponentModel.DescriptionAttribute("Color processing")]
        public SpinnakerCameraColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        /// <summary>
        /// Exposure time
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [System.ComponentModel.DescriptionAttribute("Exposure time")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        /// <summary>
        /// Gain
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("Gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Video writer. If not provided, no video will be saved.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("video_writer")]
        [System.ComponentModel.DescriptionAttribute("Video writer. If not provided, no video will be saved.")]
        public VideoWriter VideoWriter
        {
            get
            {
                return _videoWriter;
            }
            set
            {
                _videoWriter = value;
            }
        }
    
        public System.IObservable<SpinnakerCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SpinnakerCamera(this)));
        }
    
        public System.IObservable<SpinnakerCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("binning = " + _binning + ", ");
            stringBuilder.Append("color_processing = " + _colorProcessing + ", ");
            stringBuilder.Append("exposure = " + _exposure + ", ");
            stringBuilder.Append("gain = " + _gain + ", ");
            stringBuilder.Append("video_writer = " + _videoWriter);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "who_am_i")]
    [JsonInheritanceAttribute("1216", typeof(HarpBehavior))]
    [JsonInheritanceAttribute("1402", typeof(HarpTreadmill))]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TreadmillBoard
    {
    
        public TreadmillBoard()
        {
        }
    
        protected TreadmillBoard(TreadmillBoard other)
        {
        }
    
        public System.IObservable<TreadmillBoard> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TreadmillBoard(this)));
        }
    
        public System.IObservable<TreadmillBoard> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TreadmillBoard(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "video_writer_type")]
    [JsonInheritanceAttribute("FFMPEG", typeof(VideoWriterFfmpeg))]
    [JsonInheritanceAttribute("OPENCV", typeof(VideoWriterOpenCv))]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VideoWriter
    {
    
        public VideoWriter()
        {
        }
    
        protected VideoWriter(VideoWriter other)
        {
        }
    
        public System.IObservable<VideoWriter> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriter(this)));
        }
    
        public System.IObservable<VideoWriter> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriter(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VideoWriterFfmpeg : VideoWriter
    {
    
        private int _frameRate = 30;
    
        private string _containerExtension = "mp4";
    
        private string _outputArguments = "-c:v h264_nvenc -vsync 0 -2pass 1 -bf:v 0 -qp 13 -preset medium -b:v 20M -rc:v cbr";
    
        public VideoWriterFfmpeg()
        {
        }
    
        protected VideoWriterFfmpeg(VideoWriterFfmpeg other) : 
                base(other)
        {
            _frameRate = other._frameRate;
            _containerExtension = other._containerExtension;
            _outputArguments = other._outputArguments;
        }
    
        /// <summary>
        /// Encoding frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Encoding frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Container extension
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("container_extension")]
        [System.ComponentModel.DescriptionAttribute("Container extension")]
        public string ContainerExtension
        {
            get
            {
                return _containerExtension;
            }
            set
            {
                _containerExtension = value;
            }
        }
    
        /// <summary>
        /// Output arguments
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output_arguments")]
        [System.ComponentModel.DescriptionAttribute("Output arguments")]
        public string OutputArguments
        {
            get
            {
                return _outputArguments;
            }
            set
            {
                _outputArguments = value;
            }
        }
    
        public System.IObservable<VideoWriterFfmpeg> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriterFfmpeg(this)));
        }
    
        public System.IObservable<VideoWriterFfmpeg> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriterFfmpeg(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("frame_rate = " + _frameRate + ", ");
            stringBuilder.Append("container_extension = " + _containerExtension + ", ");
            stringBuilder.Append("output_arguments = " + _outputArguments);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VideoWriterOpenCv : VideoWriter
    {
    
        private int _frameRate = 30;
    
        private string _containerExtension = "avi";
    
        private string _fourCc = "FMP4";
    
        public VideoWriterOpenCv()
        {
        }
    
        protected VideoWriterOpenCv(VideoWriterOpenCv other) : 
                base(other)
        {
            _frameRate = other._frameRate;
            _containerExtension = other._containerExtension;
            _fourCc = other._fourCc;
        }
    
        /// <summary>
        /// Encoding frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Encoding frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Container extension
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("container_extension")]
        [System.ComponentModel.DescriptionAttribute("Container extension")]
        public string ContainerExtension
        {
            get
            {
                return _containerExtension;
            }
            set
            {
                _containerExtension = value;
            }
        }
    
        /// <summary>
        /// Four character code
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("four_cc")]
        [System.ComponentModel.DescriptionAttribute("Four character code")]
        public string FourCc
        {
            get
            {
                return _fourCc;
            }
            set
            {
                _fourCc = value;
            }
        }
    
        public System.IObservable<VideoWriterOpenCv> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriterOpenCv(this)));
        }
    
        public System.IObservable<VideoWriterOpenCv> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriterOpenCv(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("frame_rate = " + _frameRate + ", ");
            stringBuilder.Append("container_extension = " + _containerExtension + ", ");
            stringBuilder.Append("four_cc = " + _fourCc);
            return true;
        }
    }


    /// <summary>
    /// Water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Water valve calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WaterValveCalibration
    {
    
        private string _deviceName = "WaterValve";
    
        private WaterValveCalibrationInput _input = new WaterValveCalibrationInput();
    
        private WaterValveCalibrationOutput _output = new WaterValveCalibrationOutput();
    
        private System.DateTimeOffset? _date;
    
        private string _description = "Calibration of the water valve delivery system";
    
        private string _notes;
    
        public WaterValveCalibration()
        {
        }
    
        protected WaterValveCalibration(WaterValveCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Name of the device being calibrated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Name of the device being calibrated")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public WaterValveCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public WaterValveCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<WaterValveCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibration(this)));
        }
    
        public System.IObservable<WaterValveCalibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_name = " + _deviceName + ", ");
            stringBuilder.Append("input = " + _input + ", ");
            stringBuilder.Append("output = " + _output + ", ");
            stringBuilder.Append("date = " + _date + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WaterValveCalibrationInput
    {
    
        private System.Collections.Generic.List<Measurement> _measurements = new System.Collections.Generic.List<Measurement>();
    
        public WaterValveCalibrationInput()
        {
        }
    
        protected WaterValveCalibrationInput(WaterValveCalibrationInput other)
        {
            _measurements = other._measurements;
        }
    
        /// <summary>
        /// List of measurements
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("measurements")]
        [System.ComponentModel.DescriptionAttribute("List of measurements")]
        public System.Collections.Generic.List<Measurement> Measurements
        {
            get
            {
                return _measurements;
            }
            set
            {
                _measurements = value;
            }
        }
    
        public System.IObservable<WaterValveCalibrationInput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibrationInput(this)));
        }
    
        public System.IObservable<WaterValveCalibrationInput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("measurements = " + _measurements);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Output for water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Output for water valve calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WaterValveCalibrationOutput
    {
    
        private System.Collections.Generic.IDictionary<string, double> _intervalAverage;
    
        private double _slope;
    
        private double _offset;
    
        private double? _r2;
    
        private System.Collections.Generic.List<double> _validDomain;
    
        public WaterValveCalibrationOutput()
        {
        }
    
        protected WaterValveCalibrationOutput(WaterValveCalibrationOutput other)
        {
            _intervalAverage = other._intervalAverage;
            _slope = other._slope;
            _offset = other._offset;
            _r2 = other._r2;
            _validDomain = other._validDomain;
        }
    
        /// <summary>
        /// Dictionary keyed by measured valve interval and corresponding average single event volume.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("interval_average")]
        [System.ComponentModel.DescriptionAttribute("Dictionary keyed by measured valve interval and corresponding average single even" +
            "t volume.")]
        public System.Collections.Generic.IDictionary<string, double> IntervalAverage
        {
            get
            {
                return _intervalAverage;
            }
            set
            {
                _intervalAverage = value;
            }
        }
    
        /// <summary>
        /// Slope of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("slope", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Slope of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)")]
        public double Slope
        {
            get
            {
                return _slope;
            }
            set
            {
                _slope = value;
            }
        }
    
        /// <summary>
        /// Offset of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Offset of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)")]
        public double Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        /// <summary>
        /// R2 metric from the linear model.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("r2")]
        [System.ComponentModel.DescriptionAttribute("R2 metric from the linear model.")]
        public double? R2
        {
            get
            {
                return _r2;
            }
            set
            {
                _r2 = value;
            }
        }
    
        /// <summary>
        /// The optional time-intervals the calibration curve was calculated on.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("valid_domain")]
        [System.ComponentModel.DescriptionAttribute("The optional time-intervals the calibration curve was calculated on.")]
        public System.Collections.Generic.List<double> ValidDomain
        {
            get
            {
                return _validDomain;
            }
            set
            {
                _validDomain = value;
            }
        }
    
        public System.IObservable<WaterValveCalibrationOutput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibrationOutput(this)));
        }
    
        public System.IObservable<WaterValveCalibrationOutput> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("interval_average = " + _intervalAverage + ", ");
            stringBuilder.Append("slope = " + _slope + ", ");
            stringBuilder.Append("offset = " + _offset + ", ");
            stringBuilder.Append("r2 = " + _r2 + ", ");
            stringBuilder.Append("valid_domain = " + _validDomain);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WebCamera
    {
    
        private string _deviceType = "WebCamera";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _index = 0;
    
        private VideoWriter _videoWriter;
    
        public WebCamera()
        {
        }
    
        protected WebCamera(WebCamera other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _index = other._index;
            _videoWriter = other._videoWriter;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Camera index
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("index")]
        [System.ComponentModel.DescriptionAttribute("Camera index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        /// <summary>
        /// Video writer. If not provided, no video will be saved.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("video_writer")]
        [System.ComponentModel.DescriptionAttribute("Video writer. If not provided, no video will be saved.")]
        public VideoWriter VideoWriter
        {
            get
            {
                return _videoWriter;
            }
            set
            {
                _videoWriter = value;
            }
        }
    
        public System.IObservable<WebCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WebCamera(this)));
        }
    
        public System.IObservable<WebCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WebCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("index = " + _index + ", ");
            stringBuilder.Append("video_writer = " + _videoWriter);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindBehaviorServicesRigTreadmill
    {
    
        private double _wheelDiameter = 15D;
    
        private int _pulsesPerRevolution = 28800;
    
        private bool _invertDirection = false;
    
        public AindBehaviorServicesRigTreadmill()
        {
        }
    
        protected AindBehaviorServicesRigTreadmill(AindBehaviorServicesRigTreadmill other)
        {
            _wheelDiameter = other._wheelDiameter;
            _pulsesPerRevolution = other._pulsesPerRevolution;
            _invertDirection = other._invertDirection;
        }
    
        /// <summary>
        /// Wheel diameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("wheel_diameter")]
        [System.ComponentModel.DescriptionAttribute("Wheel diameter")]
        public double WheelDiameter
        {
            get
            {
                return _wheelDiameter;
            }
            set
            {
                _wheelDiameter = value;
            }
        }
    
        /// <summary>
        /// Pulses per revolution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pulses_per_revolution")]
        [System.ComponentModel.DescriptionAttribute("Pulses per revolution")]
        public int PulsesPerRevolution
        {
            get
            {
                return _pulsesPerRevolution;
            }
            set
            {
                _pulsesPerRevolution = value;
            }
        }
    
        /// <summary>
        /// Invert direction
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("invert_direction")]
        [System.ComponentModel.DescriptionAttribute("Invert direction")]
        public bool InvertDirection
        {
            get
            {
                return _invertDirection;
            }
            set
            {
                _invertDirection = value;
            }
        }
    
        public System.IObservable<AindBehaviorServicesRigTreadmill> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindBehaviorServicesRigTreadmill(this)));
        }
    
        public System.IObservable<AindBehaviorServicesRigTreadmill> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindBehaviorServicesRigTreadmill(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("wheel_diameter = " + _wheelDiameter + ", ");
            stringBuilder.Append("pulses_per_revolution = " + _pulsesPerRevolution + ", ");
            stringBuilder.Append("invert_direction = " + _invertDirection);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindBehaviorVrForagingRigTreadmill
    {
    
        private TreadmillBoard _harpBoard;
    
        private AindBehaviorServicesRigTreadmill _settings;
    
        public AindBehaviorVrForagingRigTreadmill()
        {
        }
    
        protected AindBehaviorVrForagingRigTreadmill(AindBehaviorVrForagingRigTreadmill other)
        {
            _harpBoard = other._harpBoard;
            _settings = other._settings;
        }
    
        /// <summary>
        /// The board to be used as a treadmill input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_board", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The board to be used as a treadmill input")]
        public TreadmillBoard HarpBoard
        {
            get
            {
                return _harpBoard;
            }
            set
            {
                _harpBoard = value;
            }
        }
    
        /// <summary>
        /// Treadmill settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("settings")]
        [System.ComponentModel.DescriptionAttribute("Treadmill settings")]
        public AindBehaviorServicesRigTreadmill Settings
        {
            get
            {
                return _settings;
            }
            set
            {
                _settings = value;
            }
        }
    
        public System.IObservable<AindBehaviorVrForagingRigTreadmill> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindBehaviorVrForagingRigTreadmill(this)));
        }
    
        public System.IObservable<AindBehaviorVrForagingRigTreadmill> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindBehaviorVrForagingRigTreadmill(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("harp_board = " + _harpBoard + ", ");
            stringBuilder.Append("settings = " + _settings);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingRig
    {
    
        private string _version = "0.3.0";
    
        private string _computerName;
    
        private string _rigName;
    
        private CameraControllerSpinnakerCamera _triggeredCameraController = new CameraControllerSpinnakerCamera();
    
        private CameraControllerWebCamera _monitoringCameraController;
    
        private HarpBehavior _harpBehavior = new HarpBehavior();
    
        private HarpOlfactometer _harpOlfactometer = new HarpOlfactometer();
    
        private HarpLickometer _harpLickometer = new HarpLickometer();
    
        private HarpClockGenerator _harpClockGenerator = new HarpClockGenerator();
    
        private HarpAnalogInput _harpAnalogInput;
    
        private AindBehaviorVrForagingRigTreadmill _treadmill = new AindBehaviorVrForagingRigTreadmill();
    
        private HarpSniffDetector _harpSniffDetector;
    
        private Screen _screen;
    
        private RigCalibration _calibration = new RigCalibration();
    
        public AindVrForagingRig()
        {
        }
    
        protected AindVrForagingRig(AindVrForagingRig other)
        {
            _version = other._version;
            _computerName = other._computerName;
            _rigName = other._rigName;
            _triggeredCameraController = other._triggeredCameraController;
            _monitoringCameraController = other._monitoringCameraController;
            _harpBehavior = other._harpBehavior;
            _harpOlfactometer = other._harpOlfactometer;
            _harpLickometer = other._harpLickometer;
            _harpClockGenerator = other._harpClockGenerator;
            _harpAnalogInput = other._harpAnalogInput;
            _treadmill = other._treadmill;
            _harpSniffDetector = other._harpSniffDetector;
            _screen = other._screen;
            _calibration = other._calibration;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Computer name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("computer_name")]
        [System.ComponentModel.DescriptionAttribute("Computer name")]
        public string ComputerName
        {
            get
            {
                return _computerName;
            }
            set
            {
                _computerName = value;
            }
        }
    
        /// <summary>
        /// Rig name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rig_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Rig name")]
        public string RigName
        {
            get
            {
                return _rigName;
            }
            set
            {
                _rigName = value;
            }
        }
    
        /// <summary>
        /// Required camera controller to triggered cameras.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("triggered_camera_controller", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Required camera controller to triggered cameras.")]
        public CameraControllerSpinnakerCamera TriggeredCameraController
        {
            get
            {
                return _triggeredCameraController;
            }
            set
            {
                _triggeredCameraController = value;
            }
        }
    
        /// <summary>
        /// Optional camera controller for monitoring cameras.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("monitoring_camera_controller")]
        [System.ComponentModel.DescriptionAttribute("Optional camera controller for monitoring cameras.")]
        public CameraControllerWebCamera MonitoringCameraController
        {
            get
            {
                return _monitoringCameraController;
            }
            set
            {
                _monitoringCameraController = value;
            }
        }
    
        /// <summary>
        /// Harp behavior
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_behavior", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp behavior")]
        public HarpBehavior HarpBehavior
        {
            get
            {
                return _harpBehavior;
            }
            set
            {
                _harpBehavior = value;
            }
        }
    
        /// <summary>
        /// Harp olfactometer
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_olfactometer", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp olfactometer")]
        public HarpOlfactometer HarpOlfactometer
        {
            get
            {
                return _harpOlfactometer;
            }
            set
            {
                _harpOlfactometer = value;
            }
        }
    
        /// <summary>
        /// Harp lickometer
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_lickometer", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp lickometer")]
        public HarpLickometer HarpLickometer
        {
            get
            {
                return _harpLickometer;
            }
            set
            {
                _harpLickometer = value;
            }
        }
    
        /// <summary>
        /// Harp clock generator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_clock_generator", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp clock generator")]
        public HarpClockGenerator HarpClockGenerator
        {
            get
            {
                return _harpClockGenerator;
            }
            set
            {
                _harpClockGenerator = value;
            }
        }
    
        /// <summary>
        /// Harp analog input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_analog_input")]
        [System.ComponentModel.DescriptionAttribute("Harp analog input")]
        public HarpAnalogInput HarpAnalogInput
        {
            get
            {
                return _harpAnalogInput;
            }
            set
            {
                _harpAnalogInput = value;
            }
        }
    
        /// <summary>
        /// Treadmill settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("treadmill", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Treadmill settings")]
        public AindBehaviorVrForagingRigTreadmill Treadmill
        {
            get
            {
                return _treadmill;
            }
            set
            {
                _treadmill = value;
            }
        }
    
        /// <summary>
        /// Sniff detector settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_sniff_detector")]
        [System.ComponentModel.DescriptionAttribute("Sniff detector settings")]
        public HarpSniffDetector HarpSniffDetector
        {
            get
            {
                return _harpSniffDetector;
            }
            set
            {
                _harpSniffDetector = value;
            }
        }
    
        /// <summary>
        /// Screen settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("screen")]
        [System.ComponentModel.DescriptionAttribute("Screen settings")]
        public Screen Screen
        {
            get
            {
                return _screen;
            }
            set
            {
                _screen = value;
            }
        }
    
        /// <summary>
        /// Calibration models
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Calibration models")]
        public RigCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        public System.IObservable<AindVrForagingRig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindVrForagingRig(this)));
        }
    
        public System.IObservable<AindVrForagingRig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindVrForagingRig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("version = " + _version + ", ");
            stringBuilder.Append("computer_name = " + _computerName + ", ");
            stringBuilder.Append("rig_name = " + _rigName + ", ");
            stringBuilder.Append("triggered_camera_controller = " + _triggeredCameraController + ", ");
            stringBuilder.Append("monitoring_camera_controller = " + _monitoringCameraController + ", ");
            stringBuilder.Append("harp_behavior = " + _harpBehavior + ", ");
            stringBuilder.Append("harp_olfactometer = " + _harpOlfactometer + ", ");
            stringBuilder.Append("harp_lickometer = " + _harpLickometer + ", ");
            stringBuilder.Append("harp_clock_generator = " + _harpClockGenerator + ", ");
            stringBuilder.Append("harp_analog_input = " + _harpAnalogInput + ", ");
            stringBuilder.Append("treadmill = " + _treadmill + ", ");
            stringBuilder.Append("harp_sniff_detector = " + _harpSniffDetector + ", ");
            stringBuilder.Append("screen = " + _screen + ", ");
            stringBuilder.Append("calibration = " + _calibration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OlfactometerChannelConfigFlowRateCapacity
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
        _100 = 100,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1000")]
        _1000 = 1000,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SpinnakerCameraColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; private set; }

        public System.Type Type { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpTreadmill>))]
    public partial class MatchTreadmillBoard : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(TreadmillBoard);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchTreadmillBoard),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<TreadmillBoard> source)
            where TResult : TreadmillBoard
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<TreadmillBoard>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterFfmpeg>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterOpenCv>))]
    public partial class MatchVideoWriter : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(VideoWriter);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchVideoWriter),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<VideoWriter> source)
            where TResult : VideoWriter
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<VideoWriter>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<BaseModel> source)
        {
            return Process<BaseModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraControllerSpinnakerCamera> source)
        {
            return Process<CameraControllerSpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraControllerWebCamera> source)
        {
            return Process<CameraControllerWebCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpAnalogInput> source)
        {
            return Process<HarpAnalogInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBehavior> source)
        {
            return Process<HarpBehavior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpClockGenerator> source)
        {
            return Process<HarpClockGenerator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpLickometer> source)
        {
            return Process<HarpLickometer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpOlfactometer> source)
        {
            return Process<HarpOlfactometer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpSniffDetector> source)
        {
            return Process<HarpSniffDetector>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpTreadmill> source)
        {
            return Process<HarpTreadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Measurement> source)
        {
            return Process<Measurement>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibration> source)
        {
            return Process<OlfactometerCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibrationInput> source)
        {
            return Process<OlfactometerCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibrationOutput> source)
        {
            return Process<OlfactometerCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannelConfig> source)
        {
            return Process<OlfactometerChannelConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RigCalibration> source)
        {
            return Process<RigCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Screen> source)
        {
            return Process<Screen>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TreadmillBoard> source)
        {
            return Process<TreadmillBoard>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriter> source)
        {
            return Process<VideoWriter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriterFfmpeg> source)
        {
            return Process<VideoWriterFfmpeg>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriterOpenCv> source)
        {
            return Process<VideoWriterOpenCv>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibration> source)
        {
            return Process<WaterValveCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationInput> source)
        {
            return Process<WaterValveCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationOutput> source)
        {
            return Process<WaterValveCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WebCamera> source)
        {
            return Process<WebCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindBehaviorServicesRigTreadmill> source)
        {
            return Process<AindBehaviorServicesRigTreadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindBehaviorVrForagingRigTreadmill> source)
        {
            return Process<AindBehaviorVrForagingRigTreadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingRig> source)
        {
            return Process<AindVrForagingRig>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraControllerSpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraControllerWebCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpAnalogInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpClockGenerator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpLickometer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpOlfactometer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpSniffDetector>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpTreadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Measurement>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannelConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RigCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Screen>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TreadmillBoard>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterFfmpeg>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterOpenCv>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WebCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindBehaviorServicesRigTreadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindBehaviorVrForagingRigTreadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingRig>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}