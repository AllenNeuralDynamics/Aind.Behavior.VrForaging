//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema.AindVrForagingTask
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BetaDistribution
    {
    
        private object _family;
    
        private BetaDistributionParameters _distribution_parameters;
    
        private TruncationParameters _truncation_parameters;
    
        private ScalingParameters _scaling_parameters;
    
        public BetaDistribution()
        {
        }
    
        protected BetaDistribution(BetaDistribution other)
        {
            _family = other._family;
            _distribution_parameters = other._distribution_parameters;
            _truncation_parameters = other._truncation_parameters;
            _scaling_parameters = other._scaling_parameters;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public BetaDistributionParameters Distribution_parameters
        {
            get
            {
                return _distribution_parameters;
            }
            set
            {
                _distribution_parameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters Truncation_parameters
        {
            get
            {
                return _truncation_parameters;
            }
            set
            {
                _truncation_parameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters Scaling_parameters
        {
            get
            {
                return _scaling_parameters;
            }
            set
            {
                _scaling_parameters = value;
            }
        }
    
        public System.IObservable<BetaDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BetaDistribution(this)));
        }
    
        public System.IObservable<BetaDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BetaDistribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("distribution_parameters = " + _distribution_parameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncation_parameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scaling_parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BetaDistributionParameters
    {
    
        private object _family;
    
        private double _alpha = 5D;
    
        private double _beta = 5D;
    
        public BetaDistributionParameters()
        {
        }
    
        protected BetaDistributionParameters(BetaDistributionParameters other)
        {
            _family = other._family;
            _alpha = other._alpha;
            _beta = other._beta;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Alpha parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("alpha")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="alpha")]
        [System.ComponentModel.DescriptionAttribute("Alpha parameter of the distribution")]
        public double Alpha
        {
            get
            {
                return _alpha;
            }
            set
            {
                _alpha = value;
            }
        }
    
        /// <summary>
        /// Beta parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("beta")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="beta")]
        [System.ComponentModel.DescriptionAttribute("Beta parameter of the distribution")]
        public double Beta
        {
            get
            {
                return _beta;
            }
            set
            {
                _beta = value;
            }
        }
    
        public System.IObservable<BetaDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BetaDistributionParameters(this)));
        }
    
        public System.IObservable<BetaDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BetaDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("alpha = " + _alpha + ", ");
            stringBuilder.Append("beta = " + _beta);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BinomialDistribution
    {
    
        private object _family;
    
        private BinomialDistributionParameters _distribution_parameters;
    
        private TruncationParameters _truncation_parameters;
    
        private ScalingParameters _scaling_parameters;
    
        public BinomialDistribution()
        {
        }
    
        protected BinomialDistribution(BinomialDistribution other)
        {
            _family = other._family;
            _distribution_parameters = other._distribution_parameters;
            _truncation_parameters = other._truncation_parameters;
            _scaling_parameters = other._scaling_parameters;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public BinomialDistributionParameters Distribution_parameters
        {
            get
            {
                return _distribution_parameters;
            }
            set
            {
                _distribution_parameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters Truncation_parameters
        {
            get
            {
                return _truncation_parameters;
            }
            set
            {
                _truncation_parameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters Scaling_parameters
        {
            get
            {
                return _scaling_parameters;
            }
            set
            {
                _scaling_parameters = value;
            }
        }
    
        public System.IObservable<BinomialDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BinomialDistribution(this)));
        }
    
        public System.IObservable<BinomialDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BinomialDistribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("distribution_parameters = " + _distribution_parameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncation_parameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scaling_parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BinomialDistributionParameters
    {
    
        private object _family;
    
        private int _n = 1;
    
        private double _p = 0.5D;
    
        public BinomialDistributionParameters()
        {
        }
    
        protected BinomialDistributionParameters(BinomialDistributionParameters other)
        {
            _family = other._family;
            _n = other._n;
            _p = other._p;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Number of trials
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("n")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="n")]
        [System.ComponentModel.DescriptionAttribute("Number of trials")]
        public int N
        {
            get
            {
                return _n;
            }
            set
            {
                _n = value;
            }
        }
    
        /// <summary>
        /// Probability of success
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("p")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="p")]
        [System.ComponentModel.DescriptionAttribute("Probability of success")]
        public double P
        {
            get
            {
                return _p;
            }
            set
            {
                _p = value;
            }
        }
    
        public System.IObservable<BinomialDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BinomialDistributionParameters(this)));
        }
    
        public System.IObservable<BinomialDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BinomialDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("n = " + _n + ", ");
            stringBuilder.Append("p = " + _p);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CreateDistribution
    {
    
        private DistributionFamily _family;
    
        private Distribution_parameters _distribution_parameters;
    
        private TruncationParameters _truncation_parameters;
    
        private ScalingParameters _scaling_parameters;
    
        public CreateDistribution()
        {
        }
    
        protected CreateDistribution(CreateDistribution other)
        {
            _family = other._family;
            _distribution_parameters = other._distribution_parameters;
            _truncation_parameters = other._truncation_parameters;
            _scaling_parameters = other._scaling_parameters;
        }
    
        /// <summary>
        /// Family of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        [System.ComponentModel.DescriptionAttribute("Family of the distribution")]
        public DistributionFamily Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public Distribution_parameters Distribution_parameters
        {
            get
            {
                return _distribution_parameters;
            }
            set
            {
                _distribution_parameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters Truncation_parameters
        {
            get
            {
                return _truncation_parameters;
            }
            set
            {
                _truncation_parameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters Scaling_parameters
        {
            get
            {
                return _scaling_parameters;
            }
            set
            {
                _scaling_parameters = value;
            }
        }
    
        public System.IObservable<CreateDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CreateDistribution(this)));
        }
    
        public System.IObservable<CreateDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CreateDistribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("distribution_parameters = " + _distribution_parameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncation_parameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scaling_parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum DistributionFamily
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Scalar")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Scalar")]
        Scalar = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Normal")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Normal")]
        Normal = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="LogNormal")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="LogNormal")]
        LogNormal = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Uniform")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Uniform")]
        Uniform = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Exponential")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Exponential")]
        Exponential = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Gamma")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Gamma")]
        Gamma = 5,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Binomial")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Binomial")]
        Binomial = 6,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Beta")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Beta")]
        Beta = 7,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Poisson")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Poisson")]
        Poisson = 8,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class EnvironmentStatistics
    {
    
        private System.Collections.Generic.List<PatchStatistics> _patches = new System.Collections.Generic.List<PatchStatistics>();
    
        private Matrix2D _transition_matrix;
    
        private int? _first_state;
    
        public EnvironmentStatistics()
        {
        }
    
        protected EnvironmentStatistics(EnvironmentStatistics other)
        {
            _patches = other._patches;
            _transition_matrix = other._transition_matrix;
            _first_state = other._first_state;
        }
    
        /// <summary>
        /// List of patches
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("patches")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="patches")]
        [System.ComponentModel.DescriptionAttribute("List of patches")]
        public System.Collections.Generic.List<PatchStatistics> Patches
        {
            get
            {
                return _patches;
            }
            set
            {
                _patches = value;
            }
        }
    
        /// <summary>
        /// Transition matrix between patches
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("transition_matrix")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="transition_matrix")]
        [System.ComponentModel.DescriptionAttribute("Transition matrix between patches")]
        public Matrix2D Transition_matrix
        {
            get
            {
                return _transition_matrix;
            }
            set
            {
                _transition_matrix = value;
            }
        }
    
        /// <summary>
        /// The first state to be visited. If None, it will be randomly drawn.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("first_state")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="first_state")]
        [System.ComponentModel.DescriptionAttribute("The first state to be visited. If None, it will be randomly drawn.")]
        public int? First_state
        {
            get
            {
                return _first_state;
            }
            set
            {
                _first_state = value;
            }
        }
    
        public System.IObservable<EnvironmentStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new EnvironmentStatistics(this)));
        }
    
        public System.IObservable<EnvironmentStatistics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new EnvironmentStatistics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("patches = " + _patches + ", ");
            stringBuilder.Append("transition_matrix = " + _transition_matrix + ", ");
            stringBuilder.Append("first_state = " + _first_state);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ExponentialDistribution
    {
    
        private object _family;
    
        private ExponentialDistributionParameters _distribution_parameters;
    
        private TruncationParameters _truncation_parameters;
    
        private ScalingParameters _scaling_parameters;
    
        public ExponentialDistribution()
        {
        }
    
        protected ExponentialDistribution(ExponentialDistribution other)
        {
            _family = other._family;
            _distribution_parameters = other._distribution_parameters;
            _truncation_parameters = other._truncation_parameters;
            _scaling_parameters = other._scaling_parameters;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public ExponentialDistributionParameters Distribution_parameters
        {
            get
            {
                return _distribution_parameters;
            }
            set
            {
                _distribution_parameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters Truncation_parameters
        {
            get
            {
                return _truncation_parameters;
            }
            set
            {
                _truncation_parameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters Scaling_parameters
        {
            get
            {
                return _scaling_parameters;
            }
            set
            {
                _scaling_parameters = value;
            }
        }
    
        public System.IObservable<ExponentialDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ExponentialDistribution(this)));
        }
    
        public System.IObservable<ExponentialDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ExponentialDistribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("distribution_parameters = " + _distribution_parameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncation_parameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scaling_parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ExponentialDistributionParameters
    {
    
        private object _family;
    
        private double _rate = 0D;
    
        public ExponentialDistributionParameters()
        {
        }
    
        protected ExponentialDistributionParameters(ExponentialDistributionParameters other)
        {
            _family = other._family;
            _rate = other._rate;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<ExponentialDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ExponentialDistributionParameters(this)));
        }
    
        public System.IObservable<ExponentialDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ExponentialDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ForagingSettings
    {
    
        private object _task_stage;
    
        public ForagingSettings()
        {
        }
    
        protected ForagingSettings(ForagingSettings other)
        {
            _task_stage = other._task_stage;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("task_stage")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="task_stage")]
        public object Task_stage
        {
            get
            {
                return _task_stage;
            }
            set
            {
                _task_stage = value;
            }
        }
    
        public System.IObservable<ForagingSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ForagingSettings(this)));
        }
    
        public System.IObservable<ForagingSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ForagingSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("task_stage = " + _task_stage);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class GammaDistribution
    {
    
        private object _family;
    
        private GammaDistributionParameters _distribution_parameters;
    
        private TruncationParameters _truncation_parameters;
    
        private ScalingParameters _scaling_parameters;
    
        public GammaDistribution()
        {
        }
    
        protected GammaDistribution(GammaDistribution other)
        {
            _family = other._family;
            _distribution_parameters = other._distribution_parameters;
            _truncation_parameters = other._truncation_parameters;
            _scaling_parameters = other._scaling_parameters;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public GammaDistributionParameters Distribution_parameters
        {
            get
            {
                return _distribution_parameters;
            }
            set
            {
                _distribution_parameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters Truncation_parameters
        {
            get
            {
                return _truncation_parameters;
            }
            set
            {
                _truncation_parameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters Scaling_parameters
        {
            get
            {
                return _scaling_parameters;
            }
            set
            {
                _scaling_parameters = value;
            }
        }
    
        public System.IObservable<GammaDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new GammaDistribution(this)));
        }
    
        public System.IObservable<GammaDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new GammaDistribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("distribution_parameters = " + _distribution_parameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncation_parameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scaling_parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class GammaDistributionParameters
    {
    
        private object _family;
    
        private double _shape = 1D;
    
        private double _rate = 1D;
    
        public GammaDistributionParameters()
        {
        }
    
        protected GammaDistributionParameters(GammaDistributionParameters other)
        {
            _family = other._family;
            _shape = other._shape;
            _rate = other._rate;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Shape parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shape")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="shape")]
        [System.ComponentModel.DescriptionAttribute("Shape parameter of the distribution")]
        public double Shape
        {
            get
            {
                return _shape;
            }
            set
            {
                _shape = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<GammaDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new GammaDistributionParameters(this)));
        }
    
        public System.IObservable<GammaDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new GammaDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("shape = " + _shape + ", ");
            stringBuilder.Append("rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HabituationSettings
    {
    
        private object _task_stage;
    
        private ExponentialDistribution _distance_to_reward = new ExponentialDistribution();
    
        private RenderSpecification _reward_specification;
    
        public HabituationSettings()
        {
        }
    
        protected HabituationSettings(HabituationSettings other)
        {
            _task_stage = other._task_stage;
            _distance_to_reward = other._distance_to_reward;
            _reward_specification = other._reward_specification;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("task_stage")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="task_stage")]
        public object Task_stage
        {
            get
            {
                return _task_stage;
            }
            set
            {
                _task_stage = value;
            }
        }
    
        /// <summary>
        /// Distance (cm) to the reward
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distance_to_reward", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distance_to_reward")]
        [System.ComponentModel.DescriptionAttribute("Distance (cm) to the reward")]
        public ExponentialDistribution Distance_to_reward
        {
            get
            {
                return _distance_to_reward;
            }
            set
            {
                _distance_to_reward = value;
            }
        }
    
        /// <summary>
        /// Contrast of the environement
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_specification")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_specification")]
        [System.ComponentModel.DescriptionAttribute("Contrast of the environement")]
        public RenderSpecification Reward_specification
        {
            get
            {
                return _reward_specification;
            }
            set
            {
                _reward_specification = value;
            }
        }
    
        public System.IObservable<HabituationSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HabituationSettings(this)));
        }
    
        public System.IObservable<HabituationSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HabituationSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("task_stage = " + _task_stage + ", ");
            stringBuilder.Append("distance_to_reward = " + _distance_to_reward + ", ");
            stringBuilder.Append("reward_specification = " + _reward_specification);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LogNormalDistribution
    {
    
        private object _family;
    
        private LogNormalDistributionParameters _distribution_parameters;
    
        private TruncationParameters _truncation_parameters;
    
        private ScalingParameters _scaling_parameters;
    
        public LogNormalDistribution()
        {
        }
    
        protected LogNormalDistribution(LogNormalDistribution other)
        {
            _family = other._family;
            _distribution_parameters = other._distribution_parameters;
            _truncation_parameters = other._truncation_parameters;
            _scaling_parameters = other._scaling_parameters;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public LogNormalDistributionParameters Distribution_parameters
        {
            get
            {
                return _distribution_parameters;
            }
            set
            {
                _distribution_parameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters Truncation_parameters
        {
            get
            {
                return _truncation_parameters;
            }
            set
            {
                _truncation_parameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters Scaling_parameters
        {
            get
            {
                return _scaling_parameters;
            }
            set
            {
                _scaling_parameters = value;
            }
        }
    
        public System.IObservable<LogNormalDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogNormalDistribution(this)));
        }
    
        public System.IObservable<LogNormalDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogNormalDistribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("distribution_parameters = " + _distribution_parameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncation_parameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scaling_parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LogNormalDistributionParameters
    {
    
        private object _family;
    
        private double _mean = 0D;
    
        private double _std = 0D;
    
        public LogNormalDistributionParameters()
        {
        }
    
        protected LogNormalDistributionParameters(LogNormalDistributionParameters other)
        {
            _family = other._family;
            _mean = other._mean;
            _std = other._std;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Mean of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="mean")]
        [System.ComponentModel.DescriptionAttribute("Mean of the distribution")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        /// <summary>
        /// Standard deviation of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="std")]
        [System.ComponentModel.DescriptionAttribute("Standard deviation of the distribution")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        public System.IObservable<LogNormalDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogNormalDistributionParameters(this)));
        }
    
        public System.IObservable<LogNormalDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogNormalDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("mean = " + _mean + ", ");
            stringBuilder.Append("std = " + _std);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Matrix2D
    {
    
        private System.Collections.Generic.List<System.Collections.Generic.List<double>> _data = new System.Collections.Generic.List<System.Collections.Generic.List<double>>();
    
        public Matrix2D()
        {
        }
    
        protected Matrix2D(Matrix2D other)
        {
            _data = other._data;
        }
    
        /// <summary>
        /// Defines a 2D matrix
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("data")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="data")]
        [System.ComponentModel.DescriptionAttribute("Defines a 2D matrix")]
        public System.Collections.Generic.List<System.Collections.Generic.List<double>> Data
        {
            get
            {
                return _data;
            }
            set
            {
                _data = value;
            }
        }
    
        public System.IObservable<Matrix2D> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Matrix2D(this)));
        }
    
        public System.IObservable<Matrix2D> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Matrix2D(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("data = " + _data);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class MovableSpoutControl
    {
    
        private bool _enabled = false;
    
        private double _time_to_collect_after_reward = 1D;
    
        public MovableSpoutControl()
        {
        }
    
        protected MovableSpoutControl(MovableSpoutControl other)
        {
            _enabled = other._enabled;
            _time_to_collect_after_reward = other._time_to_collect_after_reward;
        }
    
        /// <summary>
        /// Whether the movable spout is enabled
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="enabled")]
        [System.ComponentModel.DescriptionAttribute("Whether the movable spout is enabled")]
        public bool Enabled
        {
            get
            {
                return _enabled;
            }
            set
            {
                _enabled = value;
            }
        }
    
        /// <summary>
        /// Time (s) to collect after reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_to_collect_after_reward")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="time_to_collect_after_reward")]
        [System.ComponentModel.DescriptionAttribute("Time (s) to collect after reward")]
        public double Time_to_collect_after_reward
        {
            get
            {
                return _time_to_collect_after_reward;
            }
            set
            {
                _time_to_collect_after_reward = value;
            }
        }
    
        public System.IObservable<MovableSpoutControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new MovableSpoutControl(this)));
        }
    
        public System.IObservable<MovableSpoutControl> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new MovableSpoutControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("enabled = " + _enabled + ", ");
            stringBuilder.Append("time_to_collect_after_reward = " + _time_to_collect_after_reward);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NormalDistribution
    {
    
        private object _family;
    
        private NormalDistributionParameters _distribution_parameters;
    
        private TruncationParameters _truncation_parameters;
    
        private ScalingParameters _scaling_parameters;
    
        public NormalDistribution()
        {
        }
    
        protected NormalDistribution(NormalDistribution other)
        {
            _family = other._family;
            _distribution_parameters = other._distribution_parameters;
            _truncation_parameters = other._truncation_parameters;
            _scaling_parameters = other._scaling_parameters;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public NormalDistributionParameters Distribution_parameters
        {
            get
            {
                return _distribution_parameters;
            }
            set
            {
                _distribution_parameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters Truncation_parameters
        {
            get
            {
                return _truncation_parameters;
            }
            set
            {
                _truncation_parameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters Scaling_parameters
        {
            get
            {
                return _scaling_parameters;
            }
            set
            {
                _scaling_parameters = value;
            }
        }
    
        public System.IObservable<NormalDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NormalDistribution(this)));
        }
    
        public System.IObservable<NormalDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NormalDistribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("distribution_parameters = " + _distribution_parameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncation_parameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scaling_parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NormalDistributionParameters
    {
    
        private object _family;
    
        private double _mean = 0D;
    
        private double _std = 0D;
    
        public NormalDistributionParameters()
        {
        }
    
        protected NormalDistributionParameters(NormalDistributionParameters other)
        {
            _family = other._family;
            _mean = other._mean;
            _std = other._std;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Mean of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="mean")]
        [System.ComponentModel.DescriptionAttribute("Mean of the distribution")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        /// <summary>
        /// Standard deviation of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="std")]
        [System.ComponentModel.DescriptionAttribute("Standard deviation of the distribution")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        public System.IObservable<NormalDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NormalDistributionParameters(this)));
        }
    
        public System.IObservable<NormalDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NormalDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("mean = " + _mean + ", ");
            stringBuilder.Append("std = " + _std);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NumericalUpdater
    {
    
        private NumericalUpdaterOperation _operation = AindVrForagingDataSchema.AindVrForagingTask.NumericalUpdaterOperation.None;
    
        private NumericalUpdaterParameters _parameters;
    
        public NumericalUpdater()
        {
        }
    
        protected NumericalUpdater(NumericalUpdater other)
        {
            _operation = other._operation;
            _parameters = other._parameters;
        }
    
        /// <summary>
        /// Operation to perform on the parameter
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="operation")]
        [System.ComponentModel.DescriptionAttribute("Operation to perform on the parameter")]
        public NumericalUpdaterOperation Operation
        {
            get
            {
                return _operation;
            }
            set
            {
                _operation = value;
            }
        }
    
        /// <summary>
        /// Parameters of the updater
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the updater")]
        public NumericalUpdaterParameters Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value;
            }
        }
    
        public System.IObservable<NumericalUpdater> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NumericalUpdater(this)));
        }
    
        public System.IObservable<NumericalUpdater> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NumericalUpdater(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("operation = " + _operation + ", ");
            stringBuilder.Append("parameters = " + _parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum NumericalUpdaterOperation
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Offset")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Offset")]
        Offset = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Gain")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Gain")]
        Gain = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Set")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Set")]
        Set = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OffsetPercentage")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="OffsetPercentage")]
        OffsetPercentage = 4,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NumericalUpdaterParameters
    {
    
        private double _initial_value = 0D;
    
        private double _increment = 0D;
    
        private double _decrement = 0D;
    
        private double _minimum = 0D;
    
        private double _maximum = 0D;
    
        public NumericalUpdaterParameters()
        {
        }
    
        protected NumericalUpdaterParameters(NumericalUpdaterParameters other)
        {
            _initial_value = other._initial_value;
            _increment = other._increment;
            _decrement = other._decrement;
            _minimum = other._minimum;
            _maximum = other._maximum;
        }
    
        /// <summary>
        /// Initial value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("initial_value")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="initial_value")]
        [System.ComponentModel.DescriptionAttribute("Initial value of the parameter")]
        public double Initial_value
        {
            get
            {
                return _initial_value;
            }
            set
            {
                _initial_value = value;
            }
        }
    
        /// <summary>
        /// Value to increment the parameter by
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("increment")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="increment")]
        [System.ComponentModel.DescriptionAttribute("Value to increment the parameter by")]
        public double Increment
        {
            get
            {
                return _increment;
            }
            set
            {
                _increment = value;
            }
        }
    
        /// <summary>
        /// Value to decrement the parameter by
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("decrement")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="decrement")]
        [System.ComponentModel.DescriptionAttribute("Value to decrement the parameter by")]
        public double Decrement
        {
            get
            {
                return _decrement;
            }
            set
            {
                _decrement = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("minimum")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minimum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the parameter")]
        public double Minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maximum")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maximum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the parameter")]
        public double Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        public System.IObservable<NumericalUpdaterParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NumericalUpdaterParameters(this)));
        }
    
        public System.IObservable<NumericalUpdaterParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NumericalUpdaterParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("initial_value = " + _initial_value + ", ");
            stringBuilder.Append("increment = " + _increment + ", ");
            stringBuilder.Append("decrement = " + _decrement + ", ");
            stringBuilder.Append("minimum = " + _minimum + ", ");
            stringBuilder.Append("maximum = " + _maximum);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OdorControl
    {
    
        private double _valve_max_open_time = 10D;
    
        private double _target_total_flow = 1000D;
    
        private bool _use_channel_3_as_carrier = true;
    
        private double _target_odor_flow = 100D;
    
        public OdorControl()
        {
        }
    
        protected OdorControl(OdorControl other)
        {
            _valve_max_open_time = other._valve_max_open_time;
            _target_total_flow = other._target_total_flow;
            _use_channel_3_as_carrier = other._use_channel_3_as_carrier;
            _target_odor_flow = other._target_odor_flow;
        }
    
        /// <summary>
        /// Maximum time (s) the valve can be open continuously
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_max_open_time")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valve_max_open_time")]
        [System.ComponentModel.DescriptionAttribute("Maximum time (s) the valve can be open continuously")]
        public double Valve_max_open_time
        {
            get
            {
                return _valve_max_open_time;
            }
            set
            {
                _valve_max_open_time = value;
            }
        }
    
        /// <summary>
        /// Target total flow (ml/s) of the odor mixture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_total_flow")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="target_total_flow")]
        [System.ComponentModel.DescriptionAttribute("Target total flow (ml/s) of the odor mixture")]
        public double Target_total_flow
        {
            get
            {
                return _target_total_flow;
            }
            set
            {
                _target_total_flow = value;
            }
        }
    
        /// <summary>
        /// Whether to use channel 3 as carrier
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_channel_3_as_carrier")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="use_channel_3_as_carrier")]
        [System.ComponentModel.DescriptionAttribute("Whether to use channel 3 as carrier")]
        public bool Use_channel_3_as_carrier
        {
            get
            {
                return _use_channel_3_as_carrier;
            }
            set
            {
                _use_channel_3_as_carrier = value;
            }
        }
    
        /// <summary>
        /// Target odor flow (ml/s) in the odor mixture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_odor_flow")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="target_odor_flow")]
        [System.ComponentModel.DescriptionAttribute("Target odor flow (ml/s) in the odor mixture")]
        public double Target_odor_flow
        {
            get
            {
                return _target_odor_flow;
            }
            set
            {
                _target_odor_flow = value;
            }
        }
    
        public System.IObservable<OdorControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OdorControl(this)));
        }
    
        public System.IObservable<OdorControl> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OdorControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("valve_max_open_time = " + _valve_max_open_time + ", ");
            stringBuilder.Append("target_total_flow = " + _target_total_flow + ", ");
            stringBuilder.Append("use_channel_3_as_carrier = " + _use_channel_3_as_carrier + ", ");
            stringBuilder.Append("target_odor_flow = " + _target_odor_flow);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OdorSpecification
    {
    
        private OdorSpecificationIndex _index;
    
        private double _concentration = 1D;
    
        public OdorSpecification()
        {
        }
    
        protected OdorSpecification(OdorSpecification other)
        {
            _index = other._index;
            _concentration = other._concentration;
        }
    
        /// <summary>
        /// Index of the odor to be used
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="index")]
        [System.ComponentModel.DescriptionAttribute("Index of the odor to be used")]
        public OdorSpecificationIndex Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        /// <summary>
        /// Concentration of the odor
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("concentration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="concentration")]
        [System.ComponentModel.DescriptionAttribute("Concentration of the odor")]
        public double Concentration
        {
            get
            {
                return _concentration;
            }
            set
            {
                _concentration = value;
            }
        }
    
        public System.IObservable<OdorSpecification> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OdorSpecification(this)));
        }
    
        public System.IObservable<OdorSpecification> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OdorSpecification(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("index = " + _index + ", ");
            stringBuilder.Append("concentration = " + _concentration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OperantLogic
    {
    
        private bool _is_operant = true;
    
        private double _stop_duration = 0D;
    
        private double _time_to_collect_reward = 100000D;
    
        private double _grace_distance_threshold = 10D;
    
        public OperantLogic()
        {
        }
    
        protected OperantLogic(OperantLogic other)
        {
            _is_operant = other._is_operant;
            _stop_duration = other._stop_duration;
            _time_to_collect_reward = other._time_to_collect_reward;
            _grace_distance_threshold = other._grace_distance_threshold;
        }
    
        /// <summary>
        /// Will the trial implement operant logic
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("is_operant")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="is_operant")]
        [System.ComponentModel.DescriptionAttribute("Will the trial implement operant logic")]
        public bool Is_operant
        {
            get
            {
                return _is_operant;
            }
            set
            {
                _is_operant = value;
            }
        }
    
        /// <summary>
        /// Duration (s) the animal must stop for to lock its choice
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stop_duration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stop_duration")]
        [System.ComponentModel.DescriptionAttribute("Duration (s) the animal must stop for to lock its choice")]
        public double Stop_duration
        {
            get
            {
                return _stop_duration;
            }
            set
            {
                _stop_duration = value;
            }
        }
    
        /// <summary>
        /// Time(s) the animal has to collect the reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_to_collect_reward")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="time_to_collect_reward")]
        [System.ComponentModel.DescriptionAttribute("Time(s) the animal has to collect the reward")]
        public double Time_to_collect_reward
        {
            get
            {
                return _time_to_collect_reward;
            }
            set
            {
                _time_to_collect_reward = value;
            }
        }
    
        /// <summary>
        /// Virtual distance (cm) the animal must be within to not abort the current choice
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("grace_distance_threshold")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="grace_distance_threshold")]
        [System.ComponentModel.DescriptionAttribute("Virtual distance (cm) the animal must be within to not abort the current choice")]
        public double Grace_distance_threshold
        {
            get
            {
                return _grace_distance_threshold;
            }
            set
            {
                _grace_distance_threshold = value;
            }
        }
    
        public System.IObservable<OperantLogic> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OperantLogic(this)));
        }
    
        public System.IObservable<OperantLogic> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OperantLogic(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("is_operant = " + _is_operant + ", ");
            stringBuilder.Append("stop_duration = " + _stop_duration + ", ");
            stringBuilder.Append("time_to_collect_reward = " + _time_to_collect_reward + ", ");
            stringBuilder.Append("grace_distance_threshold = " + _grace_distance_threshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OperationControl
    {
    
        private MovableSpoutControl _movable_spout_control;
    
        private OdorControl _odor_control;
    
        private PositionControl _position_control;
    
        public OperationControl()
        {
        }
    
        protected OperationControl(OperationControl other)
        {
            _movable_spout_control = other._movable_spout_control;
            _odor_control = other._odor_control;
            _position_control = other._position_control;
        }
    
        /// <summary>
        /// Control of the movable spout
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("movable_spout_control")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="movable_spout_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the movable spout")]
        public MovableSpoutControl Movable_spout_control
        {
            get
            {
                return _movable_spout_control;
            }
            set
            {
                _movable_spout_control = value;
            }
        }
    
        /// <summary>
        /// Control of the odor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor_control")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odor_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the odor")]
        public OdorControl Odor_control
        {
            get
            {
                return _odor_control;
            }
            set
            {
                _odor_control = value;
            }
        }
    
        /// <summary>
        /// Control of the position
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("position_control")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="position_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the position")]
        public PositionControl Position_control
        {
            get
            {
                return _position_control;
            }
            set
            {
                _position_control = value;
            }
        }
    
        public System.IObservable<OperationControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OperationControl(this)));
        }
    
        public System.IObservable<OperationControl> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OperationControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("movable_spout_control = " + _movable_spout_control + ", ");
            stringBuilder.Append("odor_control = " + _odor_control + ", ");
            stringBuilder.Append("position_control = " + _position_control);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PatchStatistics
    {
    
        private string _label = "";
    
        private int _state_index = 0;
    
        private OdorSpecification _odor_specification;
    
        private RewardSpecification _reward_specification;
    
        private VirtualSiteGeneration _virtual_site_generation;
    
        public PatchStatistics()
        {
        }
    
        protected PatchStatistics(PatchStatistics other)
        {
            _label = other._label;
            _state_index = other._state_index;
            _odor_specification = other._odor_specification;
            _reward_specification = other._reward_specification;
            _virtual_site_generation = other._virtual_site_generation;
        }
    
        /// <summary>
        /// Label of the patch
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        [System.ComponentModel.DescriptionAttribute("Label of the patch")]
        public string Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        /// <summary>
        /// Index of the state
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("state_index")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="state_index")]
        [System.ComponentModel.DescriptionAttribute("Index of the state")]
        public int State_index
        {
            get
            {
                return _state_index;
            }
            set
            {
                _state_index = value;
            }
        }
    
        /// <summary>
        /// The optional odor specification of the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor_specification")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odor_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional odor specification of the patch")]
        public OdorSpecification Odor_specification
        {
            get
            {
                return _odor_specification;
            }
            set
            {
                _odor_specification = value;
            }
        }
    
        /// <summary>
        /// The optional reward specification of the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_specification")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional reward specification of the patch")]
        public RewardSpecification Reward_specification
        {
            get
            {
                return _reward_specification;
            }
            set
            {
                _reward_specification = value;
            }
        }
    
        /// <summary>
        /// Virtual site generation specification
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("virtual_site_generation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="virtual_site_generation")]
        [System.ComponentModel.DescriptionAttribute("Virtual site generation specification")]
        public VirtualSiteGeneration Virtual_site_generation
        {
            get
            {
                return _virtual_site_generation;
            }
            set
            {
                _virtual_site_generation = value;
            }
        }
    
        public System.IObservable<PatchStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchStatistics(this)));
        }
    
        public System.IObservable<PatchStatistics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchStatistics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("label = " + _label + ", ");
            stringBuilder.Append("state_index = " + _state_index + ", ");
            stringBuilder.Append("odor_specification = " + _odor_specification + ", ");
            stringBuilder.Append("reward_specification = " + _reward_specification + ", ");
            stringBuilder.Append("virtual_site_generation = " + _virtual_site_generation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PoissonDistribution
    {
    
        private object _family;
    
        private PoissonDistributionParameters _distribution_parameters;
    
        private TruncationParameters _truncation_parameters;
    
        private ScalingParameters _scaling_parameters;
    
        public PoissonDistribution()
        {
        }
    
        protected PoissonDistribution(PoissonDistribution other)
        {
            _family = other._family;
            _distribution_parameters = other._distribution_parameters;
            _truncation_parameters = other._truncation_parameters;
            _scaling_parameters = other._scaling_parameters;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public PoissonDistributionParameters Distribution_parameters
        {
            get
            {
                return _distribution_parameters;
            }
            set
            {
                _distribution_parameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters Truncation_parameters
        {
            get
            {
                return _truncation_parameters;
            }
            set
            {
                _truncation_parameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters Scaling_parameters
        {
            get
            {
                return _scaling_parameters;
            }
            set
            {
                _scaling_parameters = value;
            }
        }
    
        public System.IObservable<PoissonDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PoissonDistribution(this)));
        }
    
        public System.IObservable<PoissonDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PoissonDistribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("distribution_parameters = " + _distribution_parameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncation_parameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scaling_parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PoissonDistributionParameters
    {
    
        private object _family;
    
        private double _rate = 1D;
    
        public PoissonDistributionParameters()
        {
        }
    
        protected PoissonDistributionParameters(PoissonDistributionParameters other)
        {
            _family = other._family;
            _rate = other._rate;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the Poisson process that generates the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the Poisson process that generates the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<PoissonDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PoissonDistributionParameters(this)));
        }
    
        public System.IObservable<PoissonDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PoissonDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PositionControl
    {
    
        private Vector3 _gain;
    
        private Vector3 _initial_position;
    
        private double _frequency_filter_cutoff = 0.5D;
    
        private double _velocity_threshold = 1D;
    
        public PositionControl()
        {
        }
    
        protected PositionControl(PositionControl other)
        {
            _gain = other._gain;
            _initial_position = other._initial_position;
            _frequency_filter_cutoff = other._frequency_filter_cutoff;
            _velocity_threshold = other._velocity_threshold;
        }
    
        /// <summary>
        /// Gain of the position control.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        [System.ComponentModel.DescriptionAttribute("Gain of the position control.")]
        public Vector3 Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Gain of the position control.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("initial_position")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="initial_position")]
        [System.ComponentModel.DescriptionAttribute("Gain of the position control.")]
        public Vector3 Initial_position
        {
            get
            {
                return _initial_position;
            }
            set
            {
                _initial_position = value;
            }
        }
    
        /// <summary>
        /// Cutoff frequency (Hz) of the low-pass filter used to filter the velocity signal.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frequency_filter_cutoff")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frequency_filter_cutoff")]
        [System.ComponentModel.DescriptionAttribute("Cutoff frequency (Hz) of the low-pass filter used to filter the velocity signal.")]
        public double Frequency_filter_cutoff
        {
            get
            {
                return _frequency_filter_cutoff;
            }
            set
            {
                _frequency_filter_cutoff = value;
            }
        }
    
        /// <summary>
        /// Threshold (cm/s) of the velocity signal used to detect when the animal is moving.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("velocity_threshold")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="velocity_threshold")]
        [System.ComponentModel.DescriptionAttribute("Threshold (cm/s) of the velocity signal used to detect when the animal is moving." +
            "")]
        public double Velocity_threshold
        {
            get
            {
                return _velocity_threshold;
            }
            set
            {
                _velocity_threshold = value;
            }
        }
    
        public System.IObservable<PositionControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PositionControl(this)));
        }
    
        public System.IObservable<PositionControl> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PositionControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("gain = " + _gain + ", ");
            stringBuilder.Append("initial_position = " + _initial_position + ", ");
            stringBuilder.Append("frequency_filter_cutoff = " + _frequency_filter_cutoff + ", ");
            stringBuilder.Append("velocity_threshold = " + _velocity_threshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RenderSpecification
    {
    
        private double? _contrast;
    
        public RenderSpecification()
        {
        }
    
        protected RenderSpecification(RenderSpecification other)
        {
            _contrast = other._contrast;
        }
    
        /// <summary>
        /// Contrast of the texture
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("contrast")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="contrast")]
        [System.ComponentModel.DescriptionAttribute("Contrast of the texture")]
        public double? Contrast
        {
            get
            {
                return _contrast;
            }
            set
            {
                _contrast = value;
            }
        }
    
        public System.IObservable<RenderSpecification> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RenderSpecification(this)));
        }
    
        public System.IObservable<RenderSpecification> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RenderSpecification(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("contrast = " + _contrast);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardSpecification
    {
    
        private double _amount;
    
        private OperantLogic _operant_logic;
    
        private double _probability = 1D;
    
        private Scalar _delay;
    
        public RewardSpecification()
        {
        }
    
        protected RewardSpecification(RewardSpecification other)
        {
            _amount = other._amount;
            _operant_logic = other._operant_logic;
            _probability = other._probability;
            _delay = other._delay;
        }
    
        /// <summary>
        /// Amount of reward (a.u.)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("amount", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="amount")]
        [System.ComponentModel.DescriptionAttribute("Amount of reward (a.u.)")]
        public double Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// The optional operant logic of the reward
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operant_logic")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="operant_logic")]
        [System.ComponentModel.DescriptionAttribute("The optional operant logic of the reward")]
        public OperantLogic Operant_logic
        {
            get
            {
                return _operant_logic;
            }
            set
            {
                _operant_logic = value;
            }
        }
    
        /// <summary>
        /// Probability of the reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="probability")]
        [System.ComponentModel.DescriptionAttribute("Probability of the reward")]
        public double Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        /// <summary>
        /// The optional distribution where the delay to reward will be drawn from
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("delay")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="delay")]
        [System.ComponentModel.DescriptionAttribute("The optional distribution where the delay to reward will be drawn from")]
        public Scalar Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        public System.IObservable<RewardSpecification> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardSpecification(this)));
        }
    
        public System.IObservable<RewardSpecification> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardSpecification(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("amount = " + _amount + ", ");
            stringBuilder.Append("operant_logic = " + _operant_logic + ", ");
            stringBuilder.Append("probability = " + _probability + ", ");
            stringBuilder.Append("delay = " + _delay);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Scalar
    {
    
        private object _family;
    
        private ScalarDistributionParameter _distribution_parameters;
    
        private TruncationParameters _truncation_parameters;
    
        private ScalingParameters _scaling_parameters;
    
        public Scalar()
        {
        }
    
        protected Scalar(Scalar other)
        {
            _family = other._family;
            _distribution_parameters = other._distribution_parameters;
            _truncation_parameters = other._truncation_parameters;
            _scaling_parameters = other._scaling_parameters;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public ScalarDistributionParameter Distribution_parameters
        {
            get
            {
                return _distribution_parameters;
            }
            set
            {
                _distribution_parameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters Truncation_parameters
        {
            get
            {
                return _truncation_parameters;
            }
            set
            {
                _truncation_parameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters Scaling_parameters
        {
            get
            {
                return _scaling_parameters;
            }
            set
            {
                _scaling_parameters = value;
            }
        }
    
        public System.IObservable<Scalar> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Scalar(this)));
        }
    
        public System.IObservable<Scalar> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Scalar(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("distribution_parameters = " + _distribution_parameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncation_parameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scaling_parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ScalarDistributionParameter
    {
    
        private object _family;
    
        private double _value = 0D;
    
        public ScalarDistributionParameter()
        {
        }
    
        protected ScalarDistributionParameter(ScalarDistributionParameter other)
        {
            _family = other._family;
            _value = other._value;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// The static value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("value")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="value")]
        [System.ComponentModel.DescriptionAttribute("The static value of the distribution")]
        public double Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        public System.IObservable<ScalarDistributionParameter> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalarDistributionParameter(this)));
        }
    
        public System.IObservable<ScalarDistributionParameter> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalarDistributionParameter(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("value = " + _value);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ScalingParameters
    {
    
        private double _scale = 1D;
    
        private double _offset = 0D;
    
        public ScalingParameters()
        {
        }
    
        protected ScalingParameters(ScalingParameters other)
        {
            _scale = other._scale;
            _offset = other._offset;
        }
    
        /// <summary>
        /// Scaling factor to apply on the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scale")]
        [System.ComponentModel.DescriptionAttribute("Scaling factor to apply on the sampled distribution")]
        public double Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        /// <summary>
        /// Offset factor to apply on the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="offset")]
        [System.ComponentModel.DescriptionAttribute("Offset factor to apply on the sampled distribution")]
        public double Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        public System.IObservable<ScalingParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalingParameters(this)));
        }
    
        public System.IObservable<ScalingParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalingParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("scale = " + _scale + ", ");
            stringBuilder.Append("offset = " + _offset);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Size
    {
    
        private double _width = 0D;
    
        private double _height = 0D;
    
        public Size()
        {
        }
    
        protected Size(Size other)
        {
            _width = other._width;
            _height = other._height;
        }
    
        /// <summary>
        /// Width of the texture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="width")]
        [System.ComponentModel.DescriptionAttribute("Width of the texture")]
        public double Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
    
        /// <summary>
        /// Height of the texture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="height")]
        [System.ComponentModel.DescriptionAttribute("Height of the texture")]
        public double Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    
        public System.IObservable<Size> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Size(this)));
        }
    
        public System.IObservable<Size> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Size(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("width = " + _width + ", ");
            stringBuilder.Append("height = " + _height);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TaskLogic
    {
    
        private string _describedBy = "pyd_taskLogic";
    
        private object _schema_version;
    
        private System.Collections.Generic.IDictionary<string, NumericalUpdater> _updaters;
    
        private EnvironmentStatistics _environment_statistics = new EnvironmentStatistics();
    
        private object _task_stage_settings;
    
        private OperationControl _operation_control = new OperationControl();
    
        public TaskLogic()
        {
        }
    
        protected TaskLogic(TaskLogic other)
        {
            _describedBy = other._describedBy;
            _schema_version = other._schema_version;
            _updaters = other._updaters;
            _environment_statistics = other._environment_statistics;
            _task_stage_settings = other._task_stage_settings;
            _operation_control = other._operation_control;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="describedBy")]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="schema_version")]
        public object Schema_version
        {
            get
            {
                return _schema_version;
            }
            set
            {
                _schema_version = value;
            }
        }
    
        /// <summary>
        /// List of numerical updaters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("updaters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="updaters")]
        [System.ComponentModel.DescriptionAttribute("List of numerical updaters")]
        public System.Collections.Generic.IDictionary<string, NumericalUpdater> Updaters
        {
            get
            {
                return _updaters;
            }
            set
            {
                _updaters = value;
            }
        }
    
        /// <summary>
        /// Statistics of the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("environment_statistics", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="environment_statistics")]
        [System.ComponentModel.DescriptionAttribute("Statistics of the environment")]
        public EnvironmentStatistics Environment_statistics
        {
            get
            {
                return _environment_statistics;
            }
            set
            {
                _environment_statistics = value;
            }
        }
    
        /// <summary>
        /// Settings of the task stage
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("task_stage_settings", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="task_stage_settings")]
        [System.ComponentModel.DescriptionAttribute("Settings of the task stage")]
        public object Task_stage_settings
        {
            get
            {
                return _task_stage_settings;
            }
            set
            {
                _task_stage_settings = value;
            }
        }
    
        /// <summary>
        /// Control of the operation
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation_control", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="operation_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the operation")]
        public OperationControl Operation_control
        {
            get
            {
                return _operation_control;
            }
            set
            {
                _operation_control = value;
            }
        }
    
        public System.IObservable<TaskLogic> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TaskLogic(this)));
        }
    
        public System.IObservable<TaskLogic> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TaskLogic(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("describedBy = " + _describedBy + ", ");
            stringBuilder.Append("schema_version = " + _schema_version + ", ");
            stringBuilder.Append("updaters = " + _updaters + ", ");
            stringBuilder.Append("environment_statistics = " + _environment_statistics + ", ");
            stringBuilder.Append("task_stage_settings = " + _task_stage_settings + ", ");
            stringBuilder.Append("operation_control = " + _operation_control);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Texture
    {
    
        private string _name = "default";
    
        private Size _size;
    
        public Texture()
        {
        }
    
        protected Texture(Texture other)
        {
            _name = other._name;
            _size = other._size;
        }
    
        /// <summary>
        /// Name of the texture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("Name of the texture")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// Size of the texture
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("size")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="size")]
        [System.ComponentModel.DescriptionAttribute("Size of the texture")]
        public Size Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
    
        public System.IObservable<Texture> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Texture(this)));
        }
    
        public System.IObservable<Texture> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Texture(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("size = " + _size);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TruncationParameters
    {
    
        private bool _is_truncated = false;
    
        private double _min = 0D;
    
        private double _max = 0D;
    
        public TruncationParameters()
        {
        }
    
        protected TruncationParameters(TruncationParameters other)
        {
            _is_truncated = other._is_truncated;
            _min = other._min;
            _max = other._max;
        }
    
        /// <summary>
        /// Whether the distribution is truncated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("is_truncated")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="is_truncated")]
        [System.ComponentModel.DescriptionAttribute("Whether the distribution is truncated")]
        public bool Is_truncated
        {
            get
            {
                return _is_truncated;
            }
            set
            {
                _is_truncated = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="min")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the sampled distribution")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="max")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the sampled distribution")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        public System.IObservable<TruncationParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TruncationParameters(this)));
        }
    
        public System.IObservable<TruncationParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TruncationParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("is_truncated = " + _is_truncated + ", ");
            stringBuilder.Append("min = " + _min + ", ");
            stringBuilder.Append("max = " + _max);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class UniformDistribution
    {
    
        private object _family;
    
        private UniformDistributionParameters _distribution_parameters;
    
        private TruncationParameters _truncation_parameters;
    
        private ScalingParameters _scaling_parameters;
    
        public UniformDistribution()
        {
        }
    
        protected UniformDistribution(UniformDistribution other)
        {
            _family = other._family;
            _distribution_parameters = other._distribution_parameters;
            _truncation_parameters = other._truncation_parameters;
            _scaling_parameters = other._scaling_parameters;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public UniformDistributionParameters Distribution_parameters
        {
            get
            {
                return _distribution_parameters;
            }
            set
            {
                _distribution_parameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters Truncation_parameters
        {
            get
            {
                return _truncation_parameters;
            }
            set
            {
                _truncation_parameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters Scaling_parameters
        {
            get
            {
                return _scaling_parameters;
            }
            set
            {
                _scaling_parameters = value;
            }
        }
    
        public System.IObservable<UniformDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new UniformDistribution(this)));
        }
    
        public System.IObservable<UniformDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new UniformDistribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("distribution_parameters = " + _distribution_parameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncation_parameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scaling_parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class UniformDistributionParameters
    {
    
        private object _family;
    
        private double _min = 0D;
    
        private double _max = 0D;
    
        public UniformDistributionParameters()
        {
        }
    
        protected UniformDistributionParameters(UniformDistributionParameters other)
        {
            _family = other._family;
            _min = other._min;
            _max = other._max;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="family")]
        public object Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="min")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the distribution")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="max")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the distribution")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        public System.IObservable<UniformDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new UniformDistributionParameters(this)));
        }
    
        public System.IObservable<UniformDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new UniformDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("min = " + _min + ", ");
            stringBuilder.Append("max = " + _max);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Vector3
    {
    
        private double _x = 0D;
    
        private double _y = 0D;
    
        private double _z = 0D;
    
        public Vector3()
        {
        }
    
        protected Vector3(Vector3 other)
        {
            _x = other._x;
            _y = other._y;
            _z = other._z;
        }
    
        /// <summary>
        /// X coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the point")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the point")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Z coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("z")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="z")]
        [System.ComponentModel.DescriptionAttribute("Z coordinate of the point")]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<Vector3> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Vector3(this)));
        }
    
        public System.IObservable<Vector3> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Vector3(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y + ", ");
            stringBuilder.Append("z = " + _z);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VirtualSite
    {
    
        private int _id = 0;
    
        private string _label = "VirtualSite";
    
        private double _length = 20D;
    
        private double _start_position = 0D;
    
        private OdorSpecification _odor;
    
        private RewardSpecification _reward;
    
        private RenderSpecification _render;
    
        public VirtualSite()
        {
        }
    
        protected VirtualSite(VirtualSite other)
        {
            _id = other._id;
            _label = other._label;
            _length = other._length;
            _start_position = other._start_position;
            _odor = other._odor;
            _reward = other._reward;
            _render = other._render;
        }
    
        /// <summary>
        /// Id of the virtual site
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="id")]
        [System.ComponentModel.DescriptionAttribute("Id of the virtual site")]
        public int Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
    
        /// <summary>
        /// Label of the virtual site
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        [System.ComponentModel.DescriptionAttribute("Label of the virtual site")]
        public string Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        /// <summary>
        /// Length of the virtual site (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("length")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="length")]
        [System.ComponentModel.DescriptionAttribute("Length of the virtual site (cm)")]
        public double Length
        {
            get
            {
                return _length;
            }
            set
            {
                _length = value;
            }
        }
    
        /// <summary>
        /// Start position of the virtual site (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("start_position")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="start_position")]
        [System.ComponentModel.DescriptionAttribute("Start position of the virtual site (cm)")]
        public double Start_position
        {
            get
            {
                return _start_position;
            }
            set
            {
                _start_position = value;
            }
        }
    
        /// <summary>
        /// The optional odor specification of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odor")]
        [System.ComponentModel.DescriptionAttribute("The optional odor specification of the virtual site")]
        public OdorSpecification Odor
        {
            get
            {
                return _odor;
            }
            set
            {
                _odor = value;
            }
        }
    
        /// <summary>
        /// The optional reward specification of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward")]
        [System.ComponentModel.DescriptionAttribute("The optional reward specification of the virtual site")]
        public RewardSpecification Reward
        {
            get
            {
                return _reward;
            }
            set
            {
                _reward = value;
            }
        }
    
        /// <summary>
        /// The optional render specification of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("render")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="render")]
        [System.ComponentModel.DescriptionAttribute("The optional render specification of the virtual site")]
        public RenderSpecification Render
        {
            get
            {
                return _render;
            }
            set
            {
                _render = value;
            }
        }
    
        public System.IObservable<VirtualSite> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VirtualSite(this)));
        }
    
        public System.IObservable<VirtualSite> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VirtualSite(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("id = " + _id + ", ");
            stringBuilder.Append("label = " + _label + ", ");
            stringBuilder.Append("length = " + _length + ", ");
            stringBuilder.Append("start_position = " + _start_position + ", ");
            stringBuilder.Append("odor = " + _odor + ", ");
            stringBuilder.Append("reward = " + _reward + ", ");
            stringBuilder.Append("render = " + _render);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VirtualSiteGeneration
    {
    
        private VirtualSiteGenerator _inter_site;
    
        private VirtualSiteGenerator _inter_patch;
    
        private VirtualSiteGenerator _reward_site;
    
        public VirtualSiteGeneration()
        {
        }
    
        protected VirtualSiteGeneration(VirtualSiteGeneration other)
        {
            _inter_site = other._inter_site;
            _inter_patch = other._inter_patch;
            _reward_site = other._reward_site;
        }
    
        /// <summary>
        /// Generator of the inter-site virtual sites
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_site")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_site")]
        [System.ComponentModel.DescriptionAttribute("Generator of the inter-site virtual sites")]
        public VirtualSiteGenerator Inter_site
        {
            get
            {
                return _inter_site;
            }
            set
            {
                _inter_site = value;
            }
        }
    
        /// <summary>
        /// Generator of the inter-patch virtual sites
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_patch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="inter_patch")]
        [System.ComponentModel.DescriptionAttribute("Generator of the inter-patch virtual sites")]
        public VirtualSiteGenerator Inter_patch
        {
            get
            {
                return _inter_patch;
            }
            set
            {
                _inter_patch = value;
            }
        }
    
        /// <summary>
        /// Generator of the reward-site virtual sites
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_site")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward_site")]
        [System.ComponentModel.DescriptionAttribute("Generator of the reward-site virtual sites")]
        public VirtualSiteGenerator Reward_site
        {
            get
            {
                return _reward_site;
            }
            set
            {
                _reward_site = value;
            }
        }
    
        public System.IObservable<VirtualSiteGeneration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VirtualSiteGeneration(this)));
        }
    
        public System.IObservable<VirtualSiteGeneration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VirtualSiteGeneration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("inter_site = " + _inter_site + ", ");
            stringBuilder.Append("inter_patch = " + _inter_patch + ", ");
            stringBuilder.Append("reward_site = " + _reward_site);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VirtualSiteGenerator
    {
    
        private RenderSpecification _render_specification;
    
        private VirtualSiteLabels _label = AindVrForagingDataSchema.AindVrForagingTask.VirtualSiteLabels.Unspecified;
    
        private Scalar _length_distribution;
    
        public VirtualSiteGenerator()
        {
        }
    
        protected VirtualSiteGenerator(VirtualSiteGenerator other)
        {
            _render_specification = other._render_specification;
            _label = other._label;
            _length_distribution = other._length_distribution;
        }
    
        /// <summary>
        /// Contrast of the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("render_specification")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="render_specification")]
        [System.ComponentModel.DescriptionAttribute("Contrast of the environment")]
        public RenderSpecification Render_specification
        {
            get
            {
                return _render_specification;
            }
            set
            {
                _render_specification = value;
            }
        }
    
        /// <summary>
        /// Label of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        [System.ComponentModel.DescriptionAttribute("Label of the virtual site")]
        public VirtualSiteLabels Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        /// <summary>
        /// Distribution of the length of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("length_distribution")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="length_distribution")]
        [System.ComponentModel.DescriptionAttribute("Distribution of the length of the virtual site")]
        public Scalar Length_distribution
        {
            get
            {
                return _length_distribution;
            }
            set
            {
                _length_distribution = value;
            }
        }
    
        public System.IObservable<VirtualSiteGenerator> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VirtualSiteGenerator(this)));
        }
    
        public System.IObservable<VirtualSiteGenerator> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VirtualSiteGenerator(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("render_specification = " + _render_specification + ", ");
            stringBuilder.Append("label = " + _label + ", ");
            stringBuilder.Append("length_distribution = " + _length_distribution);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum VirtualSiteLabels
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Unspecified")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Unspecified")]
        Unspecified = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="InterPatch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="InterPatch")]
        InterPatch = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="RewardSite")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="RewardSite")]
        RewardSite = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="InterSite")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="InterSite")]
        InterSite = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VisualCorridor
    {
    
        private int _id = 0;
    
        private Size _size;
    
        private double _start_position = 0D;
    
        private double _length = 120D;
    
        private WallTextures _textures = new WallTextures();
    
        public VisualCorridor()
        {
        }
    
        protected VisualCorridor(VisualCorridor other)
        {
            _id = other._id;
            _size = other._size;
            _start_position = other._start_position;
            _length = other._length;
            _textures = other._textures;
        }
    
        /// <summary>
        /// Id of the visual corridor object
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="id")]
        [System.ComponentModel.DescriptionAttribute("Id of the visual corridor object")]
        public int Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
    
        /// <summary>
        /// Size of the corridor (cm)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("size")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="size")]
        [System.ComponentModel.DescriptionAttribute("Size of the corridor (cm)")]
        public Size Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
    
        /// <summary>
        /// Start position of the corridor (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("start_position")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="start_position")]
        [System.ComponentModel.DescriptionAttribute("Start position of the corridor (cm)")]
        public double Start_position
        {
            get
            {
                return _start_position;
            }
            set
            {
                _start_position = value;
            }
        }
    
        /// <summary>
        /// Length of the corridor site (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("length")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="length")]
        [System.ComponentModel.DescriptionAttribute("Length of the corridor site (cm)")]
        public double Length
        {
            get
            {
                return _length;
            }
            set
            {
                _length = value;
            }
        }
    
        /// <summary>
        /// The textures of the corridor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("textures", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="textures")]
        [System.ComponentModel.DescriptionAttribute("The textures of the corridor")]
        public WallTextures Textures
        {
            get
            {
                return _textures;
            }
            set
            {
                _textures = value;
            }
        }
    
        public System.IObservable<VisualCorridor> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VisualCorridor(this)));
        }
    
        public System.IObservable<VisualCorridor> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VisualCorridor(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("id = " + _id + ", ");
            stringBuilder.Append("size = " + _size + ", ");
            stringBuilder.Append("start_position = " + _start_position + ", ");
            stringBuilder.Append("length = " + _length + ", ");
            stringBuilder.Append("textures = " + _textures);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WallTextures
    {
    
        private Texture _floor = new Texture();
    
        private Texture _ceiling = new Texture();
    
        private Texture _left = new Texture();
    
        private Texture _right = new Texture();
    
        public WallTextures()
        {
        }
    
        protected WallTextures(WallTextures other)
        {
            _floor = other._floor;
            _ceiling = other._ceiling;
            _left = other._left;
            _right = other._right;
        }
    
        /// <summary>
        /// The texture of the floor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("floor", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="floor")]
        [System.ComponentModel.DescriptionAttribute("The texture of the floor")]
        public Texture Floor
        {
            get
            {
                return _floor;
            }
            set
            {
                _floor = value;
            }
        }
    
        /// <summary>
        /// The texture of the ceiling
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ceiling", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ceiling")]
        [System.ComponentModel.DescriptionAttribute("The texture of the ceiling")]
        public Texture Ceiling
        {
            get
            {
                return _ceiling;
            }
            set
            {
                _ceiling = value;
            }
        }
    
        /// <summary>
        /// The texture of the left
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("left", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="left")]
        [System.ComponentModel.DescriptionAttribute("The texture of the left")]
        public Texture Left
        {
            get
            {
                return _left;
            }
            set
            {
                _left = value;
            }
        }
    
        /// <summary>
        /// The texture of the right
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("right", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="right")]
        [System.ComponentModel.DescriptionAttribute("The texture of the right")]
        public Texture Right
        {
            get
            {
                return _right;
            }
            set
            {
                _right = value;
            }
        }
    
        public System.IObservable<WallTextures> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WallTextures(this)));
        }
    
        public System.IObservable<WallTextures> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WallTextures(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("floor = " + _floor + ", ");
            stringBuilder.Append("ceiling = " + _ceiling + ", ");
            stringBuilder.Append("left = " + _left + ", ");
            stringBuilder.Append("right = " + _right);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    public abstract partial class Root
    {
    
        private TaskLogic _taskLogic = new TaskLogic();
    
        private Add_refs _add_refs;
    
        protected Root()
        {
        }
    
        protected Root(Root other)
        {
            _taskLogic = other._taskLogic;
            _add_refs = other._add_refs;
        }
    
        /// <summary>
        /// Task logic
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("taskLogic", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="taskLogic")]
        [System.ComponentModel.DescriptionAttribute("Task logic")]
        public TaskLogic TaskLogic
        {
            get
            {
                return _taskLogic;
            }
            set
            {
                _taskLogic = value;
            }
        }
    
        /// <summary>
        /// Additional references
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("add_refs")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="add_refs")]
        [System.ComponentModel.DescriptionAttribute("Additional references")]
        public Add_refs Add_refs
        {
            get
            {
                return _add_refs;
            }
            set
            {
                _add_refs = value;
            }
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("taskLogic = " + _taskLogic + ", ");
            stringBuilder.Append("add_refs = " + _add_refs);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Distribution_parameters
    {
    
        public Distribution_parameters()
        {
        }
    
        protected Distribution_parameters(Distribution_parameters other)
        {
        }
    
        public System.IObservable<Distribution_parameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Distribution_parameters(this)));
        }
    
        public System.IObservable<Distribution_parameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Distribution_parameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    public enum OdorSpecificationIndex
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="0")]
        _0 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="1")]
        _1 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="2")]
        _2 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="3")]
        _3 = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Add_refs
    {
    
        public Add_refs()
        {
        }
    
        protected Add_refs(Add_refs other)
        {
        }
    
        public System.IObservable<Add_refs> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Add_refs(this)));
        }
    
        public System.IObservable<Add_refs> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Add_refs(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistribution> source)
        {
            return Process<BetaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistributionParameters> source)
        {
            return Process<BetaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistribution> source)
        {
            return Process<BinomialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistributionParameters> source)
        {
            return Process<BinomialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CreateDistribution> source)
        {
            return Process<CreateDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EnvironmentStatistics> source)
        {
            return Process<EnvironmentStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistribution> source)
        {
            return Process<ExponentialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistributionParameters> source)
        {
            return Process<ExponentialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ForagingSettings> source)
        {
            return Process<ForagingSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistribution> source)
        {
            return Process<GammaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistributionParameters> source)
        {
            return Process<GammaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HabituationSettings> source)
        {
            return Process<HabituationSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistribution> source)
        {
            return Process<LogNormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistributionParameters> source)
        {
            return Process<LogNormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Matrix2D> source)
        {
            return Process<Matrix2D>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MovableSpoutControl> source)
        {
            return Process<MovableSpoutControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistribution> source)
        {
            return Process<NormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistributionParameters> source)
        {
            return Process<NormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdater> source)
        {
            return Process<NumericalUpdater>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdaterParameters> source)
        {
            return Process<NumericalUpdaterParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorControl> source)
        {
            return Process<OdorControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorSpecification> source)
        {
            return Process<OdorSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperantLogic> source)
        {
            return Process<OperantLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperationControl> source)
        {
            return Process<OperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchStatistics> source)
        {
            return Process<PatchStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistribution> source)
        {
            return Process<PoissonDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistributionParameters> source)
        {
            return Process<PoissonDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PositionControl> source)
        {
            return Process<PositionControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RenderSpecification> source)
        {
            return Process<RenderSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSpecification> source)
        {
            return Process<RewardSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Scalar> source)
        {
            return Process<Scalar>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalarDistributionParameter> source)
        {
            return Process<ScalarDistributionParameter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters> source)
        {
            return Process<ScalingParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Size> source)
        {
            return Process<Size>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TaskLogic> source)
        {
            return Process<TaskLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Texture> source)
        {
            return Process<Texture>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters> source)
        {
            return Process<TruncationParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistribution> source)
        {
            return Process<UniformDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistributionParameters> source)
        {
            return Process<UniformDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Vector3> source)
        {
            return Process<Vector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSite> source)
        {
            return Process<VirtualSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSiteGeneration> source)
        {
            return Process<VirtualSiteGeneration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSiteGenerator> source)
        {
            return Process<VirtualSiteGenerator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VisualCorridor> source)
        {
            return Process<VisualCorridor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WallTextures> source)
        {
            return Process<WallTextures>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Root> source)
        {
            return Process<Root>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Distribution_parameters> source)
        {
            return Process<Distribution_parameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Add_refs> source)
        {
            return Process<Add_refs>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CreateDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EnvironmentStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ForagingSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HabituationSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Matrix2D>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MovableSpoutControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdater>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdaterParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperantLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PositionControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RenderSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Scalar>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalarDistributionParameter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Size>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TaskLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Texture>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Vector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSiteGeneration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSiteGenerator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VisualCorridor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WallTextures>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Root>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Distribution_parameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Add_refs>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<Root>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistribution> source)
        {
            return Process<BetaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistributionParameters> source)
        {
            return Process<BetaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistribution> source)
        {
            return Process<BinomialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistributionParameters> source)
        {
            return Process<BinomialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CreateDistribution> source)
        {
            return Process<CreateDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EnvironmentStatistics> source)
        {
            return Process<EnvironmentStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistribution> source)
        {
            return Process<ExponentialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistributionParameters> source)
        {
            return Process<ExponentialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ForagingSettings> source)
        {
            return Process<ForagingSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistribution> source)
        {
            return Process<GammaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistributionParameters> source)
        {
            return Process<GammaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HabituationSettings> source)
        {
            return Process<HabituationSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistribution> source)
        {
            return Process<LogNormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistributionParameters> source)
        {
            return Process<LogNormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Matrix2D> source)
        {
            return Process<Matrix2D>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MovableSpoutControl> source)
        {
            return Process<MovableSpoutControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistribution> source)
        {
            return Process<NormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistributionParameters> source)
        {
            return Process<NormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdater> source)
        {
            return Process<NumericalUpdater>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdaterParameters> source)
        {
            return Process<NumericalUpdaterParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorControl> source)
        {
            return Process<OdorControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorSpecification> source)
        {
            return Process<OdorSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperantLogic> source)
        {
            return Process<OperantLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperationControl> source)
        {
            return Process<OperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchStatistics> source)
        {
            return Process<PatchStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistribution> source)
        {
            return Process<PoissonDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistributionParameters> source)
        {
            return Process<PoissonDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PositionControl> source)
        {
            return Process<PositionControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RenderSpecification> source)
        {
            return Process<RenderSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSpecification> source)
        {
            return Process<RewardSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Scalar> source)
        {
            return Process<Scalar>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalarDistributionParameter> source)
        {
            return Process<ScalarDistributionParameter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters> source)
        {
            return Process<ScalingParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Size> source)
        {
            return Process<Size>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TaskLogic> source)
        {
            return Process<TaskLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Texture> source)
        {
            return Process<Texture>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters> source)
        {
            return Process<TruncationParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistribution> source)
        {
            return Process<UniformDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistributionParameters> source)
        {
            return Process<UniformDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Vector3> source)
        {
            return Process<Vector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSite> source)
        {
            return Process<VirtualSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSiteGeneration> source)
        {
            return Process<VirtualSiteGeneration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSiteGenerator> source)
        {
            return Process<VirtualSiteGenerator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VisualCorridor> source)
        {
            return Process<VisualCorridor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WallTextures> source)
        {
            return Process<WallTextures>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Root> source)
        {
            return Process<Root>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Distribution_parameters> source)
        {
            return Process<Distribution_parameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Add_refs> source)
        {
            return Process<Add_refs>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CreateDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EnvironmentStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ForagingSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HabituationSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Matrix2D>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MovableSpoutControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdater>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdaterParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperantLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PositionControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RenderSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Scalar>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalarDistributionParameter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Size>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TaskLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Texture>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Vector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSiteGeneration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSiteGenerator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VisualCorridor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WallTextures>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Root>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Distribution_parameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Add_refs>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<Root>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}