//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema.Task
{
    #pragma warning disable // Disable all warnings

    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CorridorSpecifications
    {
    
        private double _height = 40D;
    
        private double _id = 0D;
    
        private double _length = 120D;
    
        private double _startPosition = 0D;
    
        private Textures _textures;
    
        private double _width = 40D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="height")]
        public double Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("Id")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Id")]
        public double Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("length")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="length")]
        public double Length
        {
            get
            {
                return _length;
            }
            set
            {
                _length = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("startPosition")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="startPosition")]
        public double StartPosition
        {
            get
            {
                return _startPosition;
            }
            set
            {
                _startPosition = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("textures")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="textures")]
        public Textures Textures
        {
            get
            {
                return _textures;
            }
            set
            {
                _textures = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="width")]
        public double Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
    
        public System.IObservable<CorridorSpecifications> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new CorridorSpecifications
                {
                    Height = _height,
                    Id = _id,
                    Length = _length,
                    StartPosition = _startPosition,
                    Textures = _textures,
                    Width = _width
                }));
        }
    }


    public enum SiteLabel
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Unspecified")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Unspecified")]
        Unspecified = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Gap")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Gap")]
        Gap = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="InterPatch")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="InterPatch")]
        InterPatch = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Reward")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Reward")]
        Reward = 3,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VirtualSite
    {
    
        private double _id = 0D;
    
        private string _label = "virtualSite";
    
        private double _length = 120D;
    
        private Odor _odor;
    
        private Render _render;
    
        private Reward _reward;
    
        private double _startPosition = 0D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="id")]
        public double Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        public string Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("length")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="length")]
        public double Length
        {
            get
            {
                return _length;
            }
            set
            {
                _length = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odor")]
        public Odor Odor
        {
            get
            {
                return _odor;
            }
            set
            {
                _odor = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("render")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="render")]
        public Render Render
        {
            get
            {
                return _render;
            }
            set
            {
                _render = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward")]
        public Reward Reward
        {
            get
            {
                return _reward;
            }
            set
            {
                _reward = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("startPosition")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="startPosition")]
        public double StartPosition
        {
            get
            {
                return _startPosition;
            }
            set
            {
                _startPosition = value;
            }
        }
    
        public System.IObservable<VirtualSite> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new VirtualSite
                {
                    Id = _id,
                    Label = _label,
                    Length = _length,
                    Odor = _odor,
                    Render = _render,
                    Reward = _reward,
                    StartPosition = _startPosition
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Reward
    {
    
        private double _amount;
    
        private double _delay = 0D;
    
        private OperantLogic _operantLogic;
    
        private double _probability = 1D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="amount")]
        public double Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("delay")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="delay")]
        public double Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operantLogic")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="operantLogic")]
        public OperantLogic OperantLogic
        {
            get
            {
                return _operantLogic;
            }
            set
            {
                _operantLogic = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="probability")]
        public double Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        public System.IObservable<Reward> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Reward
                {
                    Amount = _amount,
                    Delay = _delay,
                    OperantLogic = _operantLogic,
                    Probability = _probability
                }));
        }
    }


    public enum TaskStage
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Habituation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Habituation")]
        Habituation = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Foraging")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Foraging")]
        Foraging = 1,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NumericalUpdater
    {
    
        private NumericalUpdaterUpdateOperation _updateOperation;
    
        private NumericalUpdaterParameters _numericalUpdaterParameters;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("updateOperation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="updateOperation")]
        public NumericalUpdaterUpdateOperation UpdateOperation
        {
            get
            {
                return _updateOperation;
            }
            set
            {
                _updateOperation = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("numericalUpdaterParameters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="numericalUpdaterParameters")]
        public NumericalUpdaterParameters NumericalUpdaterParameters
        {
            get
            {
                return _numericalUpdaterParameters;
            }
            set
            {
                _numericalUpdaterParameters = value;
            }
        }
    
        public System.IObservable<NumericalUpdater> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new NumericalUpdater
                {
                    UpdateOperation = _updateOperation,
                    NumericalUpdaterParameters = _numericalUpdaterParameters
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PatchStatistics
    {
    
        private string _label = "";
    
        private PatchRewardFunction _patchRewardFunction;
    
        private Odor _odorSpecifications;
    
        private Reward _rewardSpecifications;
    
        private int _stateIndex = 0;
    
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        public string Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("patchRewardFunction")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="patchRewardFunction")]
        public PatchRewardFunction PatchRewardFunction
        {
            get
            {
                return _patchRewardFunction;
            }
            set
            {
                _patchRewardFunction = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorSpecifications")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorSpecifications")]
        public Odor OdorSpecifications
        {
            get
            {
                return _odorSpecifications;
            }
            set
            {
                _odorSpecifications = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rewardSpecifications")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardSpecifications")]
        public Reward RewardSpecifications
        {
            get
            {
                return _rewardSpecifications;
            }
            set
            {
                _rewardSpecifications = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stateIndex")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stateIndex")]
        public int StateIndex
        {
            get
            {
                return _stateIndex;
            }
            set
            {
                _stateIndex = value;
            }
        }
    
        public System.IObservable<PatchStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PatchStatistics
                {
                    Label = _label,
                    PatchRewardFunction = _patchRewardFunction,
                    OdorSpecifications = _odorSpecifications,
                    RewardSpecifications = _rewardSpecifications,
                    StateIndex = _stateIndex
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Matrix2d
    {
    
        private System.Collections.Generic.List<System.Collections.Generic.List<double>> _data = new System.Collections.Generic.List<System.Collections.Generic.List<double>>();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("data")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="data")]
        public System.Collections.Generic.List<System.Collections.Generic.List<double>> Data
        {
            get
            {
                return _data;
            }
            set
            {
                _data = value;
            }
        }
    
        public System.IObservable<Matrix2d> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Matrix2d
                {
                    Data = _data
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Vector3
    {
    
        private double _x = 0D;
    
        private double _y = 0D;
    
        private double _z = 0D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="x")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="y")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("z")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="z")]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<Vector3> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Vector3
                {
                    X = _x,
                    Y = _y,
                    Z = _z
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TruncatedExponential
    {
    
        private double _maximum = 1D;
    
        private double _mean = 0.5D;
    
        private double _minimum = 0D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("maximum")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maximum")]
        public double Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="mean")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("minimum")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minimum")]
        public double Minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }
    
        public System.IObservable<TruncatedExponential> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new TruncatedExponential
                {
                    Maximum = _maximum,
                    Mean = _mean,
                    Minimum = _minimum
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindVrForagingTask
    {
    
        private System.Collections.Generic.IDictionary<string, NumericalUpdater> _updaters;
    
        private EnvironmentStatistics _environmentStatistics = new EnvironmentStatistics();
    
        private OperationControl _operationControl = new OperationControl();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("updaters")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="updaters")]
        public System.Collections.Generic.IDictionary<string, NumericalUpdater> Updaters
        {
            get
            {
                return _updaters;
            }
            set
            {
                _updaters = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("environmentStatistics", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="environmentStatistics")]
        public EnvironmentStatistics EnvironmentStatistics
        {
            get
            {
                return _environmentStatistics;
            }
            set
            {
                _environmentStatistics = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operationControl", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="operationControl")]
        public OperationControl OperationControl
        {
            get
            {
                return _operationControl;
            }
            set
            {
                _operationControl = value;
            }
        }
    
        public System.IObservable<AindVrForagingTask> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new AindVrForagingTask
                {
                    Updaters = _updaters,
                    EnvironmentStatistics = _environmentStatistics,
                    OperationControl = _operationControl
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Textures
    {
    
        private Floor _floor = new Floor();
    
        private Floor _rightWall = new Floor();
    
        private Floor _leftWall = new Floor();
    
        private Floor _ceiling = new Floor();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("floor", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="floor")]
        public Floor Floor
        {
            get
            {
                return _floor;
            }
            set
            {
                _floor = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rightWall", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rightWall")]
        public Floor RightWall
        {
            get
            {
                return _rightWall;
            }
            set
            {
                _rightWall = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("leftWall", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="leftWall")]
        public Floor LeftWall
        {
            get
            {
                return _leftWall;
            }
            set
            {
                _leftWall = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ceiling", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ceiling")]
        public Floor Ceiling
        {
            get
            {
                return _ceiling;
            }
            set
            {
                _ceiling = value;
            }
        }
    
        public System.IObservable<Textures> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Textures
                {
                    Floor = _floor,
                    RightWall = _rightWall,
                    LeftWall = _leftWall,
                    Ceiling = _ceiling
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Odor
    {
    
        private double _concentration = 1D;
    
        private int _odorIndex;
    
        [Newtonsoft.Json.JsonPropertyAttribute("concentration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="concentration")]
        public double Concentration
        {
            get
            {
                return _concentration;
            }
            set
            {
                _concentration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("odorIndex", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorIndex")]
        public int OdorIndex
        {
            get
            {
                return _odorIndex;
            }
            set
            {
                _odorIndex = value;
            }
        }
    
        public System.IObservable<Odor> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Odor
                {
                    Concentration = _concentration,
                    OdorIndex = _odorIndex
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Render
    {
    
        private double? _contrast;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("contrast")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="contrast")]
        public double? Contrast
        {
            get
            {
                return _contrast;
            }
            set
            {
                _contrast = value;
            }
        }
    
        public System.IObservable<Render> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Render
                {
                    Contrast = _contrast
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OperantLogic
    {
    
        private bool _isOperant = true;
    
        private double _stopDuration = 0D;
    
        private double _timeToCollect = 1000000D;
    
        private double _distanceThresholdToBeStatic = 10D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("isOperant")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="isOperant")]
        public bool IsOperant
        {
            get
            {
                return _isOperant;
            }
            set
            {
                _isOperant = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("stopDuration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stopDuration")]
        public double StopDuration
        {
            get
            {
                return _stopDuration;
            }
            set
            {
                _stopDuration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("timeToCollect")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timeToCollect")]
        public double TimeToCollect
        {
            get
            {
                return _timeToCollect;
            }
            set
            {
                _timeToCollect = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("distanceThresholdToBeStatic")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distanceThresholdToBeStatic")]
        public double DistanceThresholdToBeStatic
        {
            get
            {
                return _distanceThresholdToBeStatic;
            }
            set
            {
                _distanceThresholdToBeStatic = value;
            }
        }
    
        public System.IObservable<OperantLogic> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OperantLogic
                {
                    IsOperant = _isOperant,
                    StopDuration = _stopDuration,
                    TimeToCollect = _timeToCollect,
                    DistanceThresholdToBeStatic = _distanceThresholdToBeStatic
                }));
        }
    }


    public enum NumericalUpdaterUpdateOperation
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="offset")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="offset")]
        Offset = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="gain")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        Gain = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="set")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="set")]
        Set = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="offsetPercentage")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="offsetPercentage")]
        OffsetPercentage = 3,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NumericalUpdaterParameters
    {
    
        private double _initialValue = 0D;
    
        private double _increment = 0D;
    
        private double _decrement = 0D;
    
        private double _minimum = 0D;
    
        private double _maximum = 0D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("initialValue")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="initialValue")]
        public double InitialValue
        {
            get
            {
                return _initialValue;
            }
            set
            {
                _initialValue = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("increment")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="increment")]
        public double Increment
        {
            get
            {
                return _increment;
            }
            set
            {
                _increment = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("decrement")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="decrement")]
        public double Decrement
        {
            get
            {
                return _decrement;
            }
            set
            {
                _decrement = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("minimum")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minimum")]
        public double Minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("maximum")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maximum")]
        public double Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        public System.IObservable<NumericalUpdaterParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new NumericalUpdaterParameters
                {
                    InitialValue = _initialValue,
                    Increment = _increment,
                    Decrement = _decrement,
                    Minimum = _minimum,
                    Maximum = _maximum
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PatchRewardFunction
    {
    
        private double _initialRewardAmount = 0D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("initialRewardAmount")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="initialRewardAmount")]
        public double InitialRewardAmount
        {
            get
            {
                return _initialRewardAmount;
            }
            set
            {
                _initialRewardAmount = value;
            }
        }
    
        public System.IObservable<PatchRewardFunction> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PatchRewardFunction
                {
                    InitialRewardAmount = _initialRewardAmount
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class EnvironmentStatistics
    {
    
        private System.Collections.Generic.List<PatchStatistics> _patches = new System.Collections.Generic.List<PatchStatistics>();
    
        private Matrix2d _transitionMatrix;
    
        private int? _firstState;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("patches")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="patches")]
        public System.Collections.Generic.List<PatchStatistics> Patches
        {
            get
            {
                return _patches;
            }
            set
            {
                _patches = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("transitionMatrix")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="transitionMatrix")]
        public Matrix2d TransitionMatrix
        {
            get
            {
                return _transitionMatrix;
            }
            set
            {
                _transitionMatrix = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("firstState")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="firstState")]
        public int? FirstState
        {
            get
            {
                return _firstState;
            }
            set
            {
                _firstState = value;
            }
        }
    
        public System.IObservable<EnvironmentStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new EnvironmentStatistics
                {
                    Patches = _patches,
                    TransitionMatrix = _transitionMatrix,
                    FirstState = _firstState
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OperationControl
    {
    
        private MovableSpoutControl _movableSpoutControl;
    
        private OdorControl _odorControl = new OdorControl();
    
        private PositionControl _positionControl = new PositionControl();
    
        private TaskStage _taskStage;
    
        private HabituationSettings _habituationSettings;
    
        private VirtualSiteGeneration _virtualSiteGeneration;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("movableSpoutControl")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="movableSpoutControl")]
        public MovableSpoutControl MovableSpoutControl
        {
            get
            {
                return _movableSpoutControl;
            }
            set
            {
                _movableSpoutControl = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorControl", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorControl")]
        public OdorControl OdorControl
        {
            get
            {
                return _odorControl;
            }
            set
            {
                _odorControl = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("positionControl", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="positionControl")]
        public PositionControl PositionControl
        {
            get
            {
                return _positionControl;
            }
            set
            {
                _positionControl = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("taskStage", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="taskStage")]
        public TaskStage TaskStage
        {
            get
            {
                return _taskStage;
            }
            set
            {
                _taskStage = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("habituationSettings")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="habituationSettings")]
        public HabituationSettings HabituationSettings
        {
            get
            {
                return _habituationSettings;
            }
            set
            {
                _habituationSettings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("virtualSiteGeneration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="virtualSiteGeneration")]
        public VirtualSiteGeneration VirtualSiteGeneration
        {
            get
            {
                return _virtualSiteGeneration;
            }
            set
            {
                _virtualSiteGeneration = value;
            }
        }
    
        public System.IObservable<OperationControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OperationControl
                {
                    MovableSpoutControl = _movableSpoutControl,
                    OdorControl = _odorControl,
                    PositionControl = _positionControl,
                    TaskStage = _taskStage,
                    HabituationSettings = _habituationSettings,
                    VirtualSiteGeneration = _virtualSiteGeneration
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Floor
    {
    
        private string _name = "default";
    
        private TextureSize _textureSize;
    
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("textureSize")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="textureSize")]
        public TextureSize TextureSize
        {
            get
            {
                return _textureSize;
            }
            set
            {
                _textureSize = value;
            }
        }
    
        public System.IObservable<Floor> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Floor
                {
                    Name = _name,
                    TextureSize = _textureSize
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class MovableSpoutControl
    {
    
        private bool _enabled = false;
    
        private double _timeToCollectAfterReward = 1D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="enabled")]
        public bool Enabled
        {
            get
            {
                return _enabled;
            }
            set
            {
                _enabled = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("timeToCollectAfterReward")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timeToCollectAfterReward")]
        public double TimeToCollectAfterReward
        {
            get
            {
                return _timeToCollectAfterReward;
            }
            set
            {
                _timeToCollectAfterReward = value;
            }
        }
    
        public System.IObservable<MovableSpoutControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new MovableSpoutControl
                {
                    Enabled = _enabled,
                    TimeToCollectAfterReward = _timeToCollectAfterReward
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OdorControl
    {
    
        private double _valveMaxOpenTime;
    
        private double _targetTotalFlow = 1000D;
    
        private bool _useChannel3AsCarrier = true;
    
        private double _targetOdorFlow = 100D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("valveMaxOpenTime")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valveMaxOpenTime")]
        public double ValveMaxOpenTime
        {
            get
            {
                return _valveMaxOpenTime;
            }
            set
            {
                _valveMaxOpenTime = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("targetTotalFlow")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targetTotalFlow")]
        public double TargetTotalFlow
        {
            get
            {
                return _targetTotalFlow;
            }
            set
            {
                _targetTotalFlow = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("useChannel3AsCarrier")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="useChannel3AsCarrier")]
        public bool UseChannel3AsCarrier
        {
            get
            {
                return _useChannel3AsCarrier;
            }
            set
            {
                _useChannel3AsCarrier = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("targetOdorFlow")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targetOdorFlow")]
        public double TargetOdorFlow
        {
            get
            {
                return _targetOdorFlow;
            }
            set
            {
                _targetOdorFlow = value;
            }
        }
    
        public System.IObservable<OdorControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OdorControl
                {
                    ValveMaxOpenTime = _valveMaxOpenTime,
                    TargetTotalFlow = _targetTotalFlow,
                    UseChannel3AsCarrier = _useChannel3AsCarrier,
                    TargetOdorFlow = _targetOdorFlow
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PositionControl
    {
    
        private Vector3 _gain;
    
        private Vector3 _initialPosition;
    
        private StopResponseConfig _stopResponseConfig;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        public Vector3 Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("initialPosition")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="initialPosition")]
        public Vector3 InitialPosition
        {
            get
            {
                return _initialPosition;
            }
            set
            {
                _initialPosition = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stopResponseConfig")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stopResponseConfig")]
        public StopResponseConfig StopResponseConfig
        {
            get
            {
                return _stopResponseConfig;
            }
            set
            {
                _stopResponseConfig = value;
            }
        }
    
        public System.IObservable<PositionControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new PositionControl
                {
                    Gain = _gain,
                    InitialPosition = _initialPosition,
                    StopResponseConfig = _stopResponseConfig
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HabituationSettings
    {
    
        private TruncatedExponential _distanceToReward = new TruncatedExponential();
    
        private Reward _reward;
    
        private double? _contrast;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distanceToReward", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="distanceToReward")]
        public TruncatedExponential DistanceToReward
        {
            get
            {
                return _distanceToReward;
            }
            set
            {
                _distanceToReward = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reward")]
        public Reward Reward
        {
            get
            {
                return _reward;
            }
            set
            {
                _reward = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("contrast")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="contrast")]
        public double? Contrast
        {
            get
            {
                return _contrast;
            }
            set
            {
                _contrast = value;
            }
        }
    
        public System.IObservable<HabituationSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new HabituationSettings
                {
                    DistanceToReward = _distanceToReward,
                    Reward = _reward,
                    Contrast = _contrast
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VirtualSiteGeneration
    {
    
        private GapSite _gapSite = new GapSite();
    
        private InterPatchSite _interPatchSite = new InterPatchSite();
    
        private RewardSite _rewardSite = new RewardSite();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gapSite", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gapSite")]
        public GapSite GapSite
        {
            get
            {
                return _gapSite;
            }
            set
            {
                _gapSite = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("interPatchSite", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="interPatchSite")]
        public InterPatchSite InterPatchSite
        {
            get
            {
                return _interPatchSite;
            }
            set
            {
                _interPatchSite = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rewardSite", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardSite")]
        public RewardSite RewardSite
        {
            get
            {
                return _rewardSite;
            }
            set
            {
                _rewardSite = value;
            }
        }
    
        public System.IObservable<VirtualSiteGeneration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new VirtualSiteGeneration
                {
                    GapSite = _gapSite,
                    InterPatchSite = _interPatchSite,
                    RewardSite = _rewardSite
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TextureSize
    {
    
        private double _x = 40D;
    
        private double _y = 40D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="x")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="y")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        public System.IObservable<TextureSize> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new TextureSize
                {
                    X = _x,
                    Y = _y
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class StopResponseConfig
    {
    
        private double _frequencyFilterCutoff;
    
        private double _velocityThreshold;
    
        [Newtonsoft.Json.JsonPropertyAttribute("frequencyFilterCutoff")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frequencyFilterCutoff")]
        public double FrequencyFilterCutoff
        {
            get
            {
                return _frequencyFilterCutoff;
            }
            set
            {
                _frequencyFilterCutoff = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("velocityThreshold")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="velocityThreshold")]
        public double VelocityThreshold
        {
            get
            {
                return _velocityThreshold;
            }
            set
            {
                _velocityThreshold = value;
            }
        }
    
        public System.IObservable<StopResponseConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new StopResponseConfig
                {
                    FrequencyFilterCutoff = _frequencyFilterCutoff,
                    VelocityThreshold = _velocityThreshold
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class GapSite
    {
    
        private double? _contrast;
    
        private SiteLabel _label = AindVrForagingDataSchema.Task.SiteLabel.Gap;
    
        private TruncatedExponential _lengthDistribution;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("contrast")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="contrast")]
        public double? Contrast
        {
            get
            {
                return _contrast;
            }
            set
            {
                _contrast = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        public SiteLabel Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lengthDistribution")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lengthDistribution")]
        public TruncatedExponential LengthDistribution
        {
            get
            {
                return _lengthDistribution;
            }
            set
            {
                _lengthDistribution = value;
            }
        }
    
        public System.IObservable<GapSite> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new GapSite
                {
                    Contrast = _contrast,
                    Label = _label,
                    LengthDistribution = _lengthDistribution
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class InterPatchSite
    {
    
        private double? _contrast;
    
        private SiteLabel _label = AindVrForagingDataSchema.Task.SiteLabel.InterPatch;
    
        private TruncatedExponential _lengthDistribution;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("contrast")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="contrast")]
        public double? Contrast
        {
            get
            {
                return _contrast;
            }
            set
            {
                _contrast = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        public SiteLabel Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lengthDistribution")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lengthDistribution")]
        public TruncatedExponential LengthDistribution
        {
            get
            {
                return _lengthDistribution;
            }
            set
            {
                _lengthDistribution = value;
            }
        }
    
        public System.IObservable<InterPatchSite> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new InterPatchSite
                {
                    Contrast = _contrast,
                    Label = _label,
                    LengthDistribution = _lengthDistribution
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardSite
    {
    
        private double? _contrast;
    
        private SiteLabel _label = AindVrForagingDataSchema.Task.SiteLabel.Reward;
    
        private TruncatedExponential _lengthDistribution;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("contrast")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="contrast")]
        public double? Contrast
        {
            get
            {
                return _contrast;
            }
            set
            {
                _contrast = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="label")]
        public SiteLabel Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lengthDistribution")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lengthDistribution")]
        public TruncatedExponential LengthDistribution
        {
            get
            {
                return _lengthDistribution;
            }
            set
            {
                _lengthDistribution = value;
            }
        }
    
        public System.IObservable<RewardSite> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new RewardSite
                {
                    Contrast = _contrast,
                    Label = _label,
                    LengthDistribution = _lengthDistribution
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<CorridorSpecifications> source)
        {
            return Process<CorridorSpecifications>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSite> source)
        {
            return Process<VirtualSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reward> source)
        {
            return Process<Reward>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdater> source)
        {
            return Process<NumericalUpdater>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchStatistics> source)
        {
            return Process<PatchStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Matrix2d> source)
        {
            return Process<Matrix2d>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Vector3> source)
        {
            return Process<Vector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncatedExponential> source)
        {
            return Process<TruncatedExponential>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingTask> source)
        {
            return Process<AindVrForagingTask>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Textures> source)
        {
            return Process<Textures>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Odor> source)
        {
            return Process<Odor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Render> source)
        {
            return Process<Render>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperantLogic> source)
        {
            return Process<OperantLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdaterParameters> source)
        {
            return Process<NumericalUpdaterParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchRewardFunction> source)
        {
            return Process<PatchRewardFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EnvironmentStatistics> source)
        {
            return Process<EnvironmentStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperationControl> source)
        {
            return Process<OperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Floor> source)
        {
            return Process<Floor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MovableSpoutControl> source)
        {
            return Process<MovableSpoutControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorControl> source)
        {
            return Process<OdorControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PositionControl> source)
        {
            return Process<PositionControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HabituationSettings> source)
        {
            return Process<HabituationSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSiteGeneration> source)
        {
            return Process<VirtualSiteGeneration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TextureSize> source)
        {
            return Process<TextureSize>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StopResponseConfig> source)
        {
            return Process<StopResponseConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GapSite> source)
        {
            return Process<GapSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<InterPatchSite> source)
        {
            return Process<InterPatchSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSite> source)
        {
            return Process<RewardSite>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CorridorSpecifications>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reward>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdater>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Matrix2d>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Vector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncatedExponential>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingTask>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Textures>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Odor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Render>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperantLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdaterParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchRewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EnvironmentStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Floor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MovableSpoutControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PositionControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HabituationSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSiteGeneration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TextureSize>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StopResponseConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GapSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<InterPatchSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSite>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingTask>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<CorridorSpecifications> source)
        {
            return Process<CorridorSpecifications>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSite> source)
        {
            return Process<VirtualSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Reward> source)
        {
            return Process<Reward>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdater> source)
        {
            return Process<NumericalUpdater>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchStatistics> source)
        {
            return Process<PatchStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Matrix2d> source)
        {
            return Process<Matrix2d>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Vector3> source)
        {
            return Process<Vector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncatedExponential> source)
        {
            return Process<TruncatedExponential>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingTask> source)
        {
            return Process<AindVrForagingTask>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Textures> source)
        {
            return Process<Textures>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Odor> source)
        {
            return Process<Odor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Render> source)
        {
            return Process<Render>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperantLogic> source)
        {
            return Process<OperantLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdaterParameters> source)
        {
            return Process<NumericalUpdaterParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchRewardFunction> source)
        {
            return Process<PatchRewardFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EnvironmentStatistics> source)
        {
            return Process<EnvironmentStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperationControl> source)
        {
            return Process<OperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Floor> source)
        {
            return Process<Floor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MovableSpoutControl> source)
        {
            return Process<MovableSpoutControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorControl> source)
        {
            return Process<OdorControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PositionControl> source)
        {
            return Process<PositionControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HabituationSettings> source)
        {
            return Process<HabituationSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSiteGeneration> source)
        {
            return Process<VirtualSiteGeneration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TextureSize> source)
        {
            return Process<TextureSize>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StopResponseConfig> source)
        {
            return Process<StopResponseConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GapSite> source)
        {
            return Process<GapSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<InterPatchSite> source)
        {
            return Process<InterPatchSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSite> source)
        {
            return Process<RewardSite>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CorridorSpecifications>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Reward>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdater>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Matrix2d>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Vector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncatedExponential>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingTask>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Textures>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Odor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Render>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperantLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdaterParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchRewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EnvironmentStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Floor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MovableSpoutControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PositionControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HabituationSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSiteGeneration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TextureSize>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StopResponseConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GapSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<InterPatchSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSite>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindVrForagingTask>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}