//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindVrForagingDataSchema
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindBehaviorSessionModel
    {
    
        private string _aindBehaviorServicesPkgVersion;
    
        private string _version;
    
        private string _experiment;
    
        private System.Collections.Generic.List<string> _experimenter;
    
        private System.DateTimeOffset _date;
    
        private string _rootPath;
    
        private string _sessionName;
    
        private string _subject;
    
        private string _experimentVersion;
    
        private string _notes;
    
        private string _commitHash;
    
        private bool _allowDirtyRepo;
    
        private bool _skipHardwareValidation;
    
        public AindBehaviorSessionModel()
        {
            _aindBehaviorServicesPkgVersion = "0.12.3";
            _version = "0.12.3";
            _experimenter = new System.Collections.Generic.List<string>();
            _experimentVersion = "";
            _allowDirtyRepo = false;
            _skipHardwareValidation = false;
        }
    
        protected AindBehaviorSessionModel(AindBehaviorSessionModel other)
        {
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _version = other._version;
            _experiment = other._experiment;
            _experimenter = other._experimenter;
            _date = other._date;
            _rootPath = other._rootPath;
            _sessionName = other._sessionName;
            _subject = other._subject;
            _experimentVersion = other._experimentVersion;
            _notes = other._notes;
            _commitHash = other._commitHash;
            _allowDirtyRepo = other._allowDirtyRepo;
            _skipHardwareValidation = other._skipHardwareValidation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Name of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("experiment")]
        [System.ComponentModel.DescriptionAttribute("Name of the experiment")]
        public string Experiment
        {
            get
            {
                return _experiment;
            }
            set
            {
                _experiment = value;
            }
        }
    
        /// <summary>
        /// Name of the experimenter
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("experimenter")]
        [System.ComponentModel.DescriptionAttribute("Name of the experimenter")]
        public System.Collections.Generic.List<string> Experimenter
        {
            get
            {
                return _experimenter;
            }
            set
            {
                _experimenter = value;
            }
        }
    
        /// <summary>
        /// Date of the experiment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        [System.ComponentModel.DescriptionAttribute("Date of the experiment")]
        public System.DateTimeOffset Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        /// <summary>
        /// Root path where data will be logged
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("root_path", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Root path where data will be logged")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        /// <summary>
        /// Name of the session. This will be used to create a folder in the root path. If not provided, it will be generated using subject and date.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("session_name")]
        [System.ComponentModel.DescriptionAttribute("Name of the session. This will be used to create a folder in the root path. If no" +
            "t provided, it will be generated using subject and date.")]
        public string SessionName
        {
            get
            {
                return _sessionName;
            }
            set
            {
                _sessionName = value;
            }
        }
    
        /// <summary>
        /// Name of the subject
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("subject", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Name of the subject")]
        public string Subject
        {
            get
            {
                return _subject;
            }
            set
            {
                _subject = value;
            }
        }
    
        /// <summary>
        /// Version of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("experiment_version")]
        [System.ComponentModel.DescriptionAttribute("Version of the experiment")]
        public string ExperimentVersion
        {
            get
            {
                return _experimentVersion;
            }
            set
            {
                _experimentVersion = value;
            }
        }
    
        /// <summary>
        /// Notes about the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [System.ComponentModel.DescriptionAttribute("Notes about the experiment")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        /// <summary>
        /// Commit hash of the repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("commit_hash")]
        [System.ComponentModel.DescriptionAttribute("Commit hash of the repository")]
        public string CommitHash
        {
            get
            {
                return _commitHash;
            }
            set
            {
                _commitHash = value;
            }
        }
    
        /// <summary>
        /// Allow running from a dirty repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("allow_dirty_repo")]
        [System.ComponentModel.DescriptionAttribute("Allow running from a dirty repository")]
        public bool AllowDirtyRepo
        {
            get
            {
                return _allowDirtyRepo;
            }
            set
            {
                _allowDirtyRepo = value;
            }
        }
    
        /// <summary>
        /// Skip hardware validation
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("skip_hardware_validation")]
        [System.ComponentModel.DescriptionAttribute("Skip hardware validation")]
        public bool SkipHardwareValidation
        {
            get
            {
                return _skipHardwareValidation;
            }
            set
            {
                _skipHardwareValidation = value;
            }
        }
    
        public System.IObservable<AindBehaviorSessionModel> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindBehaviorSessionModel(this)));
        }
    
        public System.IObservable<AindBehaviorSessionModel> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindBehaviorSessionModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("AindBehaviorServicesPkgVersion = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("Version = " + _version + ", ");
            stringBuilder.Append("Experiment = " + _experiment + ", ");
            stringBuilder.Append("Experimenter = " + _experimenter + ", ");
            stringBuilder.Append("Date = " + _date + ", ");
            stringBuilder.Append("RootPath = " + _rootPath + ", ");
            stringBuilder.Append("SessionName = " + _sessionName + ", ");
            stringBuilder.Append("Subject = " + _subject + ", ");
            stringBuilder.Append("ExperimentVersion = " + _experimentVersion + ", ");
            stringBuilder.Append("Notes = " + _notes + ", ");
            stringBuilder.Append("CommitHash = " + _commitHash + ", ");
            stringBuilder.Append("AllowDirtyRepo = " + _allowDirtyRepo + ", ");
            stringBuilder.Append("SkipHardwareValidation = " + _skipHardwareValidation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Additional settings for the manipulator device
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Additional settings for the manipulator device")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindManipulatorAdditionalSettings
    {
    
        private Axis _spoutAxis;
    
        public AindManipulatorAdditionalSettings()
        {
            _spoutAxis = AindVrForagingDataSchema.Axis.Y1;
        }
    
        protected AindManipulatorAdditionalSettings(AindManipulatorAdditionalSettings other)
        {
            _spoutAxis = other._spoutAxis;
        }
    
        /// <summary>
        /// Spout axis
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("spout_axis")]
        [System.ComponentModel.DescriptionAttribute("Spout axis")]
        public Axis SpoutAxis
        {
            get
            {
                return _spoutAxis;
            }
            set
            {
                _spoutAxis = value;
            }
        }
    
        public System.IObservable<AindManipulatorAdditionalSettings> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorAdditionalSettings(this)));
        }
    
        public System.IObservable<AindManipulatorAdditionalSettings> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorAdditionalSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("SpoutAxis = " + _spoutAxis);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Aind manipulator calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Aind manipulator calibration class")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindManipulatorCalibration
    {
    
        private string _deviceName;
    
        private AindManipulatorCalibrationInput _input;
    
        private AindManipulatorCalibrationOutput _output;
    
        private System.DateTimeOffset? _date;
    
        private string _description;
    
        private string _notes;
    
        public AindManipulatorCalibration()
        {
            _deviceName = "AindManipulator";
            _input = new AindManipulatorCalibrationInput();
            _output = new AindManipulatorCalibrationOutput();
            _description = "Calibration of the load cells system";
        }
    
        protected AindManipulatorCalibration(AindManipulatorCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public AindManipulatorCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public AindManipulatorCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<AindManipulatorCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorCalibration(this)));
        }
    
        public System.IObservable<AindManipulatorCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("Input = " + _input + ", ");
            stringBuilder.Append("Output = " + _output + ", ");
            stringBuilder.Append("Date = " + _date + ", ");
            stringBuilder.Append("Description = " + _description + ", ");
            stringBuilder.Append("Notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindManipulatorCalibrationInput
    {
    
        private ManipulatorPosition _fullStepToMm;
    
        private System.Collections.Generic.List<AxisConfiguration> _axisConfiguration;
    
        private System.Collections.Generic.List<Axis> _homingOrder;
    
        private ManipulatorPosition _initialPosition;
    
        public AindManipulatorCalibrationInput()
        {
            _fullStepToMm = new ManipulatorPosition();
            _axisConfiguration = new System.Collections.Generic.List<AxisConfiguration>();
            _homingOrder = new System.Collections.Generic.List<Axis>();
            _initialPosition = new ManipulatorPosition();
        }
    
        protected AindManipulatorCalibrationInput(AindManipulatorCalibrationInput other)
        {
            _fullStepToMm = other._fullStepToMm;
            _axisConfiguration = other._axisConfiguration;
            _homingOrder = other._homingOrder;
            _initialPosition = other._initialPosition;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("full_step_to_mm")]
        public ManipulatorPosition FullStepToMm
        {
            get
            {
                return _fullStepToMm;
            }
            set
            {
                _fullStepToMm = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("axis_configuration")]
        public System.Collections.Generic.List<AxisConfiguration> AxisConfiguration
        {
            get
            {
                return _axisConfiguration;
            }
            set
            {
                _axisConfiguration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("homing_order")]
        public System.Collections.Generic.List<Axis> HomingOrder
        {
            get
            {
                return _homingOrder;
            }
            set
            {
                _homingOrder = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("initial_position")]
        public ManipulatorPosition InitialPosition
        {
            get
            {
                return _initialPosition;
            }
            set
            {
                _initialPosition = value;
            }
        }
    
        public System.IObservable<AindManipulatorCalibrationInput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorCalibrationInput(this)));
        }
    
        public System.IObservable<AindManipulatorCalibrationInput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("FullStepToMm = " + _fullStepToMm + ", ");
            stringBuilder.Append("AxisConfiguration = " + _axisConfiguration + ", ");
            stringBuilder.Append("HomingOrder = " + _homingOrder + ", ");
            stringBuilder.Append("InitialPosition = " + _initialPosition);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindManipulatorCalibrationOutput
    {
    
        public AindManipulatorCalibrationOutput()
        {
        }
    
        protected AindManipulatorCalibrationOutput(AindManipulatorCalibrationOutput other)
        {
        }
    
        public System.IObservable<AindManipulatorCalibrationOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorCalibrationOutput(this)));
        }
    
        public System.IObservable<AindManipulatorCalibrationOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Overrides the default settings for the manipulator device by spec'ing additional_settings field
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Overrides the default settings for the manipulator device by spec\'ing additional_" +
        "settings field")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindManipulatorDevice
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private AindManipulatorAdditionalSettings _additionalSettings;
    
        private AindManipulatorCalibration _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public AindManipulatorDevice()
        {
            _deviceType = "StepperDriver";
            _additionalSettings = new AindManipulatorAdditionalSettings();
            _whoAmI = 1130;
        }
    
        protected AindManipulatorDevice(AindManipulatorDevice other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public AindManipulatorAdditionalSettings AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        public AindManipulatorCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<AindManipulatorDevice> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindManipulatorDevice(this)));
        }
    
        public System.IObservable<AindManipulatorDevice> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindManipulatorDevice(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindVrForagingRig
    {
    
        private string _aindBehaviorServicesPkgVersion;
    
        private string _version;
    
        private string _computerName;
    
        private string _rigName;
    
        private CameraControllerSpinnakerCamera _triggeredCameraController;
    
        private CameraControllerWebCamera _monitoringCameraController;
    
        private HarpBehavior _harpBehavior;
    
        private Olfactometer _harpOlfactometer;
    
        private HarpLicketySplit _harpLickometer;
    
        private HarpWhiteRabbit _harpClockGenerator;
    
        private HarpAnalogInput _harpAnalogInput;
    
        private Treadmill _harpTreadmill;
    
        private HarpSniffDetector _harpSniffDetector;
    
        private HarpEnvironmentSensor _harpEnvironmentSensor;
    
        private AindManipulatorDevice _manipulator;
    
        private Screen _screen;
    
        private RigCalibration _calibration;
    
        public AindVrForagingRig()
        {
            _aindBehaviorServicesPkgVersion = "0.12.3";
            _version = "0.6.1-rc2";
            _triggeredCameraController = new CameraControllerSpinnakerCamera();
            _harpBehavior = new HarpBehavior();
            _harpOlfactometer = new Olfactometer();
            _harpLickometer = new HarpLicketySplit();
            _harpClockGenerator = new HarpWhiteRabbit();
            _harpTreadmill = new Treadmill();
            _manipulator = new AindManipulatorDevice();
            _screen = new Screen();
            _calibration = new RigCalibration();
        }
    
        protected AindVrForagingRig(AindVrForagingRig other)
        {
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _version = other._version;
            _computerName = other._computerName;
            _rigName = other._rigName;
            _triggeredCameraController = other._triggeredCameraController;
            _monitoringCameraController = other._monitoringCameraController;
            _harpBehavior = other._harpBehavior;
            _harpOlfactometer = other._harpOlfactometer;
            _harpLickometer = other._harpLickometer;
            _harpClockGenerator = other._harpClockGenerator;
            _harpAnalogInput = other._harpAnalogInput;
            _harpTreadmill = other._harpTreadmill;
            _harpSniffDetector = other._harpSniffDetector;
            _harpEnvironmentSensor = other._harpEnvironmentSensor;
            _manipulator = other._manipulator;
            _screen = other._screen;
            _calibration = other._calibration;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Computer name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("computer_name")]
        [System.ComponentModel.DescriptionAttribute("Computer name")]
        public string ComputerName
        {
            get
            {
                return _computerName;
            }
            set
            {
                _computerName = value;
            }
        }
    
        /// <summary>
        /// Rig name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rig_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Rig name")]
        public string RigName
        {
            get
            {
                return _rigName;
            }
            set
            {
                _rigName = value;
            }
        }
    
        /// <summary>
        /// Required camera controller to triggered cameras.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("triggered_camera_controller", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Required camera controller to triggered cameras.")]
        public CameraControllerSpinnakerCamera TriggeredCameraController
        {
            get
            {
                return _triggeredCameraController;
            }
            set
            {
                _triggeredCameraController = value;
            }
        }
    
        /// <summary>
        /// Optional camera controller for monitoring cameras.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("monitoring_camera_controller")]
        [System.ComponentModel.DescriptionAttribute("Optional camera controller for monitoring cameras.")]
        public CameraControllerWebCamera MonitoringCameraController
        {
            get
            {
                return _monitoringCameraController;
            }
            set
            {
                _monitoringCameraController = value;
            }
        }
    
        /// <summary>
        /// Harp behavior
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_behavior", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp behavior")]
        public HarpBehavior HarpBehavior
        {
            get
            {
                return _harpBehavior;
            }
            set
            {
                _harpBehavior = value;
            }
        }
    
        /// <summary>
        /// Harp olfactometer
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_olfactometer", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp olfactometer")]
        public Olfactometer HarpOlfactometer
        {
            get
            {
                return _harpOlfactometer;
            }
            set
            {
                _harpOlfactometer = value;
            }
        }
    
        /// <summary>
        /// Harp lickometer
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_lickometer", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp lickometer")]
        public HarpLicketySplit HarpLickometer
        {
            get
            {
                return _harpLickometer;
            }
            set
            {
                _harpLickometer = value;
            }
        }
    
        /// <summary>
        /// Harp clock generator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_clock_generator", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp clock generator")]
        public HarpWhiteRabbit HarpClockGenerator
        {
            get
            {
                return _harpClockGenerator;
            }
            set
            {
                _harpClockGenerator = value;
            }
        }
    
        /// <summary>
        /// Harp analog input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_analog_input")]
        [System.ComponentModel.DescriptionAttribute("Harp analog input")]
        public HarpAnalogInput HarpAnalogInput
        {
            get
            {
                return _harpAnalogInput;
            }
            set
            {
                _harpAnalogInput = value;
            }
        }
    
        /// <summary>
        /// Harp treadmill
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_treadmill", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp treadmill")]
        public Treadmill HarpTreadmill
        {
            get
            {
                return _harpTreadmill;
            }
            set
            {
                _harpTreadmill = value;
            }
        }
    
        /// <summary>
        /// Sniff detector settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_sniff_detector")]
        [System.ComponentModel.DescriptionAttribute("Sniff detector settings")]
        public HarpSniffDetector HarpSniffDetector
        {
            get
            {
                return _harpSniffDetector;
            }
            set
            {
                _harpSniffDetector = value;
            }
        }
    
        /// <summary>
        /// Environment sensor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_environment_sensor")]
        [System.ComponentModel.DescriptionAttribute("Environment sensor")]
        public HarpEnvironmentSensor HarpEnvironmentSensor
        {
            get
            {
                return _harpEnvironmentSensor;
            }
            set
            {
                _harpEnvironmentSensor = value;
            }
        }
    
        /// <summary>
        /// Manipulator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Manipulator")]
        public AindManipulatorDevice Manipulator
        {
            get
            {
                return _manipulator;
            }
            set
            {
                _manipulator = value;
            }
        }
    
        /// <summary>
        /// Screen settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("screen")]
        [System.ComponentModel.DescriptionAttribute("Screen settings")]
        public Screen Screen
        {
            get
            {
                return _screen;
            }
            set
            {
                _screen = value;
            }
        }
    
        /// <summary>
        /// Calibration models
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Calibration models")]
        public RigCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        public System.IObservable<AindVrForagingRig> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindVrForagingRig(this)));
        }
    
        public System.IObservable<AindVrForagingRig> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindVrForagingRig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("AindBehaviorServicesPkgVersion = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("Version = " + _version + ", ");
            stringBuilder.Append("ComputerName = " + _computerName + ", ");
            stringBuilder.Append("RigName = " + _rigName + ", ");
            stringBuilder.Append("TriggeredCameraController = " + _triggeredCameraController + ", ");
            stringBuilder.Append("MonitoringCameraController = " + _monitoringCameraController + ", ");
            stringBuilder.Append("HarpBehavior = " + _harpBehavior + ", ");
            stringBuilder.Append("HarpOlfactometer = " + _harpOlfactometer + ", ");
            stringBuilder.Append("HarpLickometer = " + _harpLickometer + ", ");
            stringBuilder.Append("HarpClockGenerator = " + _harpClockGenerator + ", ");
            stringBuilder.Append("HarpAnalogInput = " + _harpAnalogInput + ", ");
            stringBuilder.Append("HarpTreadmill = " + _harpTreadmill + ", ");
            stringBuilder.Append("HarpSniffDetector = " + _harpSniffDetector + ", ");
            stringBuilder.Append("HarpEnvironmentSensor = " + _harpEnvironmentSensor + ", ");
            stringBuilder.Append("Manipulator = " + _manipulator + ", ");
            stringBuilder.Append("Screen = " + _screen + ", ");
            stringBuilder.Append("Calibration = " + _calibration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Main task logic model for the AIND VR Foraging task.
    ///
    ///This is the top-level class that encapsulates the complete task logic
    ///specification for the virtual reality foraging behavioral experiment.
    ///It includes all task parameters, environment specifications, and control settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Main task logic model for the AIND VR Foraging task.

    This is the top-level class that encapsulates the complete task logic
    specification for the virtual reality foraging behavioral experiment.
    It includes all task parameters, environment specifications, and control settings.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindVrForagingTaskLogic
    {
    
        private string _name;
    
        private string _description;
    
        private AindVrForagingTaskParameters _taskParameters;
    
        private string _version;
    
        private string _stageName;
    
        public AindVrForagingTaskLogic()
        {
            _name = "AindVrForaging";
            _description = "";
            _taskParameters = new AindVrForagingTaskParameters();
            _version = "0.6.1-rc2";
        }
    
        protected AindVrForagingTaskLogic(AindVrForagingTaskLogic other)
        {
            _name = other._name;
            _description = other._description;
            _taskParameters = other._taskParameters;
            _version = other._version;
            _stageName = other._stageName;
        }
    
        /// <summary>
        /// Name of the task logic
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [System.ComponentModel.DescriptionAttribute("Name of the task logic")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// Description of the task.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        [System.ComponentModel.DescriptionAttribute("Description of the task.")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        /// <summary>
        /// Parameters of the task logic
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("task_parameters", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Parameters of the task logic")]
        public AindVrForagingTaskParameters TaskParameters
        {
            get
            {
                return _taskParameters;
            }
            set
            {
                _taskParameters = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Optional stage name the `Task` object instance represents.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stage_name")]
        [System.ComponentModel.DescriptionAttribute("Optional stage name the `Task` object instance represents.")]
        public string StageName
        {
            get
            {
                return _stageName;
            }
            set
            {
                _stageName = value;
            }
        }
    
        public System.IObservable<AindVrForagingTaskLogic> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindVrForagingTaskLogic(this)));
        }
    
        public System.IObservable<AindVrForagingTaskLogic> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindVrForagingTaskLogic(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Name = " + _name + ", ");
            stringBuilder.Append("Description = " + _description + ", ");
            stringBuilder.Append("TaskParameters = " + _taskParameters + ", ");
            stringBuilder.Append("Version = " + _version + ", ");
            stringBuilder.Append("StageName = " + _stageName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Complete parameter specification for the AIND VR Foraging task.
    ///
    ///This class contains all configurable parameters for the VR foraging task,
    ///including environment structure, task mode settings, operation control,
    ///and numerical updaters for dynamic parameter modification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Complete parameter specification for the AIND VR Foraging task.

    This class contains all configurable parameters for the VR foraging task,
    including environment structure, task mode settings, operation control,
    and numerical updaters for dynamic parameter modification.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindVrForagingTaskParameters
    {
    
        private double? _rngSeed;
    
        private string _aindBehaviorServicesPkgVersion;
    
        private System.Collections.Generic.Dictionary<string, NumericalUpdater> _updaters;
    
        private BlockStructure _environment;
    
        private OperationControl _operationControl;
    
        public AindVrForagingTaskParameters()
        {
            _aindBehaviorServicesPkgVersion = "0.12.3";
            _environment = new BlockStructure();
            _operationControl = new OperationControl();
        }
    
        protected AindVrForagingTaskParameters(AindVrForagingTaskParameters other)
        {
            _rngSeed = other._rngSeed;
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _updaters = other._updaters;
            _environment = other._environment;
            _operationControl = other._operationControl;
        }
    
        /// <summary>
        /// Seed of the random number generator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rng_seed")]
        [System.ComponentModel.DescriptionAttribute("Seed of the random number generator")]
        public double? RngSeed
        {
            get
            {
                return _rngSeed;
            }
            set
            {
                _rngSeed = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        /// <summary>
        /// Look-up table for numeric updaters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("updaters")]
        [System.ComponentModel.DescriptionAttribute("Look-up table for numeric updaters")]
        public System.Collections.Generic.Dictionary<string, NumericalUpdater> Updaters
        {
            get
            {
                return _updaters;
            }
            set
            {
                _updaters = value;
            }
        }
    
        /// <summary>
        /// Statistics of the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("environment", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Statistics of the environment")]
        public BlockStructure Environment
        {
            get
            {
                return _environment;
            }
            set
            {
                _environment = value;
            }
        }
    
        /// <summary>
        /// Control of the operation
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation_control", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Control of the operation")]
        public OperationControl OperationControl
        {
            get
            {
                return _operationControl;
            }
            set
            {
                _operationControl = value;
            }
        }
    
        public System.IObservable<AindVrForagingTaskParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindVrForagingTaskParameters(this)));
        }
    
        public System.IObservable<AindVrForagingTaskParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindVrForagingTaskParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("RngSeed = " + _rngSeed + ", ");
            stringBuilder.Append("AindBehaviorServicesPkgVersion = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("Updaters = " + _updaters + ", ");
            stringBuilder.Append("Environment = " + _environment + ", ");
            stringBuilder.Append("OperationControl = " + _operationControl);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Controls audio feedback parameters for the task.
    ///
    ///This class manages audio cue generation including tone duration and frequency
    ///for auditory feedback during the behavioral task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Controls audio feedback parameters for the task.\n\nThis class manages audio cue ge" +
        "neration including tone duration and frequency\nfor auditory feedback during the " +
        "behavioral task.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AudioControl
    {
    
        private double _duration;
    
        private double _frequency;
    
        public AudioControl()
        {
            _duration = 0.2D;
            _frequency = 1000D;
        }
    
        protected AudioControl(AudioControl other)
        {
            _duration = other._duration;
            _frequency = other._frequency;
        }
    
        /// <summary>
        /// Duration
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("duration")]
        [System.ComponentModel.DescriptionAttribute("Duration")]
        public double Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        /// <summary>
        /// Frequency (Hz) of the audio cue
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frequency")]
        [System.ComponentModel.DescriptionAttribute("Frequency (Hz) of the audio cue")]
        public double Frequency
        {
            get
            {
                return _frequency;
            }
            set
            {
                _frequency = value;
            }
        }
    
        public System.IObservable<AudioControl> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AudioControl(this)));
        }
    
        public System.IObservable<AudioControl> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AudioControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Duration = " + _duration + ", ");
            stringBuilder.Append("Frequency = " + _frequency);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Motor axis available
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum Axis
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        X = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Y1 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Y2 = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
        Z = 4,
    }


    /// <summary>
    /// Axis configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Axis configuration")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AxisConfiguration
    {
    
        private Axis _axis;
    
        private int _stepAccelerationInterval;
    
        private int _stepInterval;
    
        private MicrostepResolution _microstepResolution;
    
        private int _maximumStepInterval;
    
        private MotorOperationMode _motorOperationMode;
    
        private double _maxLimit;
    
        private double _minLimit;
    
        public AxisConfiguration()
        {
            _stepAccelerationInterval = 100;
            _stepInterval = 100;
            _microstepResolution = AindVrForagingDataSchema.MicrostepResolution.Microstep8;
            _maximumStepInterval = 2000;
            _motorOperationMode = AindVrForagingDataSchema.MotorOperationMode.Quiet;
            _maxLimit = 25D;
            _minLimit = -0.01D;
        }
    
        protected AxisConfiguration(AxisConfiguration other)
        {
            _axis = other._axis;
            _stepAccelerationInterval = other._stepAccelerationInterval;
            _stepInterval = other._stepInterval;
            _microstepResolution = other._microstepResolution;
            _maximumStepInterval = other._maximumStepInterval;
            _motorOperationMode = other._motorOperationMode;
            _maxLimit = other._maxLimit;
            _minLimit = other._minLimit;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("axis", Required=Newtonsoft.Json.Required.Always)]
        public Axis Axis
        {
            get
            {
                return _axis;
            }
            set
            {
                _axis = value;
            }
        }
    
        /// <summary>
        /// Acceleration of the step interval in microseconds
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("step_acceleration_interval")]
        [System.ComponentModel.DescriptionAttribute("Acceleration of the step interval in microseconds")]
        public int StepAccelerationInterval
        {
            get
            {
                return _stepAccelerationInterval;
            }
            set
            {
                _stepAccelerationInterval = value;
            }
        }
    
        /// <summary>
        /// Step interval in microseconds.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("step_interval")]
        [System.ComponentModel.DescriptionAttribute("Step interval in microseconds.")]
        public int StepInterval
        {
            get
            {
                return _stepInterval;
            }
            set
            {
                _stepInterval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("microstep_resolution")]
        public MicrostepResolution MicrostepResolution
        {
            get
            {
                return _microstepResolution;
            }
            set
            {
                _microstepResolution = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("maximum_step_interval")]
        public int MaximumStepInterval
        {
            get
            {
                return _maximumStepInterval;
            }
            set
            {
                _maximumStepInterval = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("motor_operation_mode")]
        public MotorOperationMode MotorOperationMode
        {
            get
            {
                return _motorOperationMode;
            }
            set
            {
                _motorOperationMode = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("max_limit")]
        public double MaxLimit
        {
            get
            {
                return _maxLimit;
            }
            set
            {
                _maxLimit = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("min_limit")]
        public double MinLimit
        {
            get
            {
                return _minLimit;
            }
            set
            {
                _minLimit = value;
            }
        }
    
        public System.IObservable<AxisConfiguration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AxisConfiguration(this)));
        }
    
        public System.IObservable<AxisConfiguration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AxisConfiguration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Axis = " + _axis + ", ");
            stringBuilder.Append("StepAccelerationInterval = " + _stepAccelerationInterval + ", ");
            stringBuilder.Append("StepInterval = " + _stepInterval + ", ");
            stringBuilder.Append("MicrostepResolution = " + _microstepResolution + ", ");
            stringBuilder.Append("MaximumStepInterval = " + _maximumStepInterval + ", ");
            stringBuilder.Append("MotorOperationMode = " + _motorOperationMode + ", ");
            stringBuilder.Append("MaxLimit = " + _maxLimit + ", ");
            stringBuilder.Append("MinLimit = " + _minLimit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BaseModel
    {
    
        public BaseModel()
        {
        }
    
        protected BaseModel(BaseModel other)
        {
        }
    
        public System.IObservable<BaseModel> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BaseModel(this)));
        }
    
        public System.IObservable<BaseModel> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BaseModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A beta probability distribution.
    ///
    ///Continuous distribution bounded between 0 and 1. Commonly used
    ///for modeling probabilities and proportions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A beta probability distribution.\n\nContinuous distribution bounded between 0 and 1" +
        ". Commonly used\nfor modeling probabilities and proportions.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BetaDistribution : Distribution
    {
    
        private BetaDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public BetaDistribution()
        {
            _distributionParameters = new BetaDistributionParameters();
        }
    
        protected BetaDistribution(BetaDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public BetaDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<BetaDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BetaDistribution(this)));
        }
    
        public System.IObservable<BetaDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BetaDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    /// <summary>
    /// Parameters for a beta distribution.
    ///
    ///Defined by alpha and beta shape parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters for a beta distribution.\n\nDefined by alpha and beta shape parameters.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BetaDistributionParameters
    {
    
        private string _family;
    
        private double _alpha;
    
        private double _beta;
    
        public BetaDistributionParameters()
        {
            _family = "Beta";
            _alpha = 5D;
            _beta = 5D;
        }
    
        protected BetaDistributionParameters(BetaDistributionParameters other)
        {
            _family = other._family;
            _alpha = other._alpha;
            _beta = other._beta;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Alpha parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("alpha")]
        [System.ComponentModel.DescriptionAttribute("Alpha parameter of the distribution")]
        public double Alpha
        {
            get
            {
                return _alpha;
            }
            set
            {
                _alpha = value;
            }
        }
    
        /// <summary>
        /// Beta parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("beta")]
        [System.ComponentModel.DescriptionAttribute("Beta parameter of the distribution")]
        public double Beta
        {
            get
            {
                return _beta;
            }
            set
            {
                _beta = value;
            }
        }
    
        public System.IObservable<BetaDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BetaDistributionParameters(this)));
        }
    
        public System.IObservable<BetaDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BetaDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Alpha = " + _alpha + ", ");
            stringBuilder.Append("Beta = " + _beta);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A binomial probability distribution.
    ///
    ///Models the number of successes in a fixed number of independent
    ///Bernoulli trials with constant success probability.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A binomial probability distribution.\n\nModels the number of successes in a fixed n" +
        "umber of independent\nBernoulli trials with constant success probability.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BinomialDistribution : Distribution
    {
    
        private BinomialDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public BinomialDistribution()
        {
            _distributionParameters = new BinomialDistributionParameters();
        }
    
        protected BinomialDistribution(BinomialDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public BinomialDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<BinomialDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BinomialDistribution(this)));
        }
    
        public System.IObservable<BinomialDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BinomialDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    /// <summary>
    /// Parameters for a binomial distribution.
    ///
    ///Defined by number of trials (n) and success probability (p).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters for a binomial distribution.\n\nDefined by number of trials (n) and succ" +
        "ess probability (p).")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BinomialDistributionParameters
    {
    
        private string _family;
    
        private int _n;
    
        private double _p;
    
        public BinomialDistributionParameters()
        {
            _family = "Binomial";
            _n = 1;
            _p = 0.5D;
        }
    
        protected BinomialDistributionParameters(BinomialDistributionParameters other)
        {
            _family = other._family;
            _n = other._n;
            _p = other._p;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Number of trials
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("n")]
        [System.ComponentModel.DescriptionAttribute("Number of trials")]
        public int N
        {
            get
            {
                return _n;
            }
            set
            {
                _n = value;
            }
        }
    
        /// <summary>
        /// Probability of success
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("p")]
        [System.ComponentModel.DescriptionAttribute("Probability of success")]
        public double P
        {
            get
            {
                return _p;
            }
            set
            {
                _p = value;
            }
        }
    
        public System.IObservable<BinomialDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BinomialDistributionParameters(this)));
        }
    
        public System.IObservable<BinomialDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BinomialDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("N = " + _n + ", ");
            stringBuilder.Append("P = " + _p);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Configuration for a single experimental block.
    ///
    ///A block represents a period of the experiment with specific environment
    ///statistics and ending conditions. Each block defines the environmental
    ///parameters and termination criteria for that experimental phase.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Configuration for a single experimental block.\n\nA block represents a period of th" +
        "e experiment with specific environment\nstatistics and ending conditions. Each bl" +
        "ock defines the environmental\nparameters and termination criteria for that exper" +
        "imental phase.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Block
    {
    
        private EnvironmentStatistics _environmentStatistics;
    
        private System.Collections.Generic.List<BlockEndCondition> _endConditions;
    
        public Block()
        {
            _environmentStatistics = new EnvironmentStatistics();
            _endConditions = new System.Collections.Generic.List<BlockEndCondition>();
        }
    
        protected Block(Block other)
        {
            _environmentStatistics = other._environmentStatistics;
            _endConditions = other._endConditions;
        }
    
        /// <summary>
        /// Statistics of the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("environment_statistics", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Statistics of the environment")]
        public EnvironmentStatistics EnvironmentStatistics
        {
            get
            {
                return _environmentStatistics;
            }
            set
            {
                _environmentStatistics = value;
            }
        }
    
        /// <summary>
        /// List of end conditions that must be true for the block to end.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("end_conditions")]
        [System.ComponentModel.DescriptionAttribute("List of end conditions that must be true for the block to end.")]
        public System.Collections.Generic.List<BlockEndCondition> EndConditions
        {
            get
            {
                return _endConditions;
            }
            set
            {
                _endConditions = value;
            }
        }
    
        public System.IObservable<Block> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Block(this)));
        }
    
        public System.IObservable<Block> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Block(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("EnvironmentStatistics = " + _environmentStatistics + ", ");
            stringBuilder.Append("EndConditions = " + _endConditions);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Block end condition based on time duration.
    ///
    ///This condition ends a block after a specified amount of time has elapsed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "condition_type")]
    [JsonInheritanceAttribute("Duration", typeof(BlockEndConditionDuration))]
    [JsonInheritanceAttribute("Distance", typeof(BlockEndConditionDistance))]
    [JsonInheritanceAttribute("Choice", typeof(BlockEndConditionChoice))]
    [JsonInheritanceAttribute("Reward", typeof(BlockEndConditionReward))]
    [JsonInheritanceAttribute("PatchCount", typeof(BlockEndConditionPatchCount))]
    [System.ComponentModel.DescriptionAttribute("Block end condition based on time duration.\n\nThis condition ends a block after a " +
        "specified amount of time has elapsed.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BlockEndCondition
    {
    
        public BlockEndCondition()
        {
        }
    
        protected BlockEndCondition(BlockEndCondition other)
        {
        }
    
        public System.IObservable<BlockEndCondition> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockEndCondition(this)));
        }
    
        public System.IObservable<BlockEndCondition> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockEndCondition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Block end condition based on number of choices made.
    ///
    ///This condition ends a block after the animal has made a specified number
    ///of choices (e.g., patch visits or reward attempts).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Block end condition based on number of choices made.\n\nThis condition ends a block" +
        " after the animal has made a specified number\nof choices (e.g., patch visits or " +
        "reward attempts).")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BlockEndConditionChoice : BlockEndCondition
    {
    
        private Distribution _value;
    
        public BlockEndConditionChoice()
        {
        }
    
        protected BlockEndConditionChoice(BlockEndConditionChoice other) : 
                base(other)
        {
            _value = other._value;
        }
    
        /// <summary>
        /// Number of choices after which the block ends.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("value", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Number of choices after which the block ends.")]
        public Distribution Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        public System.IObservable<BlockEndConditionChoice> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockEndConditionChoice(this)));
        }
    
        public System.IObservable<BlockEndConditionChoice> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockEndConditionChoice(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Value = " + _value);
            return true;
        }
    }


    /// <summary>
    /// Block end condition based on distance traveled.
    ///
    ///This condition ends a block after the animal has traveled a specified distance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Block end condition based on distance traveled.\n\nThis condition ends a block afte" +
        "r the animal has traveled a specified distance.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BlockEndConditionDistance : BlockEndCondition
    {
    
        private Distribution _value;
    
        public BlockEndConditionDistance()
        {
        }
    
        protected BlockEndConditionDistance(BlockEndConditionDistance other) : 
                base(other)
        {
            _value = other._value;
        }
    
        /// <summary>
        /// Distance after which the block ends.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("value", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Distance after which the block ends.")]
        public Distribution Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        public System.IObservable<BlockEndConditionDistance> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockEndConditionDistance(this)));
        }
    
        public System.IObservable<BlockEndConditionDistance> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockEndConditionDistance(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Value = " + _value);
            return true;
        }
    }


    /// <summary>
    /// Block end condition based on time duration.
    ///
    ///This condition ends a block after a specified amount of time has elapsed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Block end condition based on time duration.\n\nThis condition ends a block after a " +
        "specified amount of time has elapsed.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BlockEndConditionDuration : BlockEndCondition
    {
    
        private Distribution _value;
    
        public BlockEndConditionDuration()
        {
        }
    
        protected BlockEndConditionDuration(BlockEndConditionDuration other) : 
                base(other)
        {
            _value = other._value;
        }
    
        /// <summary>
        /// Time after which the block ends.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("value", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Time after which the block ends.")]
        public Distribution Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        public System.IObservable<BlockEndConditionDuration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockEndConditionDuration(this)));
        }
    
        public System.IObservable<BlockEndConditionDuration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockEndConditionDuration(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Value = " + _value);
            return true;
        }
    }


    /// <summary>
    /// Block end condition based on number of patches visited.
    ///
    ///This condition ends a block after the animal has visited a specified
    ///number of unique patches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Block end condition based on number of patches visited.\n\nThis condition ends a bl" +
        "ock after the animal has visited a specified\nnumber of unique patches.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BlockEndConditionPatchCount : BlockEndCondition
    {
    
        private Distribution _value;
    
        public BlockEndConditionPatchCount()
        {
        }
    
        protected BlockEndConditionPatchCount(BlockEndConditionPatchCount other) : 
                base(other)
        {
            _value = other._value;
        }
    
        /// <summary>
        /// Number of patches after which the block will end.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("value", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Number of patches after which the block will end.")]
        public Distribution Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        public System.IObservable<BlockEndConditionPatchCount> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockEndConditionPatchCount(this)));
        }
    
        public System.IObservable<BlockEndConditionPatchCount> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockEndConditionPatchCount(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Value = " + _value);
            return true;
        }
    }


    /// <summary>
    /// Block end condition based on number of rewards obtained.
    ///
    ///This condition ends a block after the animal has obtained a specified
    ///number of rewards.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Block end condition based on number of rewards obtained.\n\nThis condition ends a b" +
        "lock after the animal has obtained a specified\nnumber of rewards.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BlockEndConditionReward : BlockEndCondition
    {
    
        private Distribution _value;
    
        public BlockEndConditionReward()
        {
        }
    
        protected BlockEndConditionReward(BlockEndConditionReward other) : 
                base(other)
        {
            _value = other._value;
        }
    
        /// <summary>
        /// Number of rewards after which the block ends.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("value", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Number of rewards after which the block ends.")]
        public Distribution Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        public System.IObservable<BlockEndConditionReward> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockEndConditionReward(this)));
        }
    
        public System.IObservable<BlockEndConditionReward> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockEndConditionReward(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Value = " + _value);
            return true;
        }
    }


    /// <summary>
    /// Structure defining the sequence and sampling of experimental blocks.
    ///
    ///This class manages multiple experimental blocks and determines how they
    ///are presented during the experiment (sequentially or randomly).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Structure defining the sequence and sampling of experimental blocks.\n\nThis class " +
        "manages multiple experimental blocks and determines how they\nare presented durin" +
        "g the experiment (sequentially or randomly).")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BlockStructure
    {
    
        private System.Collections.Generic.List<Block> _blocks;
    
        private BlockStructureSamplingMode _samplingMode;
    
        public BlockStructure()
        {
            _blocks = new System.Collections.Generic.List<Block>();
            _samplingMode = AindVrForagingDataSchema.BlockStructureSamplingMode.Sequential;
        }
    
        protected BlockStructure(BlockStructure other)
        {
            _blocks = other._blocks;
            _samplingMode = other._samplingMode;
        }
    
        /// <summary>
        /// Statistics of the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("blocks", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Statistics of the environment")]
        public System.Collections.Generic.List<Block> Blocks
        {
            get
            {
                return _blocks;
            }
            set
            {
                _blocks = value;
            }
        }
    
        /// <summary>
        /// Sampling mode of the blocks.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sampling_mode")]
        [System.ComponentModel.DescriptionAttribute("Sampling mode of the blocks.")]
        public BlockStructureSamplingMode SamplingMode
        {
            get
            {
                return _samplingMode;
            }
            set
            {
                _samplingMode = value;
            }
        }
    
        public System.IObservable<BlockStructure> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockStructure(this)));
        }
    
        public System.IObservable<BlockStructure> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockStructure(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Blocks = " + _blocks + ", ");
            stringBuilder.Append("SamplingMode = " + _samplingMode);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class CameraControllerSpinnakerCamera
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private System.Collections.Generic.Dictionary<string, SpinnakerCamera> _cameras;
    
        private int? _frameRate;
    
        public CameraControllerSpinnakerCamera()
        {
            _deviceType = "CameraController";
            _cameras = new System.Collections.Generic.Dictionary<string, SpinnakerCamera>();
        }
    
        protected CameraControllerSpinnakerCamera(CameraControllerSpinnakerCamera other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _cameras = other._cameras;
            _frameRate = other._frameRate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Cameras to be instantiated
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cameras", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Cameras to be instantiated")]
        public System.Collections.Generic.Dictionary<string, SpinnakerCamera> Cameras
        {
            get
            {
                return _cameras;
            }
            set
            {
                _cameras = value;
            }
        }
    
        /// <summary>
        /// Frame rate of the trigger to all cameras
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Frame rate of the trigger to all cameras")]
        public int? FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        public System.IObservable<CameraControllerSpinnakerCamera> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraControllerSpinnakerCamera(this)));
        }
    
        public System.IObservable<CameraControllerSpinnakerCamera> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraControllerSpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("Cameras = " + _cameras + ", ");
            stringBuilder.Append("FrameRate = " + _frameRate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class CameraControllerWebCamera
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private System.Collections.Generic.Dictionary<string, WebCamera> _cameras;
    
        private int? _frameRate;
    
        public CameraControllerWebCamera()
        {
            _deviceType = "CameraController";
            _cameras = new System.Collections.Generic.Dictionary<string, WebCamera>();
        }
    
        protected CameraControllerWebCamera(CameraControllerWebCamera other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _cameras = other._cameras;
            _frameRate = other._frameRate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Cameras to be instantiated
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cameras", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Cameras to be instantiated")]
        public System.Collections.Generic.Dictionary<string, WebCamera> Cameras
        {
            get
            {
                return _cameras;
            }
            set
            {
                _cameras = value;
            }
        }
    
        /// <summary>
        /// Frame rate of the trigger to all cameras
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Frame rate of the trigger to all cameras")]
        public int? FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        public System.IObservable<CameraControllerWebCamera> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraControllerWebCamera(this)));
        }
    
        public System.IObservable<CameraControllerWebCamera> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraControllerWebCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("Cameras = " + _cameras + ", ");
            stringBuilder.Append("FrameRate = " + _frameRate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A patch update function that applies multiplicative rate updates with bounds.
    ///
    ///Update in the form of x = clamp(x * rate ** tick_value).
    ///This function multiplies the current value by the rate parameter, maintaining
    ///the result within specified minimum and maximum bounds. Useful for percentage-
    ///based changes and exponential decay/growth patterns.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"A patch update function that applies multiplicative rate updates with bounds.

    Update in the form of x = clamp(x * rate ** tick_value).
    This function multiplies the current value by the rate parameter, maintaining
    the result within specified minimum and maximum bounds. Useful for percentage-
    based changes and exponential decay/growth patterns.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ClampedMultiplicativeRateFunction : PatchUpdateFunction
    {
    
        private double? _minimum;
    
        private double? _maximum;
    
        private Distribution _rate;
    
        public ClampedMultiplicativeRateFunction()
        {
        }
    
        protected ClampedMultiplicativeRateFunction(ClampedMultiplicativeRateFunction other) : 
                base(other)
        {
            _minimum = other._minimum;
            _maximum = other._maximum;
            _rate = other._rate;
        }
    
        /// <summary>
        /// Minimum value of the rate
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("minimum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the rate")]
        public double? Minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the rate
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("maximum", Required=Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the rate")]
        public double? Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        /// <summary>
        /// Rate of the replenishment, in value per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rate", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Rate of the replenishment, in value per rule unit.")]
        public Distribution Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<ClampedMultiplicativeRateFunction> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ClampedMultiplicativeRateFunction(this)));
        }
    
        public System.IObservable<ClampedMultiplicativeRateFunction> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ClampedMultiplicativeRateFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Minimum = " + _minimum + ", ");
            stringBuilder.Append("Maximum = " + _maximum + ", ");
            stringBuilder.Append("Rate = " + _rate);
            return true;
        }
    }


    /// <summary>
    /// A patch update function that applies a clamped rate-based update.
    ///
    ///Update in the form of x = clamp(x + rate * tick_value).
    ///This function updates values at a specified rate while keeping results within
    ///defined minimum and maximum bounds. The rate is applied per rule unit (e.g.,
    ///time, distance, choices).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"A patch update function that applies a clamped rate-based update.

    Update in the form of x = clamp(x + rate * tick_value).
    This function updates values at a specified rate while keeping results within
    defined minimum and maximum bounds. The rate is applied per rule unit (e.g.,
    time, distance, choices).")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ClampedRateFunction : PatchUpdateFunction
    {
    
        private double? _minimum;
    
        private double? _maximum;
    
        private Distribution _rate;
    
        public ClampedRateFunction()
        {
        }
    
        protected ClampedRateFunction(ClampedRateFunction other) : 
                base(other)
        {
            _minimum = other._minimum;
            _maximum = other._maximum;
            _rate = other._rate;
        }
    
        /// <summary>
        /// Minimum value of the rate
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("minimum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the rate")]
        public double? Minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the rate
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("maximum", Required=Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the rate")]
        public double? Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        /// <summary>
        /// Rate of the replenishment, in value per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rate", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Rate of the replenishment, in value per rule unit.")]
        public Distribution Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<ClampedRateFunction> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ClampedRateFunction(this)));
        }
    
        public System.IObservable<ClampedRateFunction> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ClampedRateFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Minimum = " + _minimum + ", ");
            stringBuilder.Append("Maximum = " + _maximum + ", ");
            stringBuilder.Append("Rate = " + _rate);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ConnectedClockOutput
    {
    
        private string _targetDevice;
    
        private int _outputChannel;
    
        public ConnectedClockOutput()
        {
        }
    
        protected ConnectedClockOutput(ConnectedClockOutput other)
        {
            _targetDevice = other._targetDevice;
            _outputChannel = other._outputChannel;
        }
    
        /// <summary>
        /// Optional device name to provide user additional information
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_device")]
        [System.ComponentModel.DescriptionAttribute("Optional device name to provide user additional information")]
        public string TargetDevice
        {
            get
            {
                return _targetDevice;
            }
            set
            {
                _targetDevice = value;
            }
        }
    
        /// <summary>
        /// Output channel
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output_channel", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Output channel")]
        public int OutputChannel
        {
            get
            {
                return _outputChannel;
            }
            set
            {
                _outputChannel = value;
            }
        }
    
        public System.IObservable<ConnectedClockOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ConnectedClockOutput(this)));
        }
    
        public System.IObservable<ConnectedClockOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ConnectedClockOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("TargetDevice = " + _targetDevice + ", ");
            stringBuilder.Append("OutputChannel = " + _outputChannel);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A patch update function that uses a continuous-time Markov chain (CTMC)
    ///to determine patch updates based on a transition probability matrix.
    ///
    ///It expects a transition matrix that takes the current value of the variable
    ///of interest (e.g. Probability), and outputs a new value based on the defined
    ///stochastic process in the transition matrix.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"A patch update function that uses a continuous-time Markov chain (CTMC)
    to determine patch updates based on a transition probability matrix.

    It expects a transition matrix that takes the current value of the variable
    of interest (e.g. Probability), and outputs a new value based on the defined
    stochastic process in the transition matrix.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class CtcmFunction : PatchUpdateFunction
    {
    
        private System.Collections.Generic.List<System.Collections.Generic.List<double>> _transitionMatrix;
    
        private double _rho;
    
        private double _minimum;
    
        private double _maximum;
    
        public CtcmFunction()
        {
            _transitionMatrix = new System.Collections.Generic.List<System.Collections.Generic.List<double>>();
            _minimum = 1D;
            _maximum = 0D;
        }
    
        protected CtcmFunction(CtcmFunction other) : 
                base(other)
        {
            _transitionMatrix = other._transitionMatrix;
            _rho = other._rho;
            _minimum = other._minimum;
            _maximum = other._maximum;
        }
    
        /// <summary>
        /// Transition matrix between states
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("transition_matrix", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Transition matrix between states")]
        public System.Collections.Generic.List<System.Collections.Generic.List<double>> TransitionMatrix
        {
            get
            {
                return _transitionMatrix;
            }
            set
            {
                _transitionMatrix = value;
            }
        }
    
        /// <summary>
        /// The underlying value goverining the stochastic process
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rho", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The underlying value goverining the stochastic process")]
        public double Rho
        {
            get
            {
                return _rho;
            }
            set
            {
                _rho = value;
            }
        }
    
        /// <summary>
        /// Maximum value after update
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("minimum")]
        [System.ComponentModel.DescriptionAttribute("Maximum value after update")]
        public double Minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }
    
        /// <summary>
        /// Minimum value after update
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maximum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value after update")]
        public double Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        public System.IObservable<CtcmFunction> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CtcmFunction(this)));
        }
    
        public System.IObservable<CtcmFunction> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CtcmFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("TransitionMatrix = " + _transitionMatrix + ", ");
            stringBuilder.Append("Rho = " + _rho + ", ");
            stringBuilder.Append("Minimum = " + _minimum + ", ");
            stringBuilder.Append("Maximum = " + _maximum);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class DisplayCalibration
    {
    
        private DisplayIntrinsics _intrinsics;
    
        private DisplayExtrinsics _extrinsics;
    
        public DisplayCalibration()
        {
            _intrinsics = new DisplayIntrinsics();
            _extrinsics = new DisplayExtrinsics();
        }
    
        protected DisplayCalibration(DisplayCalibration other)
        {
            _intrinsics = other._intrinsics;
            _extrinsics = other._extrinsics;
        }
    
        /// <summary>
        /// Intrinsics
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("intrinsics")]
        [System.ComponentModel.DescriptionAttribute("Intrinsics")]
        public DisplayIntrinsics Intrinsics
        {
            get
            {
                return _intrinsics;
            }
            set
            {
                _intrinsics = value;
            }
        }
    
        /// <summary>
        /// Extrinsics
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("extrinsics")]
        [System.ComponentModel.DescriptionAttribute("Extrinsics")]
        public DisplayExtrinsics Extrinsics
        {
            get
            {
                return _extrinsics;
            }
            set
            {
                _extrinsics = value;
            }
        }
    
        public System.IObservable<DisplayCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DisplayCalibration(this)));
        }
    
        public System.IObservable<DisplayCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DisplayCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Intrinsics = " + _intrinsics + ", ");
            stringBuilder.Append("Extrinsics = " + _extrinsics);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class DisplayExtrinsics
    {
    
        private AindBehaviorServicesRigVisualStimulationVector3 _rotation;
    
        private AindBehaviorServicesRigVisualStimulationVector3 _translation;
    
        public DisplayExtrinsics()
        {
            _rotation = new AindBehaviorServicesRigVisualStimulationVector3();
            _translation = new AindBehaviorServicesRigVisualStimulationVector3();
        }
    
        protected DisplayExtrinsics(DisplayExtrinsics other)
        {
            _rotation = other._rotation;
            _translation = other._translation;
        }
    
        /// <summary>
        /// Rotation vector (radians)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rotation")]
        [System.ComponentModel.DescriptionAttribute("Rotation vector (radians)")]
        public AindBehaviorServicesRigVisualStimulationVector3 Rotation
        {
            get
            {
                return _rotation;
            }
            set
            {
                _rotation = value;
            }
        }
    
        /// <summary>
        /// Translation (in cm)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("translation")]
        [System.ComponentModel.DescriptionAttribute("Translation (in cm)")]
        public AindBehaviorServicesRigVisualStimulationVector3 Translation
        {
            get
            {
                return _translation;
            }
            set
            {
                _translation = value;
            }
        }
    
        public System.IObservable<DisplayExtrinsics> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DisplayExtrinsics(this)));
        }
    
        public System.IObservable<DisplayExtrinsics> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DisplayExtrinsics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Rotation = " + _rotation + ", ");
            stringBuilder.Append("Translation = " + _translation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class DisplayIntrinsics
    {
    
        private int _frameWidth;
    
        private int _frameHeight;
    
        private double _displayWidth;
    
        private double _displayHeight;
    
        public DisplayIntrinsics()
        {
            _frameWidth = 1920;
            _frameHeight = 1080;
            _displayWidth = 20D;
            _displayHeight = 15D;
        }
    
        protected DisplayIntrinsics(DisplayIntrinsics other)
        {
            _frameWidth = other._frameWidth;
            _frameHeight = other._frameHeight;
            _displayWidth = other._displayWidth;
            _displayHeight = other._displayHeight;
        }
    
        /// <summary>
        /// Frame width (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_width")]
        [System.ComponentModel.DescriptionAttribute("Frame width (px)")]
        public int FrameWidth
        {
            get
            {
                return _frameWidth;
            }
            set
            {
                _frameWidth = value;
            }
        }
    
        /// <summary>
        /// Frame height (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_height")]
        [System.ComponentModel.DescriptionAttribute("Frame height (px)")]
        public int FrameHeight
        {
            get
            {
                return _frameHeight;
            }
            set
            {
                _frameHeight = value;
            }
        }
    
        /// <summary>
        /// Display width (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("display_width")]
        [System.ComponentModel.DescriptionAttribute("Display width (cm)")]
        public double DisplayWidth
        {
            get
            {
                return _displayWidth;
            }
            set
            {
                _displayWidth = value;
            }
        }
    
        /// <summary>
        /// Display width (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("display_height")]
        [System.ComponentModel.DescriptionAttribute("Display width (cm)")]
        public double DisplayHeight
        {
            get
            {
                return _displayHeight;
            }
            set
            {
                _displayHeight = value;
            }
        }
    
        public System.IObservable<DisplayIntrinsics> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DisplayIntrinsics(this)));
        }
    
        public System.IObservable<DisplayIntrinsics> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DisplayIntrinsics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("FrameWidth = " + _frameWidth + ", ");
            stringBuilder.Append("FrameHeight = " + _frameHeight + ", ");
            stringBuilder.Append("DisplayWidth = " + _displayWidth + ", ");
            stringBuilder.Append("DisplayHeight = " + _displayHeight);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class DisplaysCalibration
    {
    
        private DisplayCalibration _left;
    
        private DisplayCalibration _center;
    
        private DisplayCalibration _right;
    
        public DisplaysCalibration()
        {
            _left = new DisplayCalibration();
            _center = new DisplayCalibration();
            _right = new DisplayCalibration();
        }
    
        protected DisplaysCalibration(DisplaysCalibration other)
        {
            _left = other._left;
            _center = other._center;
            _right = other._right;
        }
    
        /// <summary>
        /// Left display calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("left")]
        [System.ComponentModel.DescriptionAttribute("Left display calibration")]
        public DisplayCalibration Left
        {
            get
            {
                return _left;
            }
            set
            {
                _left = value;
            }
        }
    
        /// <summary>
        /// Center display calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("center")]
        [System.ComponentModel.DescriptionAttribute("Center display calibration")]
        public DisplayCalibration Center
        {
            get
            {
                return _center;
            }
            set
            {
                _center = value;
            }
        }
    
        /// <summary>
        /// Right display calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("right")]
        [System.ComponentModel.DescriptionAttribute("Right display calibration")]
        public DisplayCalibration Right
        {
            get
            {
                return _right;
            }
            set
            {
                _right = value;
            }
        }
    
        public System.IObservable<DisplaysCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DisplaysCalibration(this)));
        }
    
        public System.IObservable<DisplaysCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DisplaysCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Left = " + _left + ", ");
            stringBuilder.Append("Center = " + _center + ", ");
            stringBuilder.Append("Right = " + _right);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [JsonInheritanceAttribute("Scalar", typeof(Scalar))]
    [JsonInheritanceAttribute("Beta", typeof(BetaDistribution))]
    [JsonInheritanceAttribute("Binomial", typeof(BinomialDistribution))]
    [JsonInheritanceAttribute("Exponential", typeof(ExponentialDistribution))]
    [JsonInheritanceAttribute("Gamma", typeof(GammaDistribution))]
    [JsonInheritanceAttribute("LogNormal", typeof(LogNormalDistribution))]
    [JsonInheritanceAttribute("Normal", typeof(NormalDistribution))]
    [JsonInheritanceAttribute("Pdf", typeof(PdfDistribution))]
    [JsonInheritanceAttribute("Poisson", typeof(PoissonDistribution))]
    [JsonInheritanceAttribute("Uniform", typeof(UniformDistribution))]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Distribution
    {
    
        public Distribution()
        {
        }
    
        protected Distribution(Distribution other)
        {
        }
    
        public System.IObservable<Distribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Distribution(this)));
        }
    
        public System.IObservable<Distribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Distribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines the statistical properties of the foraging environment.
    ///
    ///This class specifies the patches available in the environment, their transition
    ///probabilities, and initial state occupancy. It forms the core specification
    ///for the foraging environment structure.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Defines the statistical properties of the foraging environment.

    This class specifies the patches available in the environment, their transition
    probabilities, and initial state occupancy. It forms the core specification
    for the foraging environment structure.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class EnvironmentStatistics
    {
    
        private System.Collections.Generic.List<Patch> _patches;
    
        private System.Collections.Generic.List<System.Collections.Generic.List<double>> _transitionMatrix;
    
        private System.Collections.Generic.List<double> _firstStateOccupancy;
    
        public EnvironmentStatistics()
        {
            _patches = new System.Collections.Generic.List<Patch>();
            _transitionMatrix = new System.Collections.Generic.List<System.Collections.Generic.List<double>>();
        }
    
        protected EnvironmentStatistics(EnvironmentStatistics other)
        {
            _patches = other._patches;
            _transitionMatrix = other._transitionMatrix;
            _firstStateOccupancy = other._firstStateOccupancy;
        }
    
        /// <summary>
        /// List of patches
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("patches")]
        [System.ComponentModel.DescriptionAttribute("List of patches")]
        public System.Collections.Generic.List<Patch> Patches
        {
            get
            {
                return _patches;
            }
            set
            {
                _patches = value;
            }
        }
    
        /// <summary>
        /// Determines the transition probabilities between patches
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("transition_matrix")]
        [System.ComponentModel.DescriptionAttribute("Determines the transition probabilities between patches")]
        public System.Collections.Generic.List<System.Collections.Generic.List<double>> TransitionMatrix
        {
            get
            {
                return _transitionMatrix;
            }
            set
            {
                _transitionMatrix = value;
            }
        }
    
        /// <summary>
        /// Determines the first state the animal will be in. If null, it will be randomly drawn.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("first_state_occupancy")]
        [System.ComponentModel.DescriptionAttribute("Determines the first state the animal will be in. If null, it will be randomly dr" +
            "awn.")]
        public System.Collections.Generic.List<double> FirstStateOccupancy
        {
            get
            {
                return _firstStateOccupancy;
            }
            set
            {
                _firstStateOccupancy = value;
            }
        }
    
        public System.IObservable<EnvironmentStatistics> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new EnvironmentStatistics(this)));
        }
    
        public System.IObservable<EnvironmentStatistics> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new EnvironmentStatistics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Patches = " + _patches + ", ");
            stringBuilder.Append("TransitionMatrix = " + _transitionMatrix + ", ");
            stringBuilder.Append("FirstStateOccupancy = " + _firstStateOccupancy);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// An exponential probability distribution.
    ///
    ///Models time between events in a Poisson process. Commonly used
    ///for wait times and inter-event intervals.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("An exponential probability distribution.\n\nModels time between events in a Poisson" +
        " process. Commonly used\nfor wait times and inter-event intervals.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ExponentialDistribution : Distribution
    {
    
        private ExponentialDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public ExponentialDistribution()
        {
            _distributionParameters = new ExponentialDistributionParameters();
        }
    
        protected ExponentialDistribution(ExponentialDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public ExponentialDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<ExponentialDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ExponentialDistribution(this)));
        }
    
        public System.IObservable<ExponentialDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ExponentialDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    /// <summary>
    /// Parameters for an exponential distribution.
    ///
    ///Defined by the rate parameter (inverse of mean).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters for an exponential distribution.\n\nDefined by the rate parameter (inver" +
        "se of mean).")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ExponentialDistributionParameters
    {
    
        private string _family;
    
        private double _rate;
    
        public ExponentialDistributionParameters()
        {
            _family = "Exponential";
            _rate = 0D;
        }
    
        protected ExponentialDistributionParameters(ExponentialDistributionParameters other)
        {
            _family = other._family;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<ExponentialDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ExponentialDistributionParameters(this)));
        }
    
        public System.IObservable<ExponentialDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ExponentialDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A gamma probability distribution.
    ///
    ///Generalizes the exponential distribution. Used for modeling
    ///positive continuous variables with right-skewed distributions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A gamma probability distribution.\n\nGeneralizes the exponential distribution. Used" +
        " for modeling\npositive continuous variables with right-skewed distributions.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class GammaDistribution : Distribution
    {
    
        private GammaDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public GammaDistribution()
        {
            _distributionParameters = new GammaDistributionParameters();
        }
    
        protected GammaDistribution(GammaDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public GammaDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<GammaDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new GammaDistribution(this)));
        }
    
        public System.IObservable<GammaDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new GammaDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    /// <summary>
    /// Parameters for a gamma distribution.
    ///
    ///Defined by shape (k) and rate (θ⁻¹) parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters for a gamma distribution.\n\nDefined by shape (k) and rate (θ⁻¹) paramet" +
        "ers.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class GammaDistributionParameters
    {
    
        private string _family;
    
        private double _shape;
    
        private double _rate;
    
        public GammaDistributionParameters()
        {
            _family = "Gamma";
            _shape = 1D;
            _rate = 1D;
        }
    
        protected GammaDistributionParameters(GammaDistributionParameters other)
        {
            _family = other._family;
            _shape = other._shape;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Shape parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shape")]
        [System.ComponentModel.DescriptionAttribute("Shape parameter of the distribution")]
        public double Shape
        {
            get
            {
                return _shape;
            }
            set
            {
                _shape = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<GammaDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new GammaDistributionParameters(this)));
        }
    
        public System.IObservable<GammaDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new GammaDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Shape = " + _shape + ", ");
            stringBuilder.Append("Rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpAnalogInput
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpAnalogInput()
        {
            _deviceType = "AnalogInput";
            _whoAmI = 1236;
        }
    
        protected HarpAnalogInput(HarpAnalogInput other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpAnalogInput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpAnalogInput(this)));
        }
    
        public System.IObservable<HarpAnalogInput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpAnalogInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpBehavior
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpBehavior()
        {
            _deviceType = "Behavior";
            _whoAmI = 1216;
        }
    
        protected HarpBehavior(HarpBehavior other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpBehavior> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpBehavior(this)));
        }
    
        public System.IObservable<HarpBehavior> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpBehavior(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpEnvironmentSensor
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpEnvironmentSensor()
        {
            _deviceType = "EnvironmentSensor";
            _whoAmI = 1405;
        }
    
        protected HarpEnvironmentSensor(HarpEnvironmentSensor other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpEnvironmentSensor> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpEnvironmentSensor(this)));
        }
    
        public System.IObservable<HarpEnvironmentSensor> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpEnvironmentSensor(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpLicketySplit
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpLicketySplit()
        {
            _deviceType = "LicketySplit";
            _whoAmI = 1400;
        }
    
        protected HarpLicketySplit(HarpLicketySplit other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpLicketySplit> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpLicketySplit(this)));
        }
    
        public System.IObservable<HarpLicketySplit> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpLicketySplit(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpSniffDetector
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpSniffDetector()
        {
            _deviceType = "SniffDetector";
            _whoAmI = 1401;
        }
    
        protected HarpSniffDetector(HarpSniffDetector other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpSniffDetector> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpSniffDetector(this)));
        }
    
        public System.IObservable<HarpSniffDetector> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpSniffDetector(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpWhiteRabbit
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        private System.Collections.Generic.List<ConnectedClockOutput> _connectedClockOutputs;
    
        public HarpWhiteRabbit()
        {
            _deviceType = "WhiteRabbit";
            _whoAmI = 1404;
            _connectedClockOutputs = new System.Collections.Generic.List<ConnectedClockOutput>();
        }
    
        protected HarpWhiteRabbit(HarpWhiteRabbit other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _connectedClockOutputs = other._connectedClockOutputs;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Connected clock outputs
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("connected_clock_outputs")]
        [System.ComponentModel.DescriptionAttribute("Connected clock outputs")]
        public System.Collections.Generic.List<ConnectedClockOutput> ConnectedClockOutputs
        {
            get
            {
                return _connectedClockOutputs;
            }
            set
            {
                _connectedClockOutputs = value;
            }
        }
    
        public System.IObservable<HarpWhiteRabbit> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpWhiteRabbit(this)));
        }
    
        public System.IObservable<HarpWhiteRabbit> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpWhiteRabbit(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName + ", ");
            stringBuilder.Append("ConnectedClockOutputs = " + _connectedClockOutputs);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A log-normal probability distribution.
    ///
    ///Distribution where the logarithm of the variable is normally distributed.
    ///Always produces positive values and is right-skewed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A log-normal probability distribution.\n\nDistribution where the logarithm of the v" +
        "ariable is normally distributed.\nAlways produces positive values and is right-sk" +
        "ewed.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LogNormalDistribution : Distribution
    {
    
        private LogNormalDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public LogNormalDistribution()
        {
            _distributionParameters = new LogNormalDistributionParameters();
        }
    
        protected LogNormalDistribution(LogNormalDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public LogNormalDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<LogNormalDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogNormalDistribution(this)));
        }
    
        public System.IObservable<LogNormalDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogNormalDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    /// <summary>
    /// Parameters for a log-normal distribution.
    ///
    ///Defined by the mean and standard deviation of the underlying normal distribution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters for a log-normal distribution.\n\nDefined by the mean and standard devia" +
        "tion of the underlying normal distribution.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LogNormalDistributionParameters
    {
    
        private string _family;
    
        private double _mean;
    
        private double _std;
    
        public LogNormalDistributionParameters()
        {
            _family = "LogNormal";
            _mean = 0D;
            _std = 0D;
        }
    
        protected LogNormalDistributionParameters(LogNormalDistributionParameters other)
        {
            _family = other._family;
            _mean = other._mean;
            _std = other._std;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Mean of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [System.ComponentModel.DescriptionAttribute("Mean of the distribution")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        /// <summary>
        /// Standard deviation of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [System.ComponentModel.DescriptionAttribute("Standard deviation of the distribution")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        public System.IObservable<LogNormalDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogNormalDistributionParameters(this)));
        }
    
        public System.IObservable<LogNormalDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogNormalDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Mean = " + _mean + ", ");
            stringBuilder.Append("Std = " + _std);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A patch update function that uses lookup table interpolation.
    ///
    ///Update in the form of x = lut_values[lerp(lut_keys, lut_values, tick_value)].
    ///This function maps input values to output values using a lookup table with
    ///linear interpolation between defined points. Useful for complex, non-linear
    ///reward schedules or parameter updates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"A patch update function that uses lookup table interpolation.

    Update in the form of x = lut_values[lerp(lut_keys, lut_values, tick_value)].
    This function maps input values to output values using a lookup table with
    linear interpolation between defined points. Useful for complex, non-linear
    reward schedules or parameter updates.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LookupTableFunction : PatchUpdateFunction
    {
    
        private System.Collections.Generic.List<double> _lutKeys;
    
        private System.Collections.Generic.List<double> _lutValues;
    
        public LookupTableFunction()
        {
            _lutKeys = new System.Collections.Generic.List<double>();
            _lutValues = new System.Collections.Generic.List<double>();
        }
    
        protected LookupTableFunction(LookupTableFunction other) : 
                base(other)
        {
            _lutKeys = other._lutKeys;
            _lutValues = other._lutValues;
        }
    
        /// <summary>
        /// List of keys of the lookup table
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lut_keys", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("List of keys of the lookup table")]
        public System.Collections.Generic.List<double> LutKeys
        {
            get
            {
                return _lutKeys;
            }
            set
            {
                _lutKeys = value;
            }
        }
    
        /// <summary>
        /// List of values of the lookup table
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lut_values", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("List of values of the lookup table")]
        public System.Collections.Generic.List<double> LutValues
        {
            get
            {
                return _lutValues;
            }
            set
            {
                _lutValues = value;
            }
        }
    
        public System.IObservable<LookupTableFunction> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LookupTableFunction(this)));
        }
    
        public System.IObservable<LookupTableFunction> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LookupTableFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("LutKeys = " + _lutKeys + ", ");
            stringBuilder.Append("LutValues = " + _lutValues);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ManipulatorPosition
    {
    
        private double _x;
    
        private double _y1;
    
        private double _y2;
    
        private double _z;
    
        public ManipulatorPosition()
        {
        }
    
        protected ManipulatorPosition(ManipulatorPosition other)
        {
            _x = other._x;
            _y1 = other._y1;
            _y2 = other._y2;
            _z = other._z;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("x", Required=Newtonsoft.Json.Required.Always)]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y1", Required=Newtonsoft.Json.Required.Always)]
        public double Y1
        {
            get
            {
                return _y1;
            }
            set
            {
                _y1 = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("y2", Required=Newtonsoft.Json.Required.Always)]
        public double Y2
        {
            get
            {
                return _y2;
            }
            set
            {
                _y2 = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("z", Required=Newtonsoft.Json.Required.Always)]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<ManipulatorPosition> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ManipulatorPosition(this)));
        }
    
        public System.IObservable<ManipulatorPosition> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ManipulatorPosition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("X = " + _x + ", ");
            stringBuilder.Append("Y1 = " + _y1 + ", ");
            stringBuilder.Append("Y2 = " + _y2 + ", ");
            stringBuilder.Append("Z = " + _z);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Input for water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Input for water valve calibration class")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Measurement
    {
    
        private double _valveOpenInterval;
    
        private double _valveOpenTime;
    
        private System.Collections.Generic.List<double> _waterWeight;
    
        private int _repeatCount;
    
        public Measurement()
        {
            _waterWeight = new System.Collections.Generic.List<double>();
        }
    
        protected Measurement(Measurement other)
        {
            _valveOpenInterval = other._valveOpenInterval;
            _valveOpenTime = other._valveOpenTime;
            _waterWeight = other._waterWeight;
            _repeatCount = other._repeatCount;
        }
    
        /// <summary>
        /// Time between two consecutive valve openings (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_interval", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Time between two consecutive valve openings (s)")]
        public double ValveOpenInterval
        {
            get
            {
                return _valveOpenInterval;
            }
            set
            {
                _valveOpenInterval = value;
            }
        }
    
        /// <summary>
        /// Valve open interval (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_time", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Valve open interval (s)")]
        public double ValveOpenTime
        {
            get
            {
                return _valveOpenTime;
            }
            set
            {
                _valveOpenTime = value;
            }
        }
    
        /// <summary>
        /// Weight of water delivered (g)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water_weight", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Weight of water delivered (g)")]
        public System.Collections.Generic.List<double> WaterWeight
        {
            get
            {
                return _waterWeight;
            }
            set
            {
                _waterWeight = value;
            }
        }
    
        /// <summary>
        /// Number of times the valve opened.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Number of times the valve opened.")]
        public int RepeatCount
        {
            get
            {
                return _repeatCount;
            }
            set
            {
                _repeatCount = value;
            }
        }
    
        public System.IObservable<Measurement> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Measurement(this)));
        }
    
        public System.IObservable<Measurement> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Measurement(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("ValveOpenInterval = " + _valveOpenInterval + ", ");
            stringBuilder.Append("ValveOpenTime = " + _valveOpenTime + ", ");
            stringBuilder.Append("WaterWeight = " + _waterWeight + ", ");
            stringBuilder.Append("RepeatCount = " + _repeatCount);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MicrostepResolution
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Microstep8 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Microstep16 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Microstep32 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Microstep64 = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MotorOperationMode
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Quiet = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Dynamic = 1,
    }


    /// <summary>
    /// Controls the movable water spout behavior for reward delivery.
    ///
    ///This class configures how the movable spout operates, including when it's
    ///enabled, timing for reward collection, and retraction distance for operant
    ///conditioning protocols.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Controls the movable water spout behavior for reward delivery.\n\nThis class config" +
        "ures how the movable spout operates, including when it\'s\nenabled, timing for rew" +
        "ard collection, and retraction distance for operant\nconditioning protocols.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class MovableSpoutControl
    {
    
        private bool _enabled;
    
        private double _timeToCollectAfterReward;
    
        private double _retractingDistance;
    
        public MovableSpoutControl()
        {
            _enabled = false;
            _timeToCollectAfterReward = 1D;
            _retractingDistance = 0D;
        }
    
        protected MovableSpoutControl(MovableSpoutControl other)
        {
            _enabled = other._enabled;
            _timeToCollectAfterReward = other._timeToCollectAfterReward;
            _retractingDistance = other._retractingDistance;
        }
    
        /// <summary>
        /// Whether the movable spout is enabled
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
        [System.ComponentModel.DescriptionAttribute("Whether the movable spout is enabled")]
        public bool Enabled
        {
            get
            {
                return _enabled;
            }
            set
            {
                _enabled = value;
            }
        }
    
        /// <summary>
        /// Time (s) to collect after reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_to_collect_after_reward")]
        [System.ComponentModel.DescriptionAttribute("Time (s) to collect after reward")]
        public double TimeToCollectAfterReward
        {
            get
            {
                return _timeToCollectAfterReward;
            }
            set
            {
                _timeToCollectAfterReward = value;
            }
        }
    
        /// <summary>
        /// The distance, relative to the default position, the spout will be retracted by
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("retracting_distance")]
        [System.ComponentModel.DescriptionAttribute("The distance, relative to the default position, the spout will be retracted by")]
        public double RetractingDistance
        {
            get
            {
                return _retractingDistance;
            }
            set
            {
                _retractingDistance = value;
            }
        }
    
        public System.IObservable<MovableSpoutControl> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new MovableSpoutControl(this)));
        }
    
        public System.IObservable<MovableSpoutControl> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new MovableSpoutControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Enabled = " + _enabled + ", ");
            stringBuilder.Append("TimeToCollectAfterReward = " + _timeToCollectAfterReward + ", ");
            stringBuilder.Append("RetractingDistance = " + _retractingDistance);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A normal (Gaussian) probability distribution.
    ///
    ///Bell-shaped distribution symmetric around the mean, commonly used
    ///for modeling naturally occurring random variables.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A normal (Gaussian) probability distribution.\n\nBell-shaped distribution symmetric" +
        " around the mean, commonly used\nfor modeling naturally occurring random variable" +
        "s.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class NormalDistribution : Distribution
    {
    
        private NormalDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public NormalDistribution()
        {
            _distributionParameters = new NormalDistributionParameters();
        }
    
        protected NormalDistribution(NormalDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public NormalDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<NormalDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NormalDistribution(this)));
        }
    
        public System.IObservable<NormalDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NormalDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    /// <summary>
    /// Parameters for a normal (Gaussian) distribution.
    ///
    ///Defined by mean (center) and standard deviation (spread).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters for a normal (Gaussian) distribution.\n\nDefined by mean (center) and st" +
        "andard deviation (spread).")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class NormalDistributionParameters
    {
    
        private string _family;
    
        private double _mean;
    
        private double _std;
    
        public NormalDistributionParameters()
        {
            _family = "Normal";
            _mean = 0D;
            _std = 0D;
        }
    
        protected NormalDistributionParameters(NormalDistributionParameters other)
        {
            _family = other._family;
            _mean = other._mean;
            _std = other._std;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Mean of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [System.ComponentModel.DescriptionAttribute("Mean of the distribution")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        /// <summary>
        /// Standard deviation of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [System.ComponentModel.DescriptionAttribute("Standard deviation of the distribution")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        public System.IObservable<NormalDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NormalDistributionParameters(this)));
        }
    
        public System.IObservable<NormalDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NormalDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Mean = " + _mean + ", ");
            stringBuilder.Append("Std = " + _std);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A numerical updater that modifies task parameters during execution.
    ///
    ///This class combines an operation type with parameters to define how values
    ///should be updated dynamically during the task, enabling adaptive behavior
    ///based on animal performance or other criteria.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"A numerical updater that modifies task parameters during execution.

    This class combines an operation type with parameters to define how values
    should be updated dynamically during the task, enabling adaptive behavior
    based on animal performance or other criteria.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class NumericalUpdater
    {
    
        private NumericalUpdaterOperation _operation;
    
        private NumericalUpdaterParameters _parameters;
    
        public NumericalUpdater()
        {
            _operation = AindVrForagingDataSchema.NumericalUpdaterOperation.None;
            _parameters = new NumericalUpdaterParameters();
        }
    
        protected NumericalUpdater(NumericalUpdater other)
        {
            _operation = other._operation;
            _parameters = other._parameters;
        }
    
        /// <summary>
        /// Operation to perform on the parameter
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation")]
        [System.ComponentModel.DescriptionAttribute("Operation to perform on the parameter")]
        public NumericalUpdaterOperation Operation
        {
            get
            {
                return _operation;
            }
            set
            {
                _operation = value;
            }
        }
    
        /// <summary>
        /// Parameters of the updater
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the updater")]
        public NumericalUpdaterParameters Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value;
            }
        }
    
        public System.IObservable<NumericalUpdater> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NumericalUpdater(this)));
        }
    
        public System.IObservable<NumericalUpdater> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NumericalUpdater(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Operation = " + _operation + ", ");
            stringBuilder.Append("Parameters = " + _parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of operations that can be performed by numerical updaters.
    ///
    ///These operations define how parameter values are modified during task execution,
    ///allowing for dynamic adjustment of task parameters based on performance or other criteria.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum NumericalUpdaterOperation
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Offset")]
        Offset = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Gain")]
        Gain = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Set")]
        Set = 3,
    }


    /// <summary>
    /// Parameters that control how numerical updates are applied to task values.
    ///
    ///These parameters define the bounds and increments for updating numerical values
    ///during task execution, ensuring values stay within acceptable ranges.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters that control how numerical updates are applied to task values.\n\nThese " +
        "parameters define the bounds and increments for updating numerical values\nduring" +
        " task execution, ensuring values stay within acceptable ranges.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class NumericalUpdaterParameters
    {
    
        private double _initialValue;
    
        private double _onSuccess;
    
        private double _onFailure;
    
        private double _increment;
    
        private double _decrement;
    
        private double _minimum;
    
        private double _maximum;
    
        public NumericalUpdaterParameters()
        {
            _initialValue = 0D;
            _onSuccess = 0D;
            _onFailure = 0D;
            _increment = 0D;
            _decrement = 0D;
            _minimum = 0D;
            _maximum = 0D;
        }
    
        protected NumericalUpdaterParameters(NumericalUpdaterParameters other)
        {
            _initialValue = other._initialValue;
            _onSuccess = other._onSuccess;
            _onFailure = other._onFailure;
            _increment = other._increment;
            _decrement = other._decrement;
            _minimum = other._minimum;
            _maximum = other._maximum;
        }
    
        /// <summary>
        /// Initial value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("initial_value")]
        [System.ComponentModel.DescriptionAttribute("Initial value of the parameter")]
        public double InitialValue
        {
            get
            {
                return _initialValue;
            }
            set
            {
                _initialValue = value;
            }
        }
    
        /// <summary>
        /// Value used to update the parameter by on success
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("on_success")]
        [System.ComponentModel.DescriptionAttribute("Value used to update the parameter by on success")]
        public double OnSuccess
        {
            get
            {
                return _onSuccess;
            }
            set
            {
                _onSuccess = value;
            }
        }
    
        /// <summary>
        /// Value used to update the parameter by on failure
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("on_failure")]
        [System.ComponentModel.DescriptionAttribute("Value used to update the parameter by on failure")]
        public double OnFailure
        {
            get
            {
                return _onFailure;
            }
            set
            {
                _onFailure = value;
            }
        }
    
        /// <summary>
        /// Value to increment the parameter by
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("increment")]
        [System.ComponentModel.DescriptionAttribute("Value to increment the parameter by")]
        public double Increment
        {
            get
            {
                return _increment;
            }
            set
            {
                _increment = value;
            }
        }
    
        /// <summary>
        /// Value to decrement the parameter by
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("decrement")]
        [System.ComponentModel.DescriptionAttribute("Value to decrement the parameter by")]
        public double Decrement
        {
            get
            {
                return _decrement;
            }
            set
            {
                _decrement = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("minimum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the parameter")]
        public double Minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maximum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the parameter")]
        public double Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        public System.IObservable<NumericalUpdaterParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NumericalUpdaterParameters(this)));
        }
    
        public System.IObservable<NumericalUpdaterParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NumericalUpdaterParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("InitialValue = " + _initialValue + ", ");
            stringBuilder.Append("OnSuccess = " + _onSuccess + ", ");
            stringBuilder.Append("OnFailure = " + _onFailure + ", ");
            stringBuilder.Append("Increment = " + _increment + ", ");
            stringBuilder.Append("Decrement = " + _decrement + ", ");
            stringBuilder.Append("Minimum = " + _minimum + ", ");
            stringBuilder.Append("Maximum = " + _maximum);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Controls the odor delivery system parameters.
    ///
    ///This class manages the olfactory stimulus delivery system, including flow rates,
    ///valve timing, and carrier gas configuration. It ensures proper odor concentration
    ///and delivery timing for the behavioral task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Controls the odor delivery system parameters.\n\nThis class manages the olfactory s" +
        "timulus delivery system, including flow rates,\nvalve timing, and carrier gas con" +
        "figuration. It ensures proper odor concentration\nand delivery timing for the beh" +
        "avioral task.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OdorControl
    {
    
        private double _valveMaxOpenTime;
    
        private double _targetTotalFlow;
    
        private bool _useChannel3AsCarrier;
    
        private double _targetOdorFlow;
    
        public OdorControl()
        {
            _valveMaxOpenTime = 10D;
            _targetTotalFlow = 1000D;
            _useChannel3AsCarrier = true;
            _targetOdorFlow = 100D;
        }
    
        protected OdorControl(OdorControl other)
        {
            _valveMaxOpenTime = other._valveMaxOpenTime;
            _targetTotalFlow = other._targetTotalFlow;
            _useChannel3AsCarrier = other._useChannel3AsCarrier;
            _targetOdorFlow = other._targetOdorFlow;
        }
    
        /// <summary>
        /// Maximum time (s) the valve can be open continuously
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_max_open_time")]
        [System.ComponentModel.DescriptionAttribute("Maximum time (s) the valve can be open continuously")]
        public double ValveMaxOpenTime
        {
            get
            {
                return _valveMaxOpenTime;
            }
            set
            {
                _valveMaxOpenTime = value;
            }
        }
    
        /// <summary>
        /// Target total flow (ml/s) of the odor mixture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_total_flow")]
        [System.ComponentModel.DescriptionAttribute("Target total flow (ml/s) of the odor mixture")]
        public double TargetTotalFlow
        {
            get
            {
                return _targetTotalFlow;
            }
            set
            {
                _targetTotalFlow = value;
            }
        }
    
        /// <summary>
        /// Whether to use channel 3 as carrier
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_channel_3_as_carrier")]
        [System.ComponentModel.DescriptionAttribute("Whether to use channel 3 as carrier")]
        public bool UseChannel3AsCarrier
        {
            get
            {
                return _useChannel3AsCarrier;
            }
            set
            {
                _useChannel3AsCarrier = value;
            }
        }
    
        /// <summary>
        /// Target odor flow (ml/s) in the odor mixture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_odor_flow")]
        [System.ComponentModel.DescriptionAttribute("Target odor flow (ml/s) in the odor mixture")]
        public double TargetOdorFlow
        {
            get
            {
                return _targetOdorFlow;
            }
            set
            {
                _targetOdorFlow = value;
            }
        }
    
        public System.IObservable<OdorControl> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OdorControl(this)));
        }
    
        public System.IObservable<OdorControl> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OdorControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("ValveMaxOpenTime = " + _valveMaxOpenTime + ", ");
            stringBuilder.Append("TargetTotalFlow = " + _targetTotalFlow + ", ");
            stringBuilder.Append("UseChannel3AsCarrier = " + _useChannel3AsCarrier + ", ");
            stringBuilder.Append("TargetOdorFlow = " + _targetOdorFlow);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Specifies odor delivery parameters for olfactory cues in the VR environment.
    ///
    ///Odors can be delivered at specific locations to provide additional sensory
    ///information for navigation and foraging decisions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Specifies odor delivery parameters for olfactory cues in the VR environment.\n\nOdo" +
        "rs can be delivered at specific locations to provide additional sensory\ninformat" +
        "ion for navigation and foraging decisions.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OdorSpecification
    {
    
        private int _index;
    
        private double _concentration;
    
        public OdorSpecification()
        {
            _concentration = 1D;
        }
    
        protected OdorSpecification(OdorSpecification other)
        {
            _index = other._index;
            _concentration = other._concentration;
        }
    
        /// <summary>
        /// Index of the odor to be used
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("index", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Index of the odor to be used")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        /// <summary>
        /// Concentration of the odor
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("concentration")]
        [System.ComponentModel.DescriptionAttribute("Concentration of the odor")]
        public double Concentration
        {
            get
            {
                return _concentration;
            }
            set
            {
                _concentration = value;
            }
        }
    
        public System.IObservable<OdorSpecification> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OdorSpecification(this)));
        }
    
        public System.IObservable<OdorSpecification> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OdorSpecification(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Index = " + _index + ", ");
            stringBuilder.Append("Concentration = " + _concentration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Olfactometer
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private OlfactometerCalibration _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public Olfactometer()
        {
            _deviceType = "Olfactometer";
            _whoAmI = 1140;
        }
    
        protected Olfactometer(Olfactometer other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        public OlfactometerCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<Olfactometer> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Olfactometer(this)));
        }
    
        public System.IObservable<Olfactometer> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Olfactometer(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Olfactometer calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Olfactometer calibration class")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OlfactometerCalibration
    {
    
        private string _deviceName;
    
        private OlfactometerCalibrationInput _input;
    
        private OlfactometerCalibrationOutput _output;
    
        private System.DateTimeOffset? _date;
    
        private string _description;
    
        private string _notes;
    
        public OlfactometerCalibration()
        {
            _deviceName = "Olfactometer";
            _input = new OlfactometerCalibrationInput();
            _output = new OlfactometerCalibrationOutput();
            _description = "Calibration of the harp olfactometer device";
        }
    
        protected OlfactometerCalibration(OlfactometerCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Name of the device being calibrated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Name of the device being calibrated")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public OlfactometerCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public OlfactometerCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<OlfactometerCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerCalibration(this)));
        }
    
        public System.IObservable<OlfactometerCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("Input = " + _input + ", ");
            stringBuilder.Append("Output = " + _output + ", ");
            stringBuilder.Append("Date = " + _date + ", ");
            stringBuilder.Append("Description = " + _description + ", ");
            stringBuilder.Append("Notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OlfactometerCalibrationInput
    {
    
        private System.Collections.Generic.Dictionary<string, OlfactometerChannelConfig> _channelConfig;
    
        public OlfactometerCalibrationInput()
        {
            _channelConfig = new System.Collections.Generic.Dictionary<string, OlfactometerChannelConfig>();
        }
    
        protected OlfactometerCalibrationInput(OlfactometerCalibrationInput other)
        {
            _channelConfig = other._channelConfig;
        }
    
        /// <summary>
        /// Configuration of olfactometer channels
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channel_config")]
        [System.ComponentModel.DescriptionAttribute("Configuration of olfactometer channels")]
        public System.Collections.Generic.Dictionary<string, OlfactometerChannelConfig> ChannelConfig
        {
            get
            {
                return _channelConfig;
            }
            set
            {
                _channelConfig = value;
            }
        }
    
        public System.IObservable<OlfactometerCalibrationInput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerCalibrationInput(this)));
        }
    
        public System.IObservable<OlfactometerCalibrationInput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("ChannelConfig = " + _channelConfig);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OlfactometerCalibrationOutput
    {
    
        public OlfactometerCalibrationOutput()
        {
        }
    
        protected OlfactometerCalibrationOutput(OlfactometerCalibrationOutput other)
        {
        }
    
        public System.IObservable<OlfactometerCalibrationOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerCalibrationOutput(this)));
        }
    
        public System.IObservable<OlfactometerCalibrationOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Harp Olfactometer available channel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OlfactometerChannel
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Channel0 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Channel1 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Channel2 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Channel3 = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OlfactometerChannelConfig
    {
    
        private int _channelIndex;
    
        private OlfactometerChannelType _channelType;
    
        private OlfactometerChannelConfigFlowRateCapacity _flowRateCapacity;
    
        private double _flowRate;
    
        private string _odorant;
    
        private double? _odorantDilution;
    
        public OlfactometerChannelConfig()
        {
            _channelType = AindVrForagingDataSchema.OlfactometerChannelType.Odor;
            _flowRateCapacity = AindVrForagingDataSchema.OlfactometerChannelConfigFlowRateCapacity._100;
            _flowRate = 100D;
        }
    
        protected OlfactometerChannelConfig(OlfactometerChannelConfig other)
        {
            _channelIndex = other._channelIndex;
            _channelType = other._channelType;
            _flowRateCapacity = other._flowRateCapacity;
            _flowRate = other._flowRate;
            _odorant = other._odorant;
            _odorantDilution = other._odorantDilution;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("channel_index", Required=Newtonsoft.Json.Required.Always)]
        public int ChannelIndex
        {
            get
            {
                return _channelIndex;
            }
            set
            {
                _channelIndex = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channel_type")]
        public OlfactometerChannelType ChannelType
        {
            get
            {
                return _channelType;
            }
            set
            {
                _channelType = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("flow_rate_capacity")]
        public OlfactometerChannelConfigFlowRateCapacity FlowRateCapacity
        {
            get
            {
                return _flowRateCapacity;
            }
            set
            {
                _flowRateCapacity = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("flow_rate")]
        public double FlowRate
        {
            get
            {
                return _flowRate;
            }
            set
            {
                _flowRate = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("odorant")]
        public string Odorant
        {
            get
            {
                return _odorant;
            }
            set
            {
                _odorant = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorant_dilution")]
        public double? OdorantDilution
        {
            get
            {
                return _odorantDilution;
            }
            set
            {
                _odorantDilution = value;
            }
        }
    
        public System.IObservable<OlfactometerChannelConfig> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerChannelConfig(this)));
        }
    
        public System.IObservable<OlfactometerChannelConfig> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerChannelConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("ChannelIndex = " + _channelIndex + ", ");
            stringBuilder.Append("ChannelType = " + _channelType + ", ");
            stringBuilder.Append("FlowRateCapacity = " + _flowRateCapacity + ", ");
            stringBuilder.Append("FlowRate = " + _flowRate + ", ");
            stringBuilder.Append("Odorant = " + _odorant + ", ");
            stringBuilder.Append("OdorantDilution = " + _odorantDilution);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Channel type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum OlfactometerChannelType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Odor")]
        Odor = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Carrier")]
        Carrier = 1,
    }


    /// <summary>
    /// A RewardFunction that is applied when the animal enters the patch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A RewardFunction that is applied when the animal enters the patch.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OnThisPatchEntryRewardFunction : RewardFunction
    {
    
        private PatchUpdateFunction _amount;
    
        private PatchUpdateFunction _probability;
    
        private PatchUpdateFunction _available;
    
        private string _rule;
    
        public OnThisPatchEntryRewardFunction()
        {
            _rule = "OnThisPatchEntry";
        }
    
        protected OnThisPatchEntryRewardFunction(OnThisPatchEntryRewardFunction other) : 
                base(other)
        {
            _amount = other._amount;
            _probability = other._probability;
            _available = other._available;
            _rule = other._rule;
        }
    
        /// <summary>
        /// Defines the amount of reward replenished per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [System.ComponentModel.DescriptionAttribute("Defines the amount of reward replenished per rule unit.")]
        public PatchUpdateFunction Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// Defines the probability of reward replenished per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [System.ComponentModel.DescriptionAttribute("Defines the probability of reward replenished per rule unit.")]
        public PatchUpdateFunction Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        /// <summary>
        /// Defines the amount of reward available replenished in the patch per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("available")]
        [System.ComponentModel.DescriptionAttribute("Defines the amount of reward available replenished in the patch per rule unit.")]
        public PatchUpdateFunction Available
        {
            get
            {
                return _available;
            }
            set
            {
                _available = value;
            }
        }
    
        /// <summary>
        /// Rule to trigger reward function
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rule")]
        [System.ComponentModel.DescriptionAttribute("Rule to trigger reward function")]
        public string Rule
        {
            get
            {
                return _rule;
            }
            set
            {
                _rule = value;
            }
        }
    
        public System.IObservable<OnThisPatchEntryRewardFunction> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OnThisPatchEntryRewardFunction(this)));
        }
    
        public System.IObservable<OnThisPatchEntryRewardFunction> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OnThisPatchEntryRewardFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Amount = " + _amount + ", ");
            stringBuilder.Append("Probability = " + _probability + ", ");
            stringBuilder.Append("Available = " + _available + ", ");
            stringBuilder.Append("Rule = " + _rule);
            return true;
        }
    }


    /// <summary>
    /// Defines operant conditioning logic for reward delivery in the VR foraging task.
    ///
    ///This class controls when and how rewards are delivered based on animal behavior,
    ///implementing stopping requirements, collection timeouts, and spatial constraints.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines operant conditioning logic for reward delivery in the VR foraging task.\n\n" +
        "This class controls when and how rewards are delivered based on animal behavior," +
        "\nimplementing stopping requirements, collection timeouts, and spatial constraint" +
        "s.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OperantLogic
    {
    
        private bool _isOperant;
    
        private double _stopDuration;
    
        private double _timeToCollectReward;
    
        private double _graceDistanceThreshold;
    
        public OperantLogic()
        {
            _isOperant = true;
            _stopDuration = 0D;
            _timeToCollectReward = 100000D;
            _graceDistanceThreshold = 10D;
        }
    
        protected OperantLogic(OperantLogic other)
        {
            _isOperant = other._isOperant;
            _stopDuration = other._stopDuration;
            _timeToCollectReward = other._timeToCollectReward;
            _graceDistanceThreshold = other._graceDistanceThreshold;
        }
    
        /// <summary>
        /// Will the trial implement operant logic
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("is_operant")]
        [System.ComponentModel.DescriptionAttribute("Will the trial implement operant logic")]
        public bool IsOperant
        {
            get
            {
                return _isOperant;
            }
            set
            {
                _isOperant = value;
            }
        }
    
        /// <summary>
        /// Duration (s) the animal must stop for to lock its choice
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stop_duration")]
        [System.ComponentModel.DescriptionAttribute("Duration (s) the animal must stop for to lock its choice")]
        public double StopDuration
        {
            get
            {
                return _stopDuration;
            }
            set
            {
                _stopDuration = value;
            }
        }
    
        /// <summary>
        /// Time(s) the animal has to collect the reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_to_collect_reward")]
        [System.ComponentModel.DescriptionAttribute("Time(s) the animal has to collect the reward")]
        public double TimeToCollectReward
        {
            get
            {
                return _timeToCollectReward;
            }
            set
            {
                _timeToCollectReward = value;
            }
        }
    
        /// <summary>
        /// Virtual distance (cm) the animal must be within to not abort the current choice
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("grace_distance_threshold")]
        [System.ComponentModel.DescriptionAttribute("Virtual distance (cm) the animal must be within to not abort the current choice")]
        public double GraceDistanceThreshold
        {
            get
            {
                return _graceDistanceThreshold;
            }
            set
            {
                _graceDistanceThreshold = value;
            }
        }
    
        public System.IObservable<OperantLogic> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OperantLogic(this)));
        }
    
        public System.IObservable<OperantLogic> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OperantLogic(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("IsOperant = " + _isOperant + ", ");
            stringBuilder.Append("StopDuration = " + _stopDuration + ", ");
            stringBuilder.Append("TimeToCollectReward = " + _timeToCollectReward + ", ");
            stringBuilder.Append("GraceDistanceThreshold = " + _graceDistanceThreshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Master control class for all operational hardware systems.
    ///
    ///This class aggregates all the hardware control specifications including
    ///movable spout, odor delivery, position tracking, and audio systems.
    ///It provides a centralized configuration point for all task hardware.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Master control class for all operational hardware systems.

    This class aggregates all the hardware control specifications including
    movable spout, odor delivery, position tracking, and audio systems.
    It provides a centralized configuration point for all task hardware.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OperationControl
    {
    
        private MovableSpoutControl _movableSpoutControl;
    
        private OdorControl _odorControl;
    
        private PositionControl _positionControl;
    
        private AudioControl _audioControl;
    
        public OperationControl()
        {
            _movableSpoutControl = new MovableSpoutControl();
            _odorControl = new OdorControl();
            _positionControl = new PositionControl();
            _audioControl = new AudioControl();
        }
    
        protected OperationControl(OperationControl other)
        {
            _movableSpoutControl = other._movableSpoutControl;
            _odorControl = other._odorControl;
            _positionControl = other._positionControl;
            _audioControl = other._audioControl;
        }
    
        /// <summary>
        /// Control of the movable spout
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("movable_spout_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the movable spout")]
        public MovableSpoutControl MovableSpoutControl
        {
            get
            {
                return _movableSpoutControl;
            }
            set
            {
                _movableSpoutControl = value;
            }
        }
    
        /// <summary>
        /// Control of the odor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the odor")]
        public OdorControl OdorControl
        {
            get
            {
                return _odorControl;
            }
            set
            {
                _odorControl = value;
            }
        }
    
        /// <summary>
        /// Control of the position
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("position_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the position")]
        public PositionControl PositionControl
        {
            get
            {
                return _positionControl;
            }
            set
            {
                _positionControl = value;
            }
        }
    
        /// <summary>
        /// Control of the audio
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("audio_control")]
        [System.ComponentModel.DescriptionAttribute("Control of the audio")]
        public AudioControl AudioControl
        {
            get
            {
                return _audioControl;
            }
            set
            {
                _audioControl = value;
            }
        }
    
        public System.IObservable<OperationControl> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OperationControl(this)));
        }
    
        public System.IObservable<OperationControl> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OperationControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("MovableSpoutControl = " + _movableSpoutControl + ", ");
            stringBuilder.Append("OdorControl = " + _odorControl + ", ");
            stringBuilder.Append("PositionControl = " + _positionControl + ", ");
            stringBuilder.Append("AudioControl = " + _audioControl);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A RewardFunction that is applied when the animal is outside of the patch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A RewardFunction that is applied when the animal is outside of the patch.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OutsideRewardFunction : RewardFunction
    {
    
        private PatchUpdateFunction _amount;
    
        private PatchUpdateFunction _probability;
    
        private PatchUpdateFunction _available;
    
        private OutsideRewardFunctionRule _rule;
    
        private double _delay;
    
        public OutsideRewardFunction()
        {
            _rule = AindVrForagingDataSchema.OutsideRewardFunctionRule.OnTime;
            _delay = 0D;
        }
    
        protected OutsideRewardFunction(OutsideRewardFunction other) : 
                base(other)
        {
            _amount = other._amount;
            _probability = other._probability;
            _available = other._available;
            _rule = other._rule;
            _delay = other._delay;
        }
    
        /// <summary>
        /// Defines the amount of reward replenished per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [System.ComponentModel.DescriptionAttribute("Defines the amount of reward replenished per rule unit.")]
        public PatchUpdateFunction Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// Defines the probability of reward replenished per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [System.ComponentModel.DescriptionAttribute("Defines the probability of reward replenished per rule unit.")]
        public PatchUpdateFunction Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        /// <summary>
        /// Defines the amount of reward available replenished in the patch per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("available")]
        [System.ComponentModel.DescriptionAttribute("Defines the amount of reward available replenished in the patch per rule unit.")]
        public PatchUpdateFunction Available
        {
            get
            {
                return _available;
            }
            set
            {
                _available = value;
            }
        }
    
        /// <summary>
        /// Rule to trigger reward function
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rule")]
        [System.ComponentModel.DescriptionAttribute("Rule to trigger reward function")]
        public OutsideRewardFunctionRule Rule
        {
            get
            {
                return _rule;
            }
            set
            {
                _rule = value;
            }
        }
    
        /// <summary>
        /// Delay (s) before the replenishment starts after the rule is triggered.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("delay")]
        [System.ComponentModel.DescriptionAttribute("Delay (s) before the replenishment starts after the rule is triggered.")]
        public double Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        public System.IObservable<OutsideRewardFunction> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OutsideRewardFunction(this)));
        }
    
        public System.IObservable<OutsideRewardFunction> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OutsideRewardFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Amount = " + _amount + ", ");
            stringBuilder.Append("Probability = " + _probability + ", ");
            stringBuilder.Append("Available = " + _available + ", ");
            stringBuilder.Append("Rule = " + _rule + ", ");
            stringBuilder.Append("Delay = " + _delay);
            return true;
        }
    }


    /// <summary>
    /// Represents statistics for a patch in the VR foraging task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Represents statistics for a patch in the VR foraging task.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Patch
    {
    
        private string _label;
    
        private int _stateIndex;
    
        private OdorSpecification _odorSpecification;
    
        private RewardSpecification _rewardSpecification;
    
        private PatchVirtualSitesGenerator _patchVirtualSitesGenerator;
    
        private System.Collections.Generic.List<PatchTerminator> _patchTerminators;
    
        public Patch()
        {
            _label = "";
            _stateIndex = 0;
            _rewardSpecification = new RewardSpecification();
            _patchVirtualSitesGenerator = new PatchVirtualSitesGenerator();
            _patchTerminators = new System.Collections.Generic.List<PatchTerminator>();
        }
    
        protected Patch(Patch other)
        {
            _label = other._label;
            _stateIndex = other._stateIndex;
            _odorSpecification = other._odorSpecification;
            _rewardSpecification = other._rewardSpecification;
            _patchVirtualSitesGenerator = other._patchVirtualSitesGenerator;
            _patchTerminators = other._patchTerminators;
        }
    
        /// <summary>
        /// Label of the patch
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [System.ComponentModel.DescriptionAttribute("Label of the patch")]
        public string Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        /// <summary>
        /// Index of the state
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("state_index")]
        [System.ComponentModel.DescriptionAttribute("Index of the state")]
        public int StateIndex
        {
            get
            {
                return _stateIndex;
            }
            set
            {
                _stateIndex = value;
            }
        }
    
        /// <summary>
        /// The optional odor specification of the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional odor specification of the patch")]
        public OdorSpecification OdorSpecification
        {
            get
            {
                return _odorSpecification;
            }
            set
            {
                _odorSpecification = value;
            }
        }
    
        /// <summary>
        /// The optional reward specification of the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional reward specification of the patch")]
        public RewardSpecification RewardSpecification
        {
            get
            {
                return _rewardSpecification;
            }
            set
            {
                _rewardSpecification = value;
            }
        }
    
        /// <summary>
        /// Virtual site generation specification
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("patch_virtual_sites_generator")]
        [System.ComponentModel.DescriptionAttribute("Virtual site generation specification")]
        public PatchVirtualSitesGenerator PatchVirtualSitesGenerator
        {
            get
            {
                return _patchVirtualSitesGenerator;
            }
            set
            {
                _patchVirtualSitesGenerator = value;
            }
        }
    
        /// <summary>
        /// The optional termination specification of the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("patch_terminators")]
        [System.ComponentModel.DescriptionAttribute("The optional termination specification of the patch")]
        public System.Collections.Generic.List<PatchTerminator> PatchTerminators
        {
            get
            {
                return _patchTerminators;
            }
            set
            {
                _patchTerminators = value;
            }
        }
    
        public System.IObservable<Patch> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Patch(this)));
        }
    
        public System.IObservable<Patch> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Patch(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Label = " + _label + ", ");
            stringBuilder.Append("StateIndex = " + _stateIndex + ", ");
            stringBuilder.Append("OdorSpecification = " + _odorSpecification + ", ");
            stringBuilder.Append("RewardSpecification = " + _rewardSpecification + ", ");
            stringBuilder.Append("PatchVirtualSitesGenerator = " + _patchVirtualSitesGenerator + ", ");
            stringBuilder.Append("PatchTerminators = " + _patchTerminators);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A RewardFunction that is applied when the animal is inside the patch.
    ///For the purposes of this function post-patch and inter-patch are excluded.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A RewardFunction that is applied when the animal is inside the patch.\nFor the pur" +
        "poses of this function post-patch and inter-patch are excluded.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PatchRewardFunction : RewardFunction
    {
    
        private PatchUpdateFunction _amount;
    
        private PatchUpdateFunction _probability;
    
        private PatchUpdateFunction _available;
    
        private PatchRewardFunctionRule _rule;
    
        public PatchRewardFunction()
        {
            _rule = AindVrForagingDataSchema.PatchRewardFunctionRule.OnReward;
        }
    
        protected PatchRewardFunction(PatchRewardFunction other) : 
                base(other)
        {
            _amount = other._amount;
            _probability = other._probability;
            _available = other._available;
            _rule = other._rule;
        }
    
        /// <summary>
        /// Defines the amount of reward replenished per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [System.ComponentModel.DescriptionAttribute("Defines the amount of reward replenished per rule unit.")]
        public PatchUpdateFunction Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// Defines the probability of reward replenished per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [System.ComponentModel.DescriptionAttribute("Defines the probability of reward replenished per rule unit.")]
        public PatchUpdateFunction Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        /// <summary>
        /// Defines the amount of reward available replenished in the patch per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("available")]
        [System.ComponentModel.DescriptionAttribute("Defines the amount of reward available replenished in the patch per rule unit.")]
        public PatchUpdateFunction Available
        {
            get
            {
                return _available;
            }
            set
            {
                _available = value;
            }
        }
    
        /// <summary>
        /// Rule to trigger reward function
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rule")]
        [System.ComponentModel.DescriptionAttribute("Rule to trigger reward function")]
        public PatchRewardFunctionRule Rule
        {
            get
            {
                return _rule;
            }
            set
            {
                _rule = value;
            }
        }
    
        public System.IObservable<PatchRewardFunction> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchRewardFunction(this)));
        }
    
        public System.IObservable<PatchRewardFunction> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchRewardFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Amount = " + _amount + ", ");
            stringBuilder.Append("Probability = " + _probability + ", ");
            stringBuilder.Append("Available = " + _available + ", ");
            stringBuilder.Append("Rule = " + _rule);
            return true;
        }
    }


    /// <summary>
    /// Terminates the patch after a reward site where the animal does not stop in "count" reward sites.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "terminator_type")]
    [JsonInheritanceAttribute("OnRejection", typeof(PatchTerminatorOnRejection))]
    [JsonInheritanceAttribute("OnChoice", typeof(PatchTerminatorOnChoice))]
    [JsonInheritanceAttribute("OnReward", typeof(PatchTerminatorOnReward))]
    [JsonInheritanceAttribute("OnTime", typeof(PatchTerminatorOnTime))]
    [JsonInheritanceAttribute("OnDistance", typeof(PatchTerminatorOnDistance))]
    [System.ComponentModel.DescriptionAttribute("Terminates the patch after a reward site where the animal does not stop in \"count" +
        "\" reward sites.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PatchTerminator
    {
    
        public PatchTerminator()
        {
        }
    
        protected PatchTerminator(PatchTerminator other)
        {
        }
    
        public System.IObservable<PatchTerminator> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchTerminator(this)));
        }
    
        public System.IObservable<PatchTerminator> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchTerminator(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Terminates the patch after "count" choices.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Terminates the patch after \"count\" choices.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PatchTerminatorOnChoice : PatchTerminator
    {
    
        private Distribution _count;
    
        public PatchTerminatorOnChoice()
        {
            _count = new Distribution();
        }
    
        protected PatchTerminatorOnChoice(PatchTerminatorOnChoice other) : 
                base(other)
        {
            _count = other._count;
        }
    
        /// <summary>
        /// Number of choices the animal must make to terminate the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("count")]
        [System.ComponentModel.DescriptionAttribute("Number of choices the animal must make to terminate the patch")]
        public Distribution Count
        {
            get
            {
                return _count;
            }
            set
            {
                _count = value;
            }
        }
    
        public System.IObservable<PatchTerminatorOnChoice> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchTerminatorOnChoice(this)));
        }
    
        public System.IObservable<PatchTerminatorOnChoice> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchTerminatorOnChoice(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Count = " + _count);
            return true;
        }
    }


    /// <summary>
    /// Terminates the patch after a "count" distance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Terminates the patch after a \"count\" distance.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PatchTerminatorOnDistance : PatchTerminator
    {
    
        private Distribution _count;
    
        public PatchTerminatorOnDistance()
        {
        }
    
        protected PatchTerminatorOnDistance(PatchTerminatorOnDistance other) : 
                base(other)
        {
            _count = other._count;
        }
    
        /// <summary>
        /// Number of distance units to wait before terminating the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("count", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Number of distance units to wait before terminating the patch")]
        public Distribution Count
        {
            get
            {
                return _count;
            }
            set
            {
                _count = value;
            }
        }
    
        public System.IObservable<PatchTerminatorOnDistance> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchTerminatorOnDistance(this)));
        }
    
        public System.IObservable<PatchTerminatorOnDistance> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchTerminatorOnDistance(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Count = " + _count);
            return true;
        }
    }


    /// <summary>
    /// Terminates the patch after a reward site where the animal does not stop in "count" reward sites.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Terminates the patch after a reward site where the animal does not stop in \"count" +
        "\" reward sites.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PatchTerminatorOnRejection : PatchTerminator
    {
    
        private Distribution _count;
    
        public PatchTerminatorOnRejection()
        {
            _count = new Distribution();
        }
    
        protected PatchTerminatorOnRejection(PatchTerminatorOnRejection other) : 
                base(other)
        {
            _count = other._count;
        }
    
        /// <summary>
        /// Number of reward sites the animal must not stop in to terminate the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("count")]
        [System.ComponentModel.DescriptionAttribute("Number of reward sites the animal must not stop in to terminate the patch")]
        public Distribution Count
        {
            get
            {
                return _count;
            }
            set
            {
                _count = value;
            }
        }
    
        public System.IObservable<PatchTerminatorOnRejection> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchTerminatorOnRejection(this)));
        }
    
        public System.IObservable<PatchTerminatorOnRejection> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchTerminatorOnRejection(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Count = " + _count);
            return true;
        }
    }


    /// <summary>
    /// Terminates the patch after "count" rewards.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Terminates the patch after \"count\" rewards.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PatchTerminatorOnReward : PatchTerminator
    {
    
        private Distribution _count;
    
        public PatchTerminatorOnReward()
        {
            _count = new Distribution();
        }
    
        protected PatchTerminatorOnReward(PatchTerminatorOnReward other) : 
                base(other)
        {
            _count = other._count;
        }
    
        /// <summary>
        /// Number of rewards the animal must collect to terminate the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("count")]
        [System.ComponentModel.DescriptionAttribute("Number of rewards the animal must collect to terminate the patch")]
        public Distribution Count
        {
            get
            {
                return _count;
            }
            set
            {
                _count = value;
            }
        }
    
        public System.IObservable<PatchTerminatorOnReward> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchTerminatorOnReward(this)));
        }
    
        public System.IObservable<PatchTerminatorOnReward> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchTerminatorOnReward(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Count = " + _count);
            return true;
        }
    }


    /// <summary>
    /// Terminates the patch after a "count" seconds.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Terminates the patch after a \"count\" seconds.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PatchTerminatorOnTime : PatchTerminator
    {
    
        private Distribution _count;
    
        public PatchTerminatorOnTime()
        {
        }
    
        protected PatchTerminatorOnTime(PatchTerminatorOnTime other) : 
                base(other)
        {
            _count = other._count;
        }
    
        /// <summary>
        /// Number of seconds to wait before terminating the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("count", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Number of seconds to wait before terminating the patch")]
        public Distribution Count
        {
            get
            {
                return _count;
            }
            set
            {
                _count = value;
            }
        }
    
        public System.IObservable<PatchTerminatorOnTime> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchTerminatorOnTime(this)));
        }
    
        public System.IObservable<PatchTerminatorOnTime> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchTerminatorOnTime(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Count = " + _count);
            return true;
        }
    }


    /// <summary>
    /// A patch update function that applies a clamped rate-based update.
    ///
    ///Update in the form of x = clamp(x + rate * tick_value).
    ///This function updates values at a specified rate while keeping results within
    ///defined minimum and maximum bounds. The rate is applied per rule unit (e.g.,
    ///time, distance, choices).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "function_type")]
    [JsonInheritanceAttribute("ClampedRateFunction", typeof(ClampedRateFunction))]
    [JsonInheritanceAttribute("ClampedMultiplicativeRateFunction", typeof(ClampedMultiplicativeRateFunction))]
    [JsonInheritanceAttribute("SetValueFunction", typeof(SetValueFunction))]
    [JsonInheritanceAttribute("LookupTableFunction", typeof(LookupTableFunction))]
    [JsonInheritanceAttribute("CtcmFunction", typeof(CtcmFunction))]
    [System.ComponentModel.DescriptionAttribute(@"A patch update function that applies a clamped rate-based update.

    Update in the form of x = clamp(x + rate * tick_value).
    This function updates values at a specified rate while keeping results within
    defined minimum and maximum bounds. The rate is applied per rule unit (e.g.,
    time, distance, choices).")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PatchUpdateFunction
    {
    
        public PatchUpdateFunction()
        {
        }
    
        protected PatchUpdateFunction(PatchUpdateFunction other)
        {
        }
    
        public System.IObservable<PatchUpdateFunction> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchUpdateFunction(this)));
        }
    
        public System.IObservable<PatchUpdateFunction> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchUpdateFunction(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines the generation specifications for all virtual site types within a patch.
    ///
    ///This class contains generators for all the different types of virtual sites
    ///that can appear within a patch environment. Each generator defines how sites
    ///of that type should be created with their properties and distributions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Defines the generation specifications for all virtual site types within a patch.

    This class contains generators for all the different types of virtual sites
    that can appear within a patch environment. Each generator defines how sites
    of that type should be created with their properties and distributions.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PatchVirtualSitesGenerator
    {
    
        private VirtualSiteGenerator _interSite;
    
        private VirtualSiteGenerator _interPatch;
    
        private VirtualSiteGenerator _postPatch;
    
        private VirtualSiteGenerator _rewardSite;
    
        public PatchVirtualSitesGenerator()
        {
            _interSite = new VirtualSiteGenerator();
            _interPatch = new VirtualSiteGenerator();
            _rewardSite = new VirtualSiteGenerator();
        }
    
        protected PatchVirtualSitesGenerator(PatchVirtualSitesGenerator other)
        {
            _interSite = other._interSite;
            _interPatch = other._interPatch;
            _postPatch = other._postPatch;
            _rewardSite = other._rewardSite;
        }
    
        /// <summary>
        /// Generator of the inter-site virtual sites
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_site")]
        [System.ComponentModel.DescriptionAttribute("Generator of the inter-site virtual sites")]
        public VirtualSiteGenerator InterSite
        {
            get
            {
                return _interSite;
            }
            set
            {
                _interSite = value;
            }
        }
    
        /// <summary>
        /// Generator of the inter-patch virtual sites
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("inter_patch")]
        [System.ComponentModel.DescriptionAttribute("Generator of the inter-patch virtual sites")]
        public VirtualSiteGenerator InterPatch
        {
            get
            {
                return _interPatch;
            }
            set
            {
                _interPatch = value;
            }
        }
    
        /// <summary>
        /// Generator of the post-patch virtual sites
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("post_patch")]
        [System.ComponentModel.DescriptionAttribute("Generator of the post-patch virtual sites")]
        public VirtualSiteGenerator PostPatch
        {
            get
            {
                return _postPatch;
            }
            set
            {
                _postPatch = value;
            }
        }
    
        /// <summary>
        /// Generator of the reward-site virtual sites
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_site")]
        [System.ComponentModel.DescriptionAttribute("Generator of the reward-site virtual sites")]
        public VirtualSiteGenerator RewardSite
        {
            get
            {
                return _rewardSite;
            }
            set
            {
                _rewardSite = value;
            }
        }
    
        public System.IObservable<PatchVirtualSitesGenerator> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PatchVirtualSitesGenerator(this)));
        }
    
        public System.IObservable<PatchVirtualSitesGenerator> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PatchVirtualSitesGenerator(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("InterSite = " + _interSite + ", ");
            stringBuilder.Append("InterPatch = " + _interPatch + ", ");
            stringBuilder.Append("PostPatch = " + _postPatch + ", ");
            stringBuilder.Append("RewardSite = " + _rewardSite);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A custom probability density function distribution.
    ///
    ///Allows defining arbitrary discrete distributions by specifying
    ///probability values and their corresponding indices.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A custom probability density function distribution.\n\nAllows defining arbitrary di" +
        "screte distributions by specifying\nprobability values and their corresponding in" +
        "dices.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PdfDistribution : Distribution
    {
    
        private PdfDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public PdfDistribution()
        {
            _distributionParameters = new PdfDistributionParameters();
        }
    
        protected PdfDistribution(PdfDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public PdfDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<PdfDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PdfDistribution(this)));
        }
    
        public System.IObservable<PdfDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PdfDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    /// <summary>
    /// Parameters for a custom probability density function distribution.
    ///
    ///Defined by explicit probability values and their corresponding indices.
    ///Probabilities are automatically normalized to sum to 1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters for a custom probability density function distribution.\n\nDefined by ex" +
        "plicit probability values and their corresponding indices.\nProbabilities are aut" +
        "omatically normalized to sum to 1.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PdfDistributionParameters
    {
    
        private string _family;
    
        private System.Collections.Generic.List<double> _pdf;
    
        private System.Collections.Generic.List<double> _index;
    
        public PdfDistributionParameters()
        {
            _family = "Pdf";
            _pdf = new System.Collections.Generic.List<double>();
            _index = new System.Collections.Generic.List<double>();
        }
    
        protected PdfDistributionParameters(PdfDistributionParameters other)
        {
            _family = other._family;
            _pdf = other._pdf;
            _index = other._index;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// The probability density function
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pdf")]
        [System.ComponentModel.DescriptionAttribute("The probability density function")]
        public System.Collections.Generic.List<double> Pdf
        {
            get
            {
                return _pdf;
            }
            set
            {
                _pdf = value;
            }
        }
    
        /// <summary>
        /// The index of the probability density function
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("index")]
        [System.ComponentModel.DescriptionAttribute("The index of the probability density function")]
        public System.Collections.Generic.List<double> Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        public System.IObservable<PdfDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PdfDistributionParameters(this)));
        }
    
        public System.IObservable<PdfDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PdfDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Pdf = " + _pdf + ", ");
            stringBuilder.Append("Index = " + _index);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A RewardFunction that is always active.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A RewardFunction that is always active.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PersistentRewardFunction : RewardFunction
    {
    
        private PatchUpdateFunction _amount;
    
        private PatchUpdateFunction _probability;
    
        private PatchUpdateFunction _available;
    
        private PersistentRewardFunctionRule _rule;
    
        public PersistentRewardFunction()
        {
        }
    
        protected PersistentRewardFunction(PersistentRewardFunction other) : 
                base(other)
        {
            _amount = other._amount;
            _probability = other._probability;
            _available = other._available;
            _rule = other._rule;
        }
    
        /// <summary>
        /// Defines the amount of reward replenished per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [System.ComponentModel.DescriptionAttribute("Defines the amount of reward replenished per rule unit.")]
        public PatchUpdateFunction Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// Defines the probability of reward replenished per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [System.ComponentModel.DescriptionAttribute("Defines the probability of reward replenished per rule unit.")]
        public PatchUpdateFunction Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        /// <summary>
        /// Defines the amount of reward available replenished in the patch per rule unit.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("available")]
        [System.ComponentModel.DescriptionAttribute("Defines the amount of reward available replenished in the patch per rule unit.")]
        public PatchUpdateFunction Available
        {
            get
            {
                return _available;
            }
            set
            {
                _available = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rule", Required=Newtonsoft.Json.Required.Always)]
        public PersistentRewardFunctionRule Rule
        {
            get
            {
                return _rule;
            }
            set
            {
                _rule = value;
            }
        }
    
        public System.IObservable<PersistentRewardFunction> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PersistentRewardFunction(this)));
        }
    
        public System.IObservable<PersistentRewardFunction> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PersistentRewardFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Amount = " + _amount + ", ");
            stringBuilder.Append("Probability = " + _probability + ", ");
            stringBuilder.Append("Available = " + _available + ", ");
            stringBuilder.Append("Rule = " + _rule);
            return true;
        }
    }


    /// <summary>
    /// A Poisson probability distribution.
    ///
    ///Models the number of events occurring in a fixed interval of time or space
    ///when events occur independently at a constant rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A Poisson probability distribution.\n\nModels the number of events occurring in a f" +
        "ixed interval of time or space\nwhen events occur independently at a constant rat" +
        "e.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PoissonDistribution : Distribution
    {
    
        private PoissonDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public PoissonDistribution()
        {
            _distributionParameters = new PoissonDistributionParameters();
        }
    
        protected PoissonDistribution(PoissonDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public PoissonDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<PoissonDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PoissonDistribution(this)));
        }
    
        public System.IObservable<PoissonDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PoissonDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    /// <summary>
    /// Parameters for a Poisson distribution.
    ///
    ///Defined by the rate parameter (average number of events).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters for a Poisson distribution.\n\nDefined by the rate parameter (average nu" +
        "mber of events).")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PoissonDistributionParameters
    {
    
        private string _family;
    
        private double _rate;
    
        public PoissonDistributionParameters()
        {
            _family = "Poisson";
            _rate = 1D;
        }
    
        protected PoissonDistributionParameters(PoissonDistributionParameters other)
        {
            _family = other._family;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the Poisson process that generates the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the Poisson process that generates the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<PoissonDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PoissonDistributionParameters(this)));
        }
    
        public System.IObservable<PoissonDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PoissonDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Controls the position tracking and movement detection parameters.
    ///
    ///This class manages the position control system including coordinate transformations,
    ///initial positioning, signal filtering, and movement detection thresholds for the
    ///virtual reality foraging task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Controls the position tracking and movement detection parameters.

    This class manages the position control system including coordinate transformations,
    initial positioning, signal filtering, and movement detection thresholds for the
    virtual reality foraging task.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PositionControl
    {
    
        private AindBehaviorVrForagingTaskLogicVector3 _gain;
    
        private AindBehaviorVrForagingTaskLogicVector3 _initialPosition;
    
        private double _frequencyFilterCutoff;
    
        private double _velocityThreshold;
    
        public PositionControl()
        {
            _gain = new AindBehaviorVrForagingTaskLogicVector3();
            _initialPosition = new AindBehaviorVrForagingTaskLogicVector3();
            _frequencyFilterCutoff = 0.5D;
            _velocityThreshold = 1D;
        }
    
        protected PositionControl(PositionControl other)
        {
            _gain = other._gain;
            _initialPosition = other._initialPosition;
            _frequencyFilterCutoff = other._frequencyFilterCutoff;
            _velocityThreshold = other._velocityThreshold;
        }
    
        /// <summary>
        /// Gain of the position control.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("Gain of the position control.")]
        public AindBehaviorVrForagingTaskLogicVector3 Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Gain of the position control.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("initial_position")]
        [System.ComponentModel.DescriptionAttribute("Gain of the position control.")]
        public AindBehaviorVrForagingTaskLogicVector3 InitialPosition
        {
            get
            {
                return _initialPosition;
            }
            set
            {
                _initialPosition = value;
            }
        }
    
        /// <summary>
        /// Cutoff frequency (Hz) of the low-pass filter used to filter the velocity signal.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frequency_filter_cutoff")]
        [System.ComponentModel.DescriptionAttribute("Cutoff frequency (Hz) of the low-pass filter used to filter the velocity signal.")]
        public double FrequencyFilterCutoff
        {
            get
            {
                return _frequencyFilterCutoff;
            }
            set
            {
                _frequencyFilterCutoff = value;
            }
        }
    
        /// <summary>
        /// Threshold (cm/s) of the velocity signal used to detect when the animal is moving.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("velocity_threshold")]
        [System.ComponentModel.DescriptionAttribute("Threshold (cm/s) of the velocity signal used to detect when the animal is moving." +
            "")]
        public double VelocityThreshold
        {
            get
            {
                return _velocityThreshold;
            }
            set
            {
                _velocityThreshold = value;
            }
        }
    
        public System.IObservable<PositionControl> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PositionControl(this)));
        }
    
        public System.IObservable<PositionControl> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PositionControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Gain = " + _gain + ", ");
            stringBuilder.Append("InitialPosition = " + _initialPosition + ", ");
            stringBuilder.Append("FrequencyFilterCutoff = " + _frequencyFilterCutoff + ", ");
            stringBuilder.Append("VelocityThreshold = " + _velocityThreshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Rect
    {
    
        private int _x;
    
        private int _y;
    
        private int _width;
    
        private int _height;
    
        public Rect()
        {
            _x = 0;
            _y = 0;
            _width = 0;
            _height = 0;
        }
    
        protected Rect(Rect other)
        {
            _x = other._x;
            _y = other._y;
            _width = other._width;
            _height = other._height;
        }
    
        /// <summary>
        /// X coordinate of the top-left corner
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the top-left corner")]
        public int X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the top-left corner
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the top-left corner")]
        public int Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Width of the rectangle
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        [System.ComponentModel.DescriptionAttribute("Width of the rectangle")]
        public int Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
    
        /// <summary>
        /// Height of the rectangle
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        [System.ComponentModel.DescriptionAttribute("Height of the rectangle")]
        public int Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    
        public System.IObservable<Rect> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Rect(this)));
        }
    
        public System.IObservable<Rect> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Rect(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("X = " + _x + ", ");
            stringBuilder.Append("Y = " + _y + ", ");
            stringBuilder.Append("Width = " + _width + ", ");
            stringBuilder.Append("Height = " + _height);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines visual rendering properties for virtual environment elements.
    ///
    ///This class controls the visual appearance of virtual sites, including
    ///contrast and other visual parameters that affect how elements are rendered
    ///in the VR environment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines visual rendering properties for virtual environment elements.\n\nThis class" +
        " controls the visual appearance of virtual sites, including\ncontrast and other v" +
        "isual parameters that affect how elements are rendered\nin the VR environment.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class RenderSpecification
    {
    
        private double? _contrast;
    
        public RenderSpecification()
        {
        }
    
        protected RenderSpecification(RenderSpecification other)
        {
            _contrast = other._contrast;
        }
    
        /// <summary>
        /// Contrast of the texture
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("contrast")]
        [System.ComponentModel.DescriptionAttribute("Contrast of the texture")]
        public double? Contrast
        {
            get
            {
                return _contrast;
            }
            set
            {
                _contrast = value;
            }
        }
    
        public System.IObservable<RenderSpecification> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RenderSpecification(this)));
        }
    
        public System.IObservable<RenderSpecification> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RenderSpecification(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Contrast = " + _contrast);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "function_type")]
    [JsonInheritanceAttribute("PatchRewardFunction", typeof(PatchRewardFunction))]
    [JsonInheritanceAttribute("OnThisPatchEntryRewardFunction", typeof(OnThisPatchEntryRewardFunction))]
    [JsonInheritanceAttribute("OutsideRewardFunction", typeof(OutsideRewardFunction))]
    [JsonInheritanceAttribute("PersistentRewardFunction", typeof(PersistentRewardFunction))]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class RewardFunction
    {
    
        public RewardFunction()
        {
        }
    
        protected RewardFunction(RewardFunction other)
        {
        }
    
        public System.IObservable<RewardFunction> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardFunction(this)));
        }
    
        public System.IObservable<RewardFunction> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardFunction(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Specifies reward parameters and behavior for a patch.
    ///
    ///This class defines all aspects of reward delivery including amounts, probabilities,
    ///delays, operant logic, and dynamic update functions. It serves as the complete
    ///specification for how rewards are managed in a given Patch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Specifies reward parameters and behavior for a patch.

    This class defines all aspects of reward delivery including amounts, probabilities,
    delays, operant logic, and dynamic update functions. It serves as the complete
    specification for how rewards are managed in a given Patch.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class RewardSpecification
    {
    
        private OperantLogic _operantLogic;
    
        private Distribution _delay;
    
        private Distribution _amount;
    
        private Distribution _probability;
    
        private Distribution _available;
    
        private System.Collections.Generic.List<RewardFunction> _rewardFunction;
    
        public RewardSpecification()
        {
            _delay = new Distribution();
            _amount = new Distribution();
            _probability = new Distribution();
            _available = new Distribution();
            _rewardFunction = new System.Collections.Generic.List<RewardFunction>();
        }
    
        protected RewardSpecification(RewardSpecification other)
        {
            _operantLogic = other._operantLogic;
            _delay = other._delay;
            _amount = other._amount;
            _probability = other._probability;
            _available = other._available;
            _rewardFunction = other._rewardFunction;
        }
    
        /// <summary>
        /// The optional operant logic of the reward
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operant_logic")]
        [System.ComponentModel.DescriptionAttribute("The optional operant logic of the reward")]
        public OperantLogic OperantLogic
        {
            get
            {
                return _operantLogic;
            }
            set
            {
                _operantLogic = value;
            }
        }
    
        /// <summary>
        /// The optional distribution where the delay to reward will be drawn from
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("delay")]
        [System.ComponentModel.DescriptionAttribute("The optional distribution where the delay to reward will be drawn from")]
        public Distribution Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        /// <summary>
        /// Initial amount of reward in microliters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [System.ComponentModel.DescriptionAttribute("Initial amount of reward in microliters")]
        public Distribution Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// Initial probability of reward delivery
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [System.ComponentModel.DescriptionAttribute("Initial probability of reward delivery")]
        public Distribution Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        /// <summary>
        /// Initial amount of reward available in the patch in microliters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("available")]
        [System.ComponentModel.DescriptionAttribute("Initial amount of reward available in the patch in microliters")]
        public Distribution Available
        {
            get
            {
                return _available;
            }
            set
            {
                _available = value;
            }
        }
    
        /// <summary>
        /// Reward function of the patch
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_function")]
        [System.ComponentModel.DescriptionAttribute("Reward function of the patch")]
        public System.Collections.Generic.List<RewardFunction> RewardFunction
        {
            get
            {
                return _rewardFunction;
            }
            set
            {
                _rewardFunction = value;
            }
        }
    
        public System.IObservable<RewardSpecification> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardSpecification(this)));
        }
    
        public System.IObservable<RewardSpecification> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardSpecification(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("OperantLogic = " + _operantLogic + ", ");
            stringBuilder.Append("Delay = " + _delay + ", ");
            stringBuilder.Append("Amount = " + _amount + ", ");
            stringBuilder.Append("Probability = " + _probability + ", ");
            stringBuilder.Append("Available = " + _available + ", ");
            stringBuilder.Append("RewardFunction = " + _rewardFunction);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Container class for calibration models. In a future release these will be moved to the respective devices
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Container class for calibration models. In a future release these will be moved t" +
        "o the respective devices")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class RigCalibration
    {
    
        private WaterValveCalibration _waterValve;
    
        public RigCalibration()
        {
            _waterValve = new WaterValveCalibration();
        }
    
        protected RigCalibration(RigCalibration other)
        {
            _waterValve = other._waterValve;
        }
    
        /// <summary>
        /// Water valve calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water_valve", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Water valve calibration")]
        public WaterValveCalibration WaterValve
        {
            get
            {
                return _waterValve;
            }
            set
            {
                _waterValve = value;
            }
        }
    
        public System.IObservable<RigCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RigCalibration(this)));
        }
    
        public System.IObservable<RigCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RigCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("WaterValve = " + _waterValve);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A scalar distribution that returns a constant value.
    ///
    ///Useful for fixed parameters that don't vary across trials or samples.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A scalar distribution that returns a constant value.\n\nUseful for fixed parameters" +
        " that don\'t vary across trials or samples.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Scalar : Distribution
    {
    
        private ScalarDistributionParameter _distributionParameters;
    
        private TruncationParameters2 _truncationParameters;
    
        private ScalingParameters2 _scalingParameters;
    
        public Scalar()
        {
            _distributionParameters = new ScalarDistributionParameter();
        }
    
        protected Scalar(Scalar other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public ScalarDistributionParameter DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        public TruncationParameters2 TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        public ScalingParameters2 ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<Scalar> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Scalar(this)));
        }
    
        public System.IObservable<Scalar> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Scalar(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    /// <summary>
    /// Parameters for a scalar (constant) distribution.
    ///
    ///Represents a deterministic value that always returns the same number.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters for a scalar (constant) distribution.\n\nRepresents a deterministic valu" +
        "e that always returns the same number.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ScalarDistributionParameter
    {
    
        private string _family;
    
        private double _value;
    
        public ScalarDistributionParameter()
        {
            _family = "Scalar";
            _value = 0D;
        }
    
        protected ScalarDistributionParameter(ScalarDistributionParameter other)
        {
            _family = other._family;
            _value = other._value;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// The static value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("value")]
        [System.ComponentModel.DescriptionAttribute("The static value of the distribution")]
        public double Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        public System.IObservable<ScalarDistributionParameter> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalarDistributionParameter(this)));
        }
    
        public System.IObservable<ScalarDistributionParameter> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalarDistributionParameter(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Value = " + _value);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Parameters for scaling and offsetting sampled distribution values.
    ///Scaling is applied as (value * scale + offset).
    ///
    ///Applies linear transformation: result = (value * scale) + offset.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters for scaling and offsetting sampled distribution values.\nScaling is app" +
        "lied as (value * scale + offset).\n\nApplies linear transformation: result = (valu" +
        "e * scale) + offset.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ScalingParameters
    {
    
        private double _scale;
    
        private double _offset;
    
        public ScalingParameters()
        {
            _scale = 1D;
            _offset = 0D;
        }
    
        protected ScalingParameters(ScalingParameters other)
        {
            _scale = other._scale;
            _offset = other._offset;
        }
    
        /// <summary>
        /// Scaling factor to apply on the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [System.ComponentModel.DescriptionAttribute("Scaling factor to apply on the sampled distribution")]
        public double Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        /// <summary>
        /// Offset factor to apply on the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset")]
        [System.ComponentModel.DescriptionAttribute("Offset factor to apply on the sampled distribution")]
        public double Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        public System.IObservable<ScalingParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalingParameters(this)));
        }
    
        public System.IObservable<ScalingParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalingParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Scale = " + _scale + ", ");
            stringBuilder.Append("Offset = " + _offset);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Screen
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private DisplaysCalibration _calibration;
    
        private int _displayIndex;
    
        private double _targetRenderFrequency;
    
        private double _targetUpdateFrequency;
    
        private string _textureAssetsDirectory;
    
        private double _brightness;
    
        private double _contrast;
    
        public Screen()
        {
            _deviceType = "Screen";
            _calibration = new DisplaysCalibration();
            _displayIndex = 1;
            _targetRenderFrequency = 60D;
            _targetUpdateFrequency = 120D;
            _textureAssetsDirectory = "Textures";
            _brightness = 0D;
            _contrast = 1D;
        }
    
        protected Screen(Screen other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _displayIndex = other._displayIndex;
            _targetRenderFrequency = other._targetRenderFrequency;
            _targetUpdateFrequency = other._targetUpdateFrequency;
            _textureAssetsDirectory = other._textureAssetsDirectory;
            _brightness = other._brightness;
            _contrast = other._contrast;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Screen calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Screen calibration")]
        public DisplaysCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Display index
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("display_index")]
        [System.ComponentModel.DescriptionAttribute("Display index")]
        public int DisplayIndex
        {
            get
            {
                return _displayIndex;
            }
            set
            {
                _displayIndex = value;
            }
        }
    
        /// <summary>
        /// Target render frequency
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_render_frequency")]
        [System.ComponentModel.DescriptionAttribute("Target render frequency")]
        public double TargetRenderFrequency
        {
            get
            {
                return _targetRenderFrequency;
            }
            set
            {
                _targetRenderFrequency = value;
            }
        }
    
        /// <summary>
        /// Target update frequency
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_update_frequency")]
        [System.ComponentModel.DescriptionAttribute("Target update frequency")]
        public double TargetUpdateFrequency
        {
            get
            {
                return _targetUpdateFrequency;
            }
            set
            {
                _targetUpdateFrequency = value;
            }
        }
    
        /// <summary>
        /// Calibration directory
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("texture_assets_directory")]
        [System.ComponentModel.DescriptionAttribute("Calibration directory")]
        public string TextureAssetsDirectory
        {
            get
            {
                return _textureAssetsDirectory;
            }
            set
            {
                _textureAssetsDirectory = value;
            }
        }
    
        /// <summary>
        /// Brightness
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("brightness")]
        [System.ComponentModel.DescriptionAttribute("Brightness")]
        public double Brightness
        {
            get
            {
                return _brightness;
            }
            set
            {
                _brightness = value;
            }
        }
    
        /// <summary>
        /// Contrast
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("contrast")]
        [System.ComponentModel.DescriptionAttribute("Contrast")]
        public double Contrast
        {
            get
            {
                return _contrast;
            }
            set
            {
                _contrast = value;
            }
        }
    
        public System.IObservable<Screen> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Screen(this)));
        }
    
        public System.IObservable<Screen> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Screen(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("DisplayIndex = " + _displayIndex + ", ");
            stringBuilder.Append("TargetRenderFrequency = " + _targetRenderFrequency + ", ");
            stringBuilder.Append("TargetUpdateFrequency = " + _targetUpdateFrequency + ", ");
            stringBuilder.Append("TextureAssetsDirectory = " + _textureAssetsDirectory + ", ");
            stringBuilder.Append("Brightness = " + _brightness + ", ");
            stringBuilder.Append("Contrast = " + _contrast);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A patch update function that sets the target to a specific value.
    ///
    ///Update in the form of x = value.
    ///This function directly sets the target parameter to a value drawn from the
    ///specified distribution, ignoring the current value. Useful for resetting
    ///parameters or applying discrete changes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"A patch update function that sets the target to a specific value.

    Update in the form of x = value.
    This function directly sets the target parameter to a value drawn from the
    specified distribution, ignoring the current value. Useful for resetting
    parameters or applying discrete changes.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class SetValueFunction : PatchUpdateFunction
    {
    
        private Distribution _value;
    
        public SetValueFunction()
        {
        }
    
        protected SetValueFunction(SetValueFunction other) : 
                base(other)
        {
            _value = other._value;
        }
    
        /// <summary>
        /// Sets the value of the target to this value.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("value", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Sets the value of the target to this value.")]
        public Distribution Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        public System.IObservable<SetValueFunction> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SetValueFunction(this)));
        }
    
        public System.IObservable<SetValueFunction> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SetValueFunction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Value = " + _value);
            return true;
        }
    }


    /// <summary>
    /// Represents 2D dimensions with width and height.
    ///
    ///Used for defining texture sizes, corridor dimensions, and other 2D measurements
    ///in the VR foraging environment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Represents 2D dimensions with width and height.\n\nUsed for defining texture sizes," +
        " corridor dimensions, and other 2D measurements\nin the VR foraging environment.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Size
    {
    
        private double _width;
    
        private double _height;
    
        public Size()
        {
            _width = 0D;
            _height = 0D;
        }
    
        protected Size(Size other)
        {
            _width = other._width;
            _height = other._height;
        }
    
        /// <summary>
        /// Width of the texture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        [System.ComponentModel.DescriptionAttribute("Width of the texture")]
        public double Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
    
        /// <summary>
        /// Height of the texture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        [System.ComponentModel.DescriptionAttribute("Height of the texture")]
        public double Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    
        public System.IObservable<Size> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Size(this)));
        }
    
        public System.IObservable<Size> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Size(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Width = " + _width + ", ");
            stringBuilder.Append("Height = " + _height);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class SpinnakerCamera
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private string _serialNumber;
    
        private int _binning;
    
        private SpinnakerCameraColorProcessing _colorProcessing;
    
        private int _exposure;
    
        private double _gain;
    
        private double? _gamma;
    
        private SpinnakerCameraAdcBitDepth? _adcBitDepth;
    
        private SpinnakerCameraPixelFormat? _pixelFormat;
    
        private Rect _regionOfInterest;
    
        private VideoWriter _videoWriter;
    
        public SpinnakerCamera()
        {
            _deviceType = "SpinnakerCamera";
            _binning = 1;
            _colorProcessing = AindVrForagingDataSchema.SpinnakerCameraColorProcessing.Default;
            _exposure = 1000;
            _gain = 0D;
            _adcBitDepth = AindVrForagingDataSchema.SpinnakerCameraAdcBitDepth.Adc8bit;
            _pixelFormat = AindVrForagingDataSchema.SpinnakerCameraPixelFormat.Mono8;
            _regionOfInterest = new Rect();
        }
    
        protected SpinnakerCamera(SpinnakerCamera other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _serialNumber = other._serialNumber;
            _binning = other._binning;
            _colorProcessing = other._colorProcessing;
            _exposure = other._exposure;
            _gain = other._gain;
            _gamma = other._gamma;
            _adcBitDepth = other._adcBitDepth;
            _pixelFormat = other._pixelFormat;
            _regionOfInterest = other._regionOfInterest;
            _videoWriter = other._videoWriter;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Camera serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Binning
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [System.ComponentModel.DescriptionAttribute("Binning")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        /// <summary>
        /// Color processing
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("color_processing")]
        [System.ComponentModel.DescriptionAttribute("Color processing")]
        public SpinnakerCameraColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        /// <summary>
        /// Exposure time
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [System.ComponentModel.DescriptionAttribute("Exposure time")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        /// <summary>
        /// Gain
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("Gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Gamma. If None, will disable gamma correction.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gamma")]
        [System.ComponentModel.DescriptionAttribute("Gamma. If None, will disable gamma correction.")]
        public double? Gamma
        {
            get
            {
                return _gamma;
            }
            set
            {
                _gamma = value;
            }
        }
    
        /// <summary>
        /// ADC bit depth. If None will be left as default.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("adc_bit_depth")]
        [System.ComponentModel.DescriptionAttribute("ADC bit depth. If None will be left as default.")]
        public SpinnakerCameraAdcBitDepth? AdcBitDepth
        {
            get
            {
                return _adcBitDepth;
            }
            set
            {
                _adcBitDepth = value;
            }
        }
    
        /// <summary>
        /// Pixel format. If None will be left as default.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pixel_format")]
        [System.ComponentModel.DescriptionAttribute("Pixel format. If None will be left as default.")]
        public SpinnakerCameraPixelFormat? PixelFormat
        {
            get
            {
                return _pixelFormat;
            }
            set
            {
                _pixelFormat = value;
            }
        }
    
        /// <summary>
        /// Region of interest
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("region_of_interest")]
        [System.ComponentModel.DescriptionAttribute("Region of interest")]
        public Rect RegionOfInterest
        {
            get
            {
                return _regionOfInterest;
            }
            set
            {
                _regionOfInterest = value;
            }
        }
    
        /// <summary>
        /// Video writer. If not provided, no video will be saved.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("video_writer")]
        [System.ComponentModel.DescriptionAttribute("Video writer. If not provided, no video will be saved.")]
        public VideoWriter VideoWriter
        {
            get
            {
                return _videoWriter;
            }
            set
            {
                _videoWriter = value;
            }
        }
    
        public System.IObservable<SpinnakerCamera> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SpinnakerCamera(this)));
        }
    
        public System.IObservable<SpinnakerCamera> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("Binning = " + _binning + ", ");
            stringBuilder.Append("ColorProcessing = " + _colorProcessing + ", ");
            stringBuilder.Append("Exposure = " + _exposure + ", ");
            stringBuilder.Append("Gain = " + _gain + ", ");
            stringBuilder.Append("Gamma = " + _gamma + ", ");
            stringBuilder.Append("AdcBitDepth = " + _adcBitDepth + ", ");
            stringBuilder.Append("PixelFormat = " + _pixelFormat + ", ");
            stringBuilder.Append("RegionOfInterest = " + _regionOfInterest + ", ");
            stringBuilder.Append("VideoWriter = " + _videoWriter);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SpinnakerCameraAdcBitDepth
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Adc8bit = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Adc10bit = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Adc12bit = 2,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SpinnakerCameraPixelFormat
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Mono8 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Mono16 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Rgb8packed = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Bayergr8 = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
        Bayerrg8 = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
        Bayergb8 = 5,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
        Bayerbg8 = 6,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
        Bayergr16 = 7,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
        Bayerrg16 = 8,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
        Bayergb16 = 9,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
        Bayerbg16 = 10,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
        Mono12packed = 11,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
        Bayergr12packed = 12,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
        Bayerrg12packed = 13,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
        Bayergb12packed = 14,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
        Bayerbg12packed = 15,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
        Yuv411packed = 16,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
        Yuv422packed = 17,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
        Yuv444packed = 18,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
        Mono12p = 19,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
        Bayergr12p = 20,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
        Bayerrg12p = 21,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
        Bayergb12p = 22,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
        Bayerbg12p = 23,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
        Ycbcr8 = 24,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
        Ycbcr4228 = 25,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
        Ycbcr4118 = 26,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
        Bgr8 = 27,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
        Bgra8 = 28,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
        Mono10packed = 29,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
        Bayergr10packed = 30,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
        Bayerrg10packed = 31,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
        Bayergb10packed = 32,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="33")]
        Bayerbg10packed = 33,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="34")]
        Mono10p = 34,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="35")]
        Bayergr10p = 35,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="36")]
        Bayerrg10p = 36,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
        Bayergb10p = 37,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
        Bayerbg10p = 38,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
        Mono1p = 39,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
        Mono2p = 40,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
        Mono4p = 41,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
        Mono8s = 42,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
        Mono10 = 43,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
        Mono12 = 44,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
        Mono14 = 45,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
        Mono16s = 46,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
        Mono32f = 47,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
        Bayerbg10 = 48,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
        Bayerbg12 = 49,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
        Bayergb10 = 50,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
        Bayergb12 = 51,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
        Bayergr10 = 52,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
        Bayergr12 = 53,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
        Bayerrg10 = 54,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
        Bayerrg12 = 55,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
        Rgba8 = 56,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
        Rgba10 = 57,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
        Rgba10p = 58,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
        Rgba12 = 59,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
        Rgba12p = 60,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
        Rgba14 = 61,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
        Rgba16 = 62,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
        Rgb8 = 63,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
        Rgb8Planar = 64,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
        Rgb10 = 65,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
        Rgb10Planar = 66,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
        Rgb10p = 67,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
        Rgb10p32 = 68,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
        Rgb12 = 69,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
        Rgb12Planar = 70,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
        Rgb12p = 71,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
        Rgb14 = 72,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
        Rgb16 = 73,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
        Rgb16s = 74,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
        Rgb32f = 75,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
        Rgb16Planar = 76,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
        Rgb565p = 77,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
        Bgra10 = 78,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
        Bgra10p = 79,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
        Bgra12 = 80,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
        Bgra12p = 81,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
        Bgra14 = 82,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
        Bgra16 = 83,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
        Rgba32f = 84,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
        Bgr10 = 85,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
        Bgr10p = 86,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
        Bgr12 = 87,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
        Bgr12p = 88,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
        Bgr14 = 89,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
        Bgr16 = 90,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
        Bgr565p = 91,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="92")]
        R8 = 92,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="93")]
        R10 = 93,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="94")]
        R12 = 94,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="95")]
        R16 = 95,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="96")]
        G8 = 96,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="97")]
        G10 = 97,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="98")]
        G12 = 98,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="99")]
        G16 = 99,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
        B8 = 100,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="101")]
        B10 = 101,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="102")]
        B12 = 102,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="103")]
        B16 = 103,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="104")]
        Coord3dAbc8 = 104,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="105")]
        Coord3dAbc8Planar = 105,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="106")]
        Coord3dAbc10p = 106,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="107")]
        Coord3dAbc10pPlanar = 107,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="108")]
        Coord3dAbc12p = 108,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="109")]
        Coord3dAbc12pPlanar = 109,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="110")]
        Coord3dAbc16 = 110,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="111")]
        Coord3dAbc16Planar = 111,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="112")]
        Coord3dAbc32f = 112,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="113")]
        Coord3dAbc32fPlanar = 113,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="114")]
        Coord3dAc8 = 114,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="115")]
        Coord3dAc8Planar = 115,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="116")]
        Coord3dAc10p = 116,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="117")]
        Coord3dAc10pPlanar = 117,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="118")]
        Coord3dAc12p = 118,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="119")]
        Coord3dAc12pPlanar = 119,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="120")]
        Coord3dAc16 = 120,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="121")]
        Coord3dAc16Planar = 121,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="122")]
        Coord3dAc32f = 122,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="123")]
        Coord3dAc32fPlanar = 123,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="124")]
        Coord3dA8 = 124,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="125")]
        Coord3dA10p = 125,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="126")]
        Coord3dA12p = 126,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="127")]
        Coord3dA16 = 127,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
        Coord3dA32f = 128,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="129")]
        Coord3dB8 = 129,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="130")]
        Coord3dB10p = 130,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="131")]
        Coord3dB12p = 131,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="132")]
        Coord3dB16 = 132,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="133")]
        Coord3dB32f = 133,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="134")]
        Coord3dC8 = 134,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="135")]
        Coord3dC10p = 135,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="136")]
        Coord3dC12p = 136,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="137")]
        Coord3dC16 = 137,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="138")]
        Coord3dC32f = 138,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="139")]
        Confidence1 = 139,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="140")]
        Confidence1p = 140,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="141")]
        Confidence8 = 141,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="142")]
        Confidence16 = 142,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="143")]
        Confidence32f = 143,
    }


    /// <summary>
    /// Defines visual texture properties for VR environment surfaces.
    ///
    ///Textures are applied to walls, floors, and other surfaces in the virtual
    ///environment to provide visual cues and context for the foraging task.
    ///
    ///Texture name must correspond to a valid texture asset loaded in the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Defines visual texture properties for VR environment surfaces.

    Textures are applied to walls, floors, and other surfaces in the virtual
    environment to provide visual cues and context for the foraging task.

    Texture name must correspond to a valid texture asset loaded in the workflow.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Texture
    {
    
        private string _name;
    
        private Size _size;
    
        public Texture()
        {
            _name = "default";
            _size = new Size();
        }
    
        protected Texture(Texture other)
        {
            _name = other._name;
            _size = other._size;
        }
    
        /// <summary>
        /// Name of the texture
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        [System.ComponentModel.DescriptionAttribute("Name of the texture")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// Size of the texture
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("size")]
        [System.ComponentModel.DescriptionAttribute("Size of the texture")]
        public Size Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
    
        public System.IObservable<Texture> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Texture(this)));
        }
    
        public System.IObservable<Texture> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Texture(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Name = " + _name + ", ");
            stringBuilder.Append("Size = " + _size);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Treadmill
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private TreadmillCalibration _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public Treadmill()
        {
            _deviceType = "Treadmill";
            _whoAmI = 1402;
        }
    
        protected Treadmill(Treadmill other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        public TreadmillCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<Treadmill> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Treadmill(this)));
        }
    
        public System.IObservable<Treadmill> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Treadmill(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Treadmill calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Treadmill calibration class")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class TreadmillCalibration
    {
    
        private string _deviceName;
    
        private TreadmillCalibrationInput _input;
    
        private TreadmillCalibrationOutput _output;
    
        private System.DateTimeOffset? _date;
    
        private string _description;
    
        private string _notes;
    
        public TreadmillCalibration()
        {
            _deviceName = "Treadmill";
            _input = new TreadmillCalibrationInput();
            _output = new TreadmillCalibrationOutput();
            _description = "Calibration of the treadmill system";
        }
    
        protected TreadmillCalibration(TreadmillCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public TreadmillCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public TreadmillCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<TreadmillCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TreadmillCalibration(this)));
        }
    
        public System.IObservable<TreadmillCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TreadmillCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("Input = " + _input + ", ");
            stringBuilder.Append("Output = " + _output + ", ");
            stringBuilder.Append("Date = " + _date + ", ");
            stringBuilder.Append("Description = " + _description + ", ");
            stringBuilder.Append("Notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class TreadmillCalibrationInput
    {
    
        public TreadmillCalibrationInput()
        {
        }
    
        protected TreadmillCalibrationInput(TreadmillCalibrationInput other)
        {
        }
    
        public System.IObservable<TreadmillCalibrationInput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TreadmillCalibrationInput(this)));
        }
    
        public System.IObservable<TreadmillCalibrationInput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TreadmillCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class TreadmillCalibrationOutput
    {
    
        private double _wheelDiameter;
    
        private int _pulsesPerRevolution;
    
        private bool _invertDirection;
    
        private System.Collections.Generic.List<System.Collections.Generic.List<double>> _brakeLookupCalibration;
    
        public TreadmillCalibrationOutput()
        {
            _wheelDiameter = 15D;
            _pulsesPerRevolution = 28800;
            _invertDirection = false;
            _brakeLookupCalibration = new System.Collections.Generic.List<System.Collections.Generic.List<double>>();
        }
    
        protected TreadmillCalibrationOutput(TreadmillCalibrationOutput other)
        {
            _wheelDiameter = other._wheelDiameter;
            _pulsesPerRevolution = other._pulsesPerRevolution;
            _invertDirection = other._invertDirection;
            _brakeLookupCalibration = other._brakeLookupCalibration;
        }
    
        /// <summary>
        /// Wheel diameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("wheel_diameter")]
        [System.ComponentModel.DescriptionAttribute("Wheel diameter")]
        public double WheelDiameter
        {
            get
            {
                return _wheelDiameter;
            }
            set
            {
                _wheelDiameter = value;
            }
        }
    
        /// <summary>
        /// Pulses per revolution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pulses_per_revolution")]
        [System.ComponentModel.DescriptionAttribute("Pulses per revolution")]
        public int PulsesPerRevolution
        {
            get
            {
                return _pulsesPerRevolution;
            }
            set
            {
                _pulsesPerRevolution = value;
            }
        }
    
        /// <summary>
        /// Invert direction
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("invert_direction")]
        [System.ComponentModel.DescriptionAttribute("Invert direction")]
        public bool InvertDirection
        {
            get
            {
                return _invertDirection;
            }
            set
            {
                _invertDirection = value;
            }
        }
    
        /// <summary>
        /// Brake lookup calibration. Each pair of values define (input [torque], output [brake set-point U16])
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("brake_lookup_calibration", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Brake lookup calibration. Each pair of values define (input [torque], output [bra" +
            "ke set-point U16])")]
        public System.Collections.Generic.List<System.Collections.Generic.List<double>> BrakeLookupCalibration
        {
            get
            {
                return _brakeLookupCalibration;
            }
            set
            {
                _brakeLookupCalibration = value;
            }
        }
    
        public System.IObservable<TreadmillCalibrationOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TreadmillCalibrationOutput(this)));
        }
    
        public System.IObservable<TreadmillCalibrationOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TreadmillCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("WheelDiameter = " + _wheelDiameter + ", ");
            stringBuilder.Append("PulsesPerRevolution = " + _pulsesPerRevolution + ", ");
            stringBuilder.Append("InvertDirection = " + _invertDirection + ", ");
            stringBuilder.Append("BrakeLookupCalibration = " + _brakeLookupCalibration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines treadmill friction properties for virtual sites.
    ///
    ///This class controls the friction experienced by the animal when moving
    ///through different virtual sites, allowing for varied locomotion dynamics
    ///across different regions of the environment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines treadmill friction properties for virtual sites.\n\nThis class controls the" +
        " friction experienced by the animal when moving\nthrough different virtual sites," +
        " allowing for varied locomotion dynamics\nacross different regions of the environ" +
        "ment.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class TreadmillSpecification
    {
    
        private Distribution _friction;
    
        public TreadmillSpecification()
        {
        }
    
        protected TreadmillSpecification(TreadmillSpecification other)
        {
            _friction = other._friction;
        }
    
        /// <summary>
        /// Friction of the treadmill (0-1). The drawn value must be between 0 and 1
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("friction")]
        [System.ComponentModel.DescriptionAttribute("Friction of the treadmill (0-1). The drawn value must be between 0 and 1")]
        public Distribution Friction
        {
            get
            {
                return _friction;
            }
            set
            {
                _friction = value;
            }
        }
    
        public System.IObservable<TreadmillSpecification> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TreadmillSpecification(this)));
        }
    
        public System.IObservable<TreadmillSpecification> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TreadmillSpecification(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Friction = " + _friction);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Parameters for truncating a distribution to a specified range. Truncation should
    ///be applied after sampling and scaling.
    ///
    ///The truncation_mode determines how out-of-bounds values are handled:
    ///- "exclude": Resample until a value within [min, max] is obtained.
    ///If after a certain number of attempts no valid value is found, it
    ///will use the average of sampled values and pick the closest bound.
    ///- "clamp": Clamp values to the nearest bound within [min, max].
    ///Used to constrain sampled values within minimum and maximum bounds.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Parameters for truncating a distribution to a specified range. Truncation should
    be applied after sampling and scaling.

    The truncation_mode determines how out-of-bounds values are handled:
    - ""exclude"": Resample until a value within [min, max] is obtained.
    If after a certain number of attempts no valid value is found, it
    will use the average of sampled values and pick the closest bound.
    - ""clamp"": Clamp values to the nearest bound within [min, max].
    Used to constrain sampled values within minimum and maximum bounds.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class TruncationParameters
    {
    
        private TruncationParametersTruncationMode _truncationMode;
    
        private double _min;
    
        private double _max;
    
        public TruncationParameters()
        {
            _truncationMode = AindVrForagingDataSchema.TruncationParametersTruncationMode.Exclude;
            _min = 0D;
            _max = 0D;
        }
    
        protected TruncationParameters(TruncationParameters other)
        {
            _truncationMode = other._truncationMode;
            _min = other._min;
            _max = other._max;
        }
    
        /// <summary>
        /// Mode of truncation to apply
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_mode")]
        [System.ComponentModel.DescriptionAttribute("Mode of truncation to apply")]
        public TruncationParametersTruncationMode TruncationMode
        {
            get
            {
                return _truncationMode;
            }
            set
            {
                _truncationMode = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the sampled distribution")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the sampled distribution")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        public System.IObservable<TruncationParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TruncationParameters(this)));
        }
    
        public System.IObservable<TruncationParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TruncationParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("TruncationMode = " + _truncationMode + ", ");
            stringBuilder.Append("Min = " + _min + ", ");
            stringBuilder.Append("Max = " + _max);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// A uniform probability distribution.
    ///
    ///All values between min and max have equal probability of being sampled.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("A uniform probability distribution.\n\nAll values between min and max have equal pr" +
        "obability of being sampled.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class UniformDistribution : Distribution
    {
    
        private UniformDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public UniformDistribution()
        {
            _distributionParameters = new UniformDistributionParameters();
        }
    
        protected UniformDistribution(UniformDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public UniformDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<UniformDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new UniformDistribution(this)));
        }
    
        public System.IObservable<UniformDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new UniformDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("DistributionParameters = " + _distributionParameters + ", ");
            stringBuilder.Append("TruncationParameters = " + _truncationParameters + ", ");
            stringBuilder.Append("ScalingParameters = " + _scalingParameters);
            return true;
        }
    }


    /// <summary>
    /// Parameters for a uniform distribution.
    ///
    ///Defined by minimum and maximum bounds of the distribution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Parameters for a uniform distribution.\n\nDefined by minimum and maximum bounds of " +
        "the distribution.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class UniformDistributionParameters
    {
    
        private string _family;
    
        private double _min;
    
        private double _max;
    
        public UniformDistributionParameters()
        {
            _family = "Uniform";
            _min = 0D;
            _max = 0D;
        }
    
        protected UniformDistributionParameters(UniformDistributionParameters other)
        {
            _family = other._family;
            _min = other._min;
            _max = other._max;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the distribution")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the distribution")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        public System.IObservable<UniformDistributionParameters> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new UniformDistributionParameters(this)));
        }
    
        public System.IObservable<UniformDistributionParameters> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new UniformDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Family = " + _family + ", ");
            stringBuilder.Append("Min = " + _min + ", ");
            stringBuilder.Append("Max = " + _max);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of parameters that can be targeted by numerical updaters.
    ///
    ///These targets define which task parameters can be dynamically modified
    ///during task execution to adapt to animal performance or experimental needs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum UpdaterTarget
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="StopDurationOffset")]
        StopDurationOffset = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="StopVelocityThreshold")]
        StopVelocityThreshold = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="RewardDelayOffset")]
        RewardDelayOffset = 2,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "video_writer_type")]
    [JsonInheritanceAttribute("FFMPEG", typeof(VideoWriterFfmpeg))]
    [JsonInheritanceAttribute("OPENCV", typeof(VideoWriterOpenCv))]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VideoWriter
    {
    
        public VideoWriter()
        {
        }
    
        protected VideoWriter(VideoWriter other)
        {
        }
    
        public System.IObservable<VideoWriter> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriter(this)));
        }
    
        public System.IObservable<VideoWriter> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriter(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VideoWriterFfmpeg : VideoWriter
    {
    
        private int _frameRate;
    
        private string _containerExtension;
    
        private string _outputArguments;
    
        private string _inputArguments;
    
        public VideoWriterFfmpeg()
        {
            _frameRate = 30;
            _containerExtension = "mp4";
            _outputArguments = "-vf \"scale=out_color_matrix=bt709:out_range=full,format=bgr24,scale=out_range=full\" -c:v h264_nvenc -pix_fmt yuv420p -color_range full -colorspace bt709 -color_trc linear -tune hq -preset p4 -rc vbr -cq 12 -b:v 0M -metadata author=\"Allen Institute for Neural Dynamics\" -maxrate 700M -bufsize 350M";
            _inputArguments = "-colorspace bt709 -color_primaries bt709 -color_range full -color_trc linear";
        }
    
        protected VideoWriterFfmpeg(VideoWriterFfmpeg other) : 
                base(other)
        {
            _frameRate = other._frameRate;
            _containerExtension = other._containerExtension;
            _outputArguments = other._outputArguments;
            _inputArguments = other._inputArguments;
        }
    
        /// <summary>
        /// Encoding frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Encoding frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Container extension
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("container_extension")]
        [System.ComponentModel.DescriptionAttribute("Container extension")]
        public string ContainerExtension
        {
            get
            {
                return _containerExtension;
            }
            set
            {
                _containerExtension = value;
            }
        }
    
        /// <summary>
        /// Output arguments
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output_arguments")]
        [System.ComponentModel.DescriptionAttribute("Output arguments")]
        public string OutputArguments
        {
            get
            {
                return _outputArguments;
            }
            set
            {
                _outputArguments = value;
            }
        }
    
        /// <summary>
        /// Input arguments
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("input_arguments")]
        [System.ComponentModel.DescriptionAttribute("Input arguments")]
        public string InputArguments
        {
            get
            {
                return _inputArguments;
            }
            set
            {
                _inputArguments = value;
            }
        }
    
        public System.IObservable<VideoWriterFfmpeg> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriterFfmpeg(this)));
        }
    
        public System.IObservable<VideoWriterFfmpeg> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriterFfmpeg(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("FrameRate = " + _frameRate + ", ");
            stringBuilder.Append("ContainerExtension = " + _containerExtension + ", ");
            stringBuilder.Append("OutputArguments = " + _outputArguments + ", ");
            stringBuilder.Append("InputArguments = " + _inputArguments);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VideoWriterOpenCv : VideoWriter
    {
    
        private int _frameRate;
    
        private string _containerExtension;
    
        private string _fourCc;
    
        public VideoWriterOpenCv()
        {
            _frameRate = 30;
            _containerExtension = "avi";
            _fourCc = "FMP4";
        }
    
        protected VideoWriterOpenCv(VideoWriterOpenCv other) : 
                base(other)
        {
            _frameRate = other._frameRate;
            _containerExtension = other._containerExtension;
            _fourCc = other._fourCc;
        }
    
        /// <summary>
        /// Encoding frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Encoding frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Container extension
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("container_extension")]
        [System.ComponentModel.DescriptionAttribute("Container extension")]
        public string ContainerExtension
        {
            get
            {
                return _containerExtension;
            }
            set
            {
                _containerExtension = value;
            }
        }
    
        /// <summary>
        /// Four character code
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("four_cc")]
        [System.ComponentModel.DescriptionAttribute("Four character code")]
        public string FourCc
        {
            get
            {
                return _fourCc;
            }
            set
            {
                _fourCc = value;
            }
        }
    
        public System.IObservable<VideoWriterOpenCv> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriterOpenCv(this)));
        }
    
        public System.IObservable<VideoWriterOpenCv> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriterOpenCv(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("FrameRate = " + _frameRate + ", ");
            stringBuilder.Append("ContainerExtension = " + _containerExtension + ", ");
            stringBuilder.Append("FourCc = " + _fourCc);
            return true;
        }
    }


    /// <summary>
    /// THIS CLASS IS NOT MEANT TO BE DIRECTLY INSTANTIATED.
    ///Represents a specific virtual site instance in the VR environment.
    ///
    ///This class defines a concrete virtual site with specific properties like position,
    ///length, and associated specifications. It is typically generated from VirtualSiteGenerator
    ///templates rather than being directly instantiated in the DSL.
    ///
    ///Note: This class is primarily used internally for runtime site generation
    ///and is not meant to be directly instantiated in task configuration DSL.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"THIS CLASS IS NOT MEANT TO BE DIRECTLY INSTANTIATED.
    Represents a specific virtual site instance in the VR environment.

    This class defines a concrete virtual site with specific properties like position,
    length, and associated specifications. It is typically generated from VirtualSiteGenerator
    templates rather than being directly instantiated in the DSL.

    Note: This class is primarily used internally for runtime site generation
    and is not meant to be directly instantiated in task configuration DSL.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VirtualSite
    {
    
        private int _id;
    
        private VirtualSiteLabels _label;
    
        private double _length;
    
        private double _startPosition;
    
        private OdorSpecification _odorSpecification;
    
        private RewardSpecification _rewardSpecification;
    
        private RenderSpecification _renderSpecification;
    
        private TreadmillSpecification _treadmillSpecification;
    
        public VirtualSite()
        {
            _id = 0;
            _label = AindVrForagingDataSchema.VirtualSiteLabels.Unspecified;
            _length = 20D;
            _startPosition = 0D;
            _renderSpecification = new RenderSpecification();
        }
    
        protected VirtualSite(VirtualSite other)
        {
            _id = other._id;
            _label = other._label;
            _length = other._length;
            _startPosition = other._startPosition;
            _odorSpecification = other._odorSpecification;
            _rewardSpecification = other._rewardSpecification;
            _renderSpecification = other._renderSpecification;
            _treadmillSpecification = other._treadmillSpecification;
        }
    
        /// <summary>
        /// Id of the virtual site
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        [System.ComponentModel.DescriptionAttribute("Id of the virtual site")]
        public int Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
    
        /// <summary>
        /// Label of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [System.ComponentModel.DescriptionAttribute("Label of the virtual site")]
        public VirtualSiteLabels Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        /// <summary>
        /// Length of the virtual site (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("length")]
        [System.ComponentModel.DescriptionAttribute("Length of the virtual site (cm)")]
        public double Length
        {
            get
            {
                return _length;
            }
            set
            {
                _length = value;
            }
        }
    
        /// <summary>
        /// Start position of the virtual site (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("start_position")]
        [System.ComponentModel.DescriptionAttribute("Start position of the virtual site (cm)")]
        public double StartPosition
        {
            get
            {
                return _startPosition;
            }
            set
            {
                _startPosition = value;
            }
        }
    
        /// <summary>
        /// The optional odor specification of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odor_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional odor specification of the virtual site")]
        public OdorSpecification OdorSpecification
        {
            get
            {
                return _odorSpecification;
            }
            set
            {
                _odorSpecification = value;
            }
        }
    
        /// <summary>
        /// The optional reward specification of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reward_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional reward specification of the virtual site")]
        public RewardSpecification RewardSpecification
        {
            get
            {
                return _rewardSpecification;
            }
            set
            {
                _rewardSpecification = value;
            }
        }
    
        /// <summary>
        /// The optional render specification of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("render_specification")]
        [System.ComponentModel.DescriptionAttribute("The optional render specification of the virtual site")]
        public RenderSpecification RenderSpecification
        {
            get
            {
                return _renderSpecification;
            }
            set
            {
                _renderSpecification = value;
            }
        }
    
        /// <summary>
        /// Treadmill specification
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("treadmill_specification")]
        [System.ComponentModel.DescriptionAttribute("Treadmill specification")]
        public TreadmillSpecification TreadmillSpecification
        {
            get
            {
                return _treadmillSpecification;
            }
            set
            {
                _treadmillSpecification = value;
            }
        }
    
        public System.IObservable<VirtualSite> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VirtualSite(this)));
        }
    
        public System.IObservable<VirtualSite> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VirtualSite(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Id = " + _id + ", ");
            stringBuilder.Append("Label = " + _label + ", ");
            stringBuilder.Append("Length = " + _length + ", ");
            stringBuilder.Append("StartPosition = " + _startPosition + ", ");
            stringBuilder.Append("OdorSpecification = " + _odorSpecification + ", ");
            stringBuilder.Append("RewardSpecification = " + _rewardSpecification + ", ");
            stringBuilder.Append("RenderSpecification = " + _renderSpecification + ", ");
            stringBuilder.Append("TreadmillSpecification = " + _treadmillSpecification);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Generates virtual site specifications with randomized properties.
    ///
    ///This class defines templates for creating virtual sites with variable properties
    ///like length and rendering specifications. It's used to generate diverse virtual
    ///environments for the foraging task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Generates virtual site specifications with randomized properties.

    This class defines templates for creating virtual sites with variable properties
    like length and rendering specifications. It's used to generate diverse virtual
    environments for the foraging task.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VirtualSiteGenerator
    {
    
        private RenderSpecification _renderSpecification;
    
        private VirtualSiteLabels _label;
    
        private Distribution _lengthDistribution;
    
        private TreadmillSpecification _treadmillSpecification;
    
        public VirtualSiteGenerator()
        {
            _renderSpecification = new RenderSpecification();
            _label = AindVrForagingDataSchema.VirtualSiteLabels.Unspecified;
            _lengthDistribution = new Distribution();
        }
    
        protected VirtualSiteGenerator(VirtualSiteGenerator other)
        {
            _renderSpecification = other._renderSpecification;
            _label = other._label;
            _lengthDistribution = other._lengthDistribution;
            _treadmillSpecification = other._treadmillSpecification;
        }
    
        /// <summary>
        /// Contrast of the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("render_specification")]
        [System.ComponentModel.DescriptionAttribute("Contrast of the environment")]
        public RenderSpecification RenderSpecification
        {
            get
            {
                return _renderSpecification;
            }
            set
            {
                _renderSpecification = value;
            }
        }
    
        /// <summary>
        /// Label of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("label")]
        [System.ComponentModel.DescriptionAttribute("Label of the virtual site")]
        public VirtualSiteLabels Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value;
            }
        }
    
        /// <summary>
        /// Distribution of the length of the virtual site
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("length_distribution")]
        [System.ComponentModel.DescriptionAttribute("Distribution of the length of the virtual site")]
        public Distribution LengthDistribution
        {
            get
            {
                return _lengthDistribution;
            }
            set
            {
                _lengthDistribution = value;
            }
        }
    
        /// <summary>
        /// Treadmill specification
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("treadmill_specification")]
        [System.ComponentModel.DescriptionAttribute("Treadmill specification")]
        public TreadmillSpecification TreadmillSpecification
        {
            get
            {
                return _treadmillSpecification;
            }
            set
            {
                _treadmillSpecification = value;
            }
        }
    
        public System.IObservable<VirtualSiteGenerator> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VirtualSiteGenerator(this)));
        }
    
        public System.IObservable<VirtualSiteGenerator> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VirtualSiteGenerator(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("RenderSpecification = " + _renderSpecification + ", ");
            stringBuilder.Append("Label = " + _label + ", ");
            stringBuilder.Append("LengthDistribution = " + _lengthDistribution + ", ");
            stringBuilder.Append("TreadmillSpecification = " + _treadmillSpecification);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Enumeration of virtual site types in the VR foraging environment.
    ///
    ///These labels categorize different regions of the virtual environment,
    ///each serving different functional roles in the foraging task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum VirtualSiteLabels
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Unspecified")]
        Unspecified = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="InterPatch")]
        InterPatch = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="PostPatch")]
        PostPatch = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="RewardSite")]
        RewardSite = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="InterSite")]
        InterSite = 4,
    }


    /// <summary>
    /// Defines a visual corridor segment in the VR environment.
    ///
    ///Visual corridors are the basic building blocks of the VR environment,
    ///defining spatial regions with specific textures, dimensions, and positions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines a visual corridor segment in the VR environment.\n\nVisual corridors are th" +
        "e basic building blocks of the VR environment,\ndefining spatial regions with spe" +
        "cific textures, dimensions, and positions.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VisualCorridor
    {
    
        private int _id;
    
        private Size _size;
    
        private double _startPosition;
    
        private double _length;
    
        private WallTextures _textures;
    
        public VisualCorridor()
        {
            _id = 0;
            _size = new Size();
            _startPosition = 0D;
            _length = 120D;
            _textures = new WallTextures();
        }
    
        protected VisualCorridor(VisualCorridor other)
        {
            _id = other._id;
            _size = other._size;
            _startPosition = other._startPosition;
            _length = other._length;
            _textures = other._textures;
        }
    
        /// <summary>
        /// Id of the visual corridor object
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        [System.ComponentModel.DescriptionAttribute("Id of the visual corridor object")]
        public int Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
    
        /// <summary>
        /// Size of the corridor (cm)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("size")]
        [System.ComponentModel.DescriptionAttribute("Size of the corridor (cm)")]
        public Size Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
    
        /// <summary>
        /// Start position of the corridor (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("start_position")]
        [System.ComponentModel.DescriptionAttribute("Start position of the corridor (cm)")]
        public double StartPosition
        {
            get
            {
                return _startPosition;
            }
            set
            {
                _startPosition = value;
            }
        }
    
        /// <summary>
        /// Length of the corridor site (cm)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("length")]
        [System.ComponentModel.DescriptionAttribute("Length of the corridor site (cm)")]
        public double Length
        {
            get
            {
                return _length;
            }
            set
            {
                _length = value;
            }
        }
    
        /// <summary>
        /// The textures of the corridor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("textures", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The textures of the corridor")]
        public WallTextures Textures
        {
            get
            {
                return _textures;
            }
            set
            {
                _textures = value;
            }
        }
    
        public System.IObservable<VisualCorridor> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VisualCorridor(this)));
        }
    
        public System.IObservable<VisualCorridor> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VisualCorridor(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Id = " + _id + ", ");
            stringBuilder.Append("Size = " + _size + ", ");
            stringBuilder.Append("StartPosition = " + _startPosition + ", ");
            stringBuilder.Append("Length = " + _length + ", ");
            stringBuilder.Append("Textures = " + _textures);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines textures for all walls of a visual corridor in the VR environment.
    ///
    ///This class specifies the visual appearance of corridor surfaces including
    ///floor, ceiling, and side walls, allowing for complex visual environments
    ///with different textures on each surface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute(@"Defines textures for all walls of a visual corridor in the VR environment.

    This class specifies the visual appearance of corridor surfaces including
    floor, ceiling, and side walls, allowing for complex visual environments
    with different textures on each surface.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class WallTextures
    {
    
        private Texture _floor;
    
        private Texture _ceiling;
    
        private Texture _left;
    
        private Texture _right;
    
        public WallTextures()
        {
            _floor = new Texture();
            _ceiling = new Texture();
            _left = new Texture();
            _right = new Texture();
        }
    
        protected WallTextures(WallTextures other)
        {
            _floor = other._floor;
            _ceiling = other._ceiling;
            _left = other._left;
            _right = other._right;
        }
    
        /// <summary>
        /// The texture of the floor
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("floor", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The texture of the floor")]
        public Texture Floor
        {
            get
            {
                return _floor;
            }
            set
            {
                _floor = value;
            }
        }
    
        /// <summary>
        /// The texture of the ceiling
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ceiling", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The texture of the ceiling")]
        public Texture Ceiling
        {
            get
            {
                return _ceiling;
            }
            set
            {
                _ceiling = value;
            }
        }
    
        /// <summary>
        /// The texture of the left
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("left", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The texture of the left")]
        public Texture Left
        {
            get
            {
                return _left;
            }
            set
            {
                _left = value;
            }
        }
    
        /// <summary>
        /// The texture of the right
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("right", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("The texture of the right")]
        public Texture Right
        {
            get
            {
                return _right;
            }
            set
            {
                _right = value;
            }
        }
    
        public System.IObservable<WallTextures> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WallTextures(this)));
        }
    
        public System.IObservable<WallTextures> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WallTextures(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Floor = " + _floor + ", ");
            stringBuilder.Append("Ceiling = " + _ceiling + ", ");
            stringBuilder.Append("Left = " + _left + ", ");
            stringBuilder.Append("Right = " + _right);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Water valve calibration class")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class WaterValveCalibration
    {
    
        private string _deviceName;
    
        private WaterValveCalibrationInput _input;
    
        private WaterValveCalibrationOutput _output;
    
        private System.DateTimeOffset? _date;
    
        private string _description;
    
        private string _notes;
    
        public WaterValveCalibration()
        {
            _deviceName = "WaterValve";
            _input = new WaterValveCalibrationInput();
            _output = new WaterValveCalibrationOutput();
            _description = "Calibration of the water valve delivery system";
        }
    
        protected WaterValveCalibration(WaterValveCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Name of the device being calibrated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Name of the device being calibrated")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input", Required=Newtonsoft.Json.Required.Always)]
        public WaterValveCalibrationInput Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public WaterValveCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<WaterValveCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibration(this)));
        }
    
        public System.IObservable<WaterValveCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("Input = " + _input + ", ");
            stringBuilder.Append("Output = " + _output + ", ");
            stringBuilder.Append("Date = " + _date + ", ");
            stringBuilder.Append("Description = " + _description + ", ");
            stringBuilder.Append("Notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class WaterValveCalibrationInput
    {
    
        private System.Collections.Generic.List<Measurement> _measurements;
    
        public WaterValveCalibrationInput()
        {
            _measurements = new System.Collections.Generic.List<Measurement>();
        }
    
        protected WaterValveCalibrationInput(WaterValveCalibrationInput other)
        {
            _measurements = other._measurements;
        }
    
        /// <summary>
        /// List of measurements
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("measurements")]
        [System.ComponentModel.DescriptionAttribute("List of measurements")]
        public System.Collections.Generic.List<Measurement> Measurements
        {
            get
            {
                return _measurements;
            }
            set
            {
                _measurements = value;
            }
        }
    
        public System.IObservable<WaterValveCalibrationInput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibrationInput(this)));
        }
    
        public System.IObservable<WaterValveCalibrationInput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibrationInput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Measurements = " + _measurements);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Output for water valve calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Output for water valve calibration class")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class WaterValveCalibrationOutput
    {
    
        private System.Collections.Generic.Dictionary<string, double> _intervalAverage;
    
        private double _slope;
    
        private double _offset;
    
        private double? _r2;
    
        private System.Collections.Generic.List<double> _validDomain;
    
        public WaterValveCalibrationOutput()
        {
        }
    
        protected WaterValveCalibrationOutput(WaterValveCalibrationOutput other)
        {
            _intervalAverage = other._intervalAverage;
            _slope = other._slope;
            _offset = other._offset;
            _r2 = other._r2;
            _validDomain = other._validDomain;
        }
    
        /// <summary>
        /// Dictionary keyed by measured valve interval and corresponding average single event volume.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("interval_average")]
        [System.ComponentModel.DescriptionAttribute("Dictionary keyed by measured valve interval and corresponding average single even" +
            "t volume.")]
        public System.Collections.Generic.Dictionary<string, double> IntervalAverage
        {
            get
            {
                return _intervalAverage;
            }
            set
            {
                _intervalAverage = value;
            }
        }
    
        /// <summary>
        /// Slope of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("slope", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Slope of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)")]
        public double Slope
        {
            get
            {
                return _slope;
            }
            set
            {
                _slope = value;
            }
        }
    
        /// <summary>
        /// Offset of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Offset of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)")]
        public double Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        /// <summary>
        /// R2 metric from the linear model.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("r2")]
        [System.ComponentModel.DescriptionAttribute("R2 metric from the linear model.")]
        public double? R2
        {
            get
            {
                return _r2;
            }
            set
            {
                _r2 = value;
            }
        }
    
        /// <summary>
        /// The optional time-intervals the calibration curve was calculated on.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("valid_domain")]
        [System.ComponentModel.DescriptionAttribute("The optional time-intervals the calibration curve was calculated on.")]
        public System.Collections.Generic.List<double> ValidDomain
        {
            get
            {
                return _validDomain;
            }
            set
            {
                _validDomain = value;
            }
        }
    
        public System.IObservable<WaterValveCalibrationOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaterValveCalibrationOutput(this)));
        }
    
        public System.IObservable<WaterValveCalibrationOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaterValveCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("IntervalAverage = " + _intervalAverage + ", ");
            stringBuilder.Append("Slope = " + _slope + ", ");
            stringBuilder.Append("Offset = " + _offset + ", ");
            stringBuilder.Append("R2 = " + _r2 + ", ");
            stringBuilder.Append("ValidDomain = " + _validDomain);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class WebCamera
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _index;
    
        private VideoWriter _videoWriter;
    
        public WebCamera()
        {
            _deviceType = "WebCamera";
            _index = 0;
        }
    
        protected WebCamera(WebCamera other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _index = other._index;
            _videoWriter = other._videoWriter;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Camera index
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("index")]
        [System.ComponentModel.DescriptionAttribute("Camera index")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        /// <summary>
        /// Video writer. If not provided, no video will be saved.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("video_writer")]
        [System.ComponentModel.DescriptionAttribute("Video writer. If not provided, no video will be saved.")]
        public VideoWriter VideoWriter
        {
            get
            {
                return _videoWriter;
            }
            set
            {
                _videoWriter = value;
            }
        }
    
        public System.IObservable<WebCamera> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WebCamera(this)));
        }
    
        public System.IObservable<WebCamera> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WebCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("Index = " + _index + ", ");
            stringBuilder.Append("VideoWriter = " + _videoWriter);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindBehaviorServicesRigVisualStimulationVector3
    {
    
        private double _x;
    
        private double _y;
    
        private double _z;
    
        public AindBehaviorServicesRigVisualStimulationVector3()
        {
            _x = 0D;
            _y = 0D;
            _z = 0D;
        }
    
        protected AindBehaviorServicesRigVisualStimulationVector3(AindBehaviorServicesRigVisualStimulationVector3 other)
        {
            _x = other._x;
            _y = other._y;
            _z = other._z;
        }
    
        /// <summary>
        /// X coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the point")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the point")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Z coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("z")]
        [System.ComponentModel.DescriptionAttribute("Z coordinate of the point")]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<AindBehaviorServicesRigVisualStimulationVector3> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindBehaviorServicesRigVisualStimulationVector3(this)));
        }
    
        public System.IObservable<AindBehaviorServicesRigVisualStimulationVector3> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindBehaviorServicesRigVisualStimulationVector3(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("X = " + _x + ", ");
            stringBuilder.Append("Y = " + _y + ", ");
            stringBuilder.Append("Z = " + _z);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Represents a 3D point or vector with x, y, and z coordinates.
    ///
    ///Used for 3D positioning and movement in the virtual reality environment,
    ///including camera positions, object locations, and 3D transformations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Represents a 3D point or vector with x, y, and z coordinates.\n\nUsed for 3D positi" +
        "oning and movement in the virtual reality environment,\nincluding camera position" +
        "s, object locations, and 3D transformations.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindBehaviorVrForagingTaskLogicVector3
    {
    
        private double _x;
    
        private double _y;
    
        private double _z;
    
        public AindBehaviorVrForagingTaskLogicVector3()
        {
            _x = 0D;
            _y = 0D;
            _z = 0D;
        }
    
        protected AindBehaviorVrForagingTaskLogicVector3(AindBehaviorVrForagingTaskLogicVector3 other)
        {
            _x = other._x;
            _y = other._y;
            _z = other._z;
        }
    
        /// <summary>
        /// X coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the point")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the point")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Z coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("z")]
        [System.ComponentModel.DescriptionAttribute("Z coordinate of the point")]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<AindBehaviorVrForagingTaskLogicVector3> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindBehaviorVrForagingTaskLogicVector3(this)));
        }
    
        public System.IObservable<AindBehaviorVrForagingTaskLogicVector3> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindBehaviorVrForagingTaskLogicVector3(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("X = " + _x + ", ");
            stringBuilder.Append("Y = " + _y + ", ");
            stringBuilder.Append("Z = " + _z);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Amount
    {
    
        public Amount()
        {
        }
    
        protected Amount(Amount other)
        {
        }
    
        public System.IObservable<Amount> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Amount(this)));
        }
    
        public System.IObservable<Amount> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Amount(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Probability
    {
    
        public Probability()
        {
        }
    
        protected Probability(Probability other)
        {
        }
    
        public System.IObservable<Probability> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Probability(this)));
        }
    
        public System.IObservable<Probability> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Probability(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Available
    {
    
        public Available()
        {
        }
    
        protected Available(Available other)
        {
        }
    
        public System.IObservable<Available> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Available(this)));
        }
    
        public System.IObservable<Available> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Available(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Rate
    {
    
        public Rate()
        {
        }
    
        protected Rate(Rate other)
        {
        }
    
        public System.IObservable<Rate> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Rate(this)));
        }
    
        public System.IObservable<Rate> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Rate(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Value
    {
    
        public Value()
        {
        }
    
        protected Value(Value other)
        {
        }
    
        public System.IObservable<Value> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Value(this)));
        }
    
        public System.IObservable<Value> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Value(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LengthDistribution
    {
    
        public LengthDistribution()
        {
        }
    
        protected LengthDistribution(LengthDistribution other)
        {
        }
    
        public System.IObservable<LengthDistribution> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LengthDistribution(this)));
        }
    
        public System.IObservable<LengthDistribution> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LengthDistribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Count
    {
    
        public Count()
        {
        }
    
        protected Count(Count other)
        {
        }
    
        public System.IObservable<Count> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Count(this)));
        }
    
        public System.IObservable<Count> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Count(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum BlockStructureSamplingMode
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Random")]
        Random = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Sequential")]
        Sequential = 1,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OlfactometerChannelConfigFlowRateCapacity
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
        _100 = 100,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1000")]
        _1000 = 1000,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum OutsideRewardFunctionRule
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnTime")]
        OnTime = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnDistance")]
        OnDistance = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnTimeAccumulated")]
        OnTimeAccumulated = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnDistanceAccumulated")]
        OnDistanceAccumulated = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum PatchRewardFunctionRule
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnReward")]
        OnReward = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnChoice")]
        OnChoice = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnTime")]
        OnTime = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnDistance")]
        OnDistance = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnChoiceAccumulated")]
        OnChoiceAccumulated = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnRewardAccumulated")]
        OnRewardAccumulated = 5,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnTimeAccumulated")]
        OnTimeAccumulated = 6,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnDistanceAccumulated")]
        OnDistanceAccumulated = 7,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum PersistentRewardFunctionRule
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnReward")]
        OnReward = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnChoice")]
        OnChoice = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnTime")]
        OnTime = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnDistance")]
        OnDistance = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnChoiceAccumulated")]
        OnChoiceAccumulated = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnRewardAccumulated")]
        OnRewardAccumulated = 5,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnTimeAccumulated")]
        OnTimeAccumulated = 6,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnDistanceAccumulated")]
        OnDistanceAccumulated = 7,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OnPatchEntry")]
        OnPatchEntry = 8,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class TruncationParameters2
    {
    
        public TruncationParameters2()
        {
        }
    
        protected TruncationParameters2(TruncationParameters2 other)
        {
        }
    
        public System.IObservable<TruncationParameters2> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TruncationParameters2(this)));
        }
    
        public System.IObservable<TruncationParameters2> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TruncationParameters2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ScalingParameters2
    {
    
        public ScalingParameters2()
        {
        }
    
        protected ScalingParameters2(ScalingParameters2 other)
        {
        }
    
        public System.IObservable<ScalingParameters2> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalingParameters2(this)));
        }
    
        public System.IObservable<ScalingParameters2> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalingParameters2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SpinnakerCameraColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TruncationParametersTruncationMode
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="exclude")]
        Exclude = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="clamp")]
        Clamp = 1,
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; private set; }

        public System.Type Type { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockEndConditionDuration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockEndConditionDistance>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockEndConditionChoice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockEndConditionReward>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockEndConditionPatchCount>))]
    public partial class MatchBlockEndCondition : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(BlockEndCondition);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchBlockEndCondition),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<BlockEndCondition> source)
            where TResult : BlockEndCondition
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<BlockEndCondition>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Scalar>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PdfDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    public partial class MatchDistribution : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Distribution);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchDistribution),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Distribution> source)
            where TResult : Distribution
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Distribution>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchTerminatorOnRejection>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchTerminatorOnChoice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchTerminatorOnReward>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchTerminatorOnTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchTerminatorOnDistance>))]
    public partial class MatchPatchTerminator : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(PatchTerminator);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchPatchTerminator),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<PatchTerminator> source)
            where TResult : PatchTerminator
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<PatchTerminator>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ClampedRateFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ClampedMultiplicativeRateFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SetValueFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LookupTableFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CtcmFunction>))]
    public partial class MatchPatchUpdateFunction : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(PatchUpdateFunction);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchPatchUpdateFunction),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<PatchUpdateFunction> source)
            where TResult : PatchUpdateFunction
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<PatchUpdateFunction>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchRewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OnThisPatchEntryRewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OutsideRewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PersistentRewardFunction>))]
    public partial class MatchRewardFunction : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(RewardFunction);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchRewardFunction),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<RewardFunction> source)
            where TResult : RewardFunction
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<RewardFunction>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterFfmpeg>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterOpenCv>))]
    public partial class MatchVideoWriter : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(VideoWriter);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchVideoWriter),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<VideoWriter> source)
            where TResult : VideoWriter
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<VideoWriter>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchAmount : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Amount);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchAmount),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Amount> source)
            where TResult : Amount
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Amount>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchProbability : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Probability);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchProbability),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Probability> source)
            where TResult : Probability
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Probability>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchAvailable : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Available);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchAvailable),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Available> source)
            where TResult : Available
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Available>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchRate : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Rate);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchRate),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Rate> source)
            where TResult : Rate
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Rate>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchValue : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Value);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchValue),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Value> source)
            where TResult : Value
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Value>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchLengthDistribution : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(LengthDistribution);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchLengthDistribution),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<LengthDistribution> source)
            where TResult : LengthDistribution
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<LengthDistribution>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    public partial class MatchCount : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Count);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchCount),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Count> source)
            where TResult : Count
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Count>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [Bonsai.CombinatorAttribute()]
    public partial class SerializeToJson
    {
    
        public Newtonsoft.Json.Formatting Formatting { get; set; }

        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            var formatting = Formatting;
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value, formatting));
        }

        public System.IObservable<string> Process(System.IObservable<AindBehaviorSessionModel> source)
        {
            return Process<AindBehaviorSessionModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorAdditionalSettings> source)
        {
            return Process<AindManipulatorAdditionalSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorCalibration> source)
        {
            return Process<AindManipulatorCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorCalibrationInput> source)
        {
            return Process<AindManipulatorCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorCalibrationOutput> source)
        {
            return Process<AindManipulatorCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindManipulatorDevice> source)
        {
            return Process<AindManipulatorDevice>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingRig> source)
        {
            return Process<AindVrForagingRig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingTaskLogic> source)
        {
            return Process<AindVrForagingTaskLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindVrForagingTaskParameters> source)
        {
            return Process<AindVrForagingTaskParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AudioControl> source)
        {
            return Process<AudioControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AxisConfiguration> source)
        {
            return Process<AxisConfiguration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BaseModel> source)
        {
            return Process<BaseModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistribution> source)
        {
            return Process<BetaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistributionParameters> source)
        {
            return Process<BetaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistribution> source)
        {
            return Process<BinomialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistributionParameters> source)
        {
            return Process<BinomialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Block> source)
        {
            return Process<Block>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockEndCondition> source)
        {
            return Process<BlockEndCondition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockEndConditionChoice> source)
        {
            return Process<BlockEndConditionChoice>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockEndConditionDistance> source)
        {
            return Process<BlockEndConditionDistance>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockEndConditionDuration> source)
        {
            return Process<BlockEndConditionDuration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockEndConditionPatchCount> source)
        {
            return Process<BlockEndConditionPatchCount>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockEndConditionReward> source)
        {
            return Process<BlockEndConditionReward>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockStructure> source)
        {
            return Process<BlockStructure>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraControllerSpinnakerCamera> source)
        {
            return Process<CameraControllerSpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraControllerWebCamera> source)
        {
            return Process<CameraControllerWebCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ClampedMultiplicativeRateFunction> source)
        {
            return Process<ClampedMultiplicativeRateFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ClampedRateFunction> source)
        {
            return Process<ClampedRateFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ConnectedClockOutput> source)
        {
            return Process<ConnectedClockOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CtcmFunction> source)
        {
            return Process<CtcmFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DisplayCalibration> source)
        {
            return Process<DisplayCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DisplayExtrinsics> source)
        {
            return Process<DisplayExtrinsics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DisplayIntrinsics> source)
        {
            return Process<DisplayIntrinsics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DisplaysCalibration> source)
        {
            return Process<DisplaysCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Distribution> source)
        {
            return Process<Distribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EnvironmentStatistics> source)
        {
            return Process<EnvironmentStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistribution> source)
        {
            return Process<ExponentialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistributionParameters> source)
        {
            return Process<ExponentialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistribution> source)
        {
            return Process<GammaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistributionParameters> source)
        {
            return Process<GammaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpAnalogInput> source)
        {
            return Process<HarpAnalogInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBehavior> source)
        {
            return Process<HarpBehavior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpEnvironmentSensor> source)
        {
            return Process<HarpEnvironmentSensor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpLicketySplit> source)
        {
            return Process<HarpLicketySplit>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpSniffDetector> source)
        {
            return Process<HarpSniffDetector>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpWhiteRabbit> source)
        {
            return Process<HarpWhiteRabbit>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistribution> source)
        {
            return Process<LogNormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistributionParameters> source)
        {
            return Process<LogNormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LookupTableFunction> source)
        {
            return Process<LookupTableFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ManipulatorPosition> source)
        {
            return Process<ManipulatorPosition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Measurement> source)
        {
            return Process<Measurement>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MovableSpoutControl> source)
        {
            return Process<MovableSpoutControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistribution> source)
        {
            return Process<NormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistributionParameters> source)
        {
            return Process<NormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdater> source)
        {
            return Process<NumericalUpdater>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdaterParameters> source)
        {
            return Process<NumericalUpdaterParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorControl> source)
        {
            return Process<OdorControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OdorSpecification> source)
        {
            return Process<OdorSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Olfactometer> source)
        {
            return Process<Olfactometer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibration> source)
        {
            return Process<OlfactometerCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibrationInput> source)
        {
            return Process<OlfactometerCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibrationOutput> source)
        {
            return Process<OlfactometerCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannelConfig> source)
        {
            return Process<OlfactometerChannelConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OnThisPatchEntryRewardFunction> source)
        {
            return Process<OnThisPatchEntryRewardFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperantLogic> source)
        {
            return Process<OperantLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OperationControl> source)
        {
            return Process<OperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OutsideRewardFunction> source)
        {
            return Process<OutsideRewardFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Patch> source)
        {
            return Process<Patch>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchRewardFunction> source)
        {
            return Process<PatchRewardFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchTerminator> source)
        {
            return Process<PatchTerminator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchTerminatorOnChoice> source)
        {
            return Process<PatchTerminatorOnChoice>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchTerminatorOnDistance> source)
        {
            return Process<PatchTerminatorOnDistance>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchTerminatorOnRejection> source)
        {
            return Process<PatchTerminatorOnRejection>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchTerminatorOnReward> source)
        {
            return Process<PatchTerminatorOnReward>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchTerminatorOnTime> source)
        {
            return Process<PatchTerminatorOnTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchUpdateFunction> source)
        {
            return Process<PatchUpdateFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PatchVirtualSitesGenerator> source)
        {
            return Process<PatchVirtualSitesGenerator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PdfDistribution> source)
        {
            return Process<PdfDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PdfDistributionParameters> source)
        {
            return Process<PdfDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PersistentRewardFunction> source)
        {
            return Process<PersistentRewardFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistribution> source)
        {
            return Process<PoissonDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistributionParameters> source)
        {
            return Process<PoissonDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PositionControl> source)
        {
            return Process<PositionControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rect> source)
        {
            return Process<Rect>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RenderSpecification> source)
        {
            return Process<RenderSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardFunction> source)
        {
            return Process<RewardFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardSpecification> source)
        {
            return Process<RewardSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RigCalibration> source)
        {
            return Process<RigCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Scalar> source)
        {
            return Process<Scalar>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalarDistributionParameter> source)
        {
            return Process<ScalarDistributionParameter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters> source)
        {
            return Process<ScalingParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Screen> source)
        {
            return Process<Screen>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SetValueFunction> source)
        {
            return Process<SetValueFunction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Size> source)
        {
            return Process<Size>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Texture> source)
        {
            return Process<Texture>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Treadmill> source)
        {
            return Process<Treadmill>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TreadmillCalibration> source)
        {
            return Process<TreadmillCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TreadmillCalibrationInput> source)
        {
            return Process<TreadmillCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TreadmillCalibrationOutput> source)
        {
            return Process<TreadmillCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TreadmillSpecification> source)
        {
            return Process<TreadmillSpecification>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters> source)
        {
            return Process<TruncationParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistribution> source)
        {
            return Process<UniformDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistributionParameters> source)
        {
            return Process<UniformDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriter> source)
        {
            return Process<VideoWriter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriterFfmpeg> source)
        {
            return Process<VideoWriterFfmpeg>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriterOpenCv> source)
        {
            return Process<VideoWriterOpenCv>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSite> source)
        {
            return Process<VirtualSite>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VirtualSiteGenerator> source)
        {
            return Process<VirtualSiteGenerator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VisualCorridor> source)
        {
            return Process<VisualCorridor>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WallTextures> source)
        {
            return Process<WallTextures>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibration> source)
        {
            return Process<WaterValveCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationInput> source)
        {
            return Process<WaterValveCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationOutput> source)
        {
            return Process<WaterValveCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WebCamera> source)
        {
            return Process<WebCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindBehaviorServicesRigVisualStimulationVector3> source)
        {
            return Process<AindBehaviorServicesRigVisualStimulationVector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindBehaviorVrForagingTaskLogicVector3> source)
        {
            return Process<AindBehaviorVrForagingTaskLogicVector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Amount> source)
        {
            return Process<Amount>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Probability> source)
        {
            return Process<Probability>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Available> source)
        {
            return Process<Available>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rate> source)
        {
            return Process<Rate>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Value> source)
        {
            return Process<Value>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LengthDistribution> source)
        {
            return Process<LengthDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Count> source)
        {
            return Process<Count>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters2> source)
        {
            return Process<TruncationParameters2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters2> source)
        {
            return Process<ScalingParameters2>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindBehaviorSessionModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorAdditionalSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindManipulatorDevice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingRig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingTaskLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindVrForagingTaskParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AudioControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AxisConfiguration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Block>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockEndCondition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockEndConditionChoice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockEndConditionDistance>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockEndConditionDuration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockEndConditionPatchCount>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockEndConditionReward>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockStructure>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraControllerSpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraControllerWebCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ClampedMultiplicativeRateFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ClampedRateFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ConnectedClockOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CtcmFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DisplayCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DisplayExtrinsics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DisplayIntrinsics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DisplaysCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Distribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EnvironmentStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpAnalogInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpEnvironmentSensor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpLicketySplit>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpSniffDetector>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpWhiteRabbit>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LookupTableFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ManipulatorPosition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Measurement>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MovableSpoutControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdater>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdaterParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OdorSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Olfactometer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannelConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OnThisPatchEntryRewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperantLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OutsideRewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Patch>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchRewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchTerminator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchTerminatorOnChoice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchTerminatorOnDistance>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchTerminatorOnRejection>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchTerminatorOnReward>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchTerminatorOnTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchUpdateFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PatchVirtualSitesGenerator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PdfDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PdfDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PersistentRewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PositionControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rect>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RenderSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RigCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Scalar>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalarDistributionParameter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Screen>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SetValueFunction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Size>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Texture>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Treadmill>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TreadmillCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TreadmillCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TreadmillCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TreadmillSpecification>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterFfmpeg>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterOpenCv>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSite>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VirtualSiteGenerator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VisualCorridor>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WallTextures>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WebCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindBehaviorServicesRigVisualStimulationVector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindBehaviorVrForagingTaskLogicVector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Amount>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Probability>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Available>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rate>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Value>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LengthDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Count>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters2>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindBehaviorSessionModel>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}