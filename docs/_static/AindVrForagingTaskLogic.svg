<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 11.0.0 (20240428.1522)
 -->
<!-- Title: Entity Relationship Diagram created by erdantic Pages: 1 -->
<svg width="4559pt" height="1885pt"
 viewBox="0.00 0.00 4559.00 1884.75" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1880.75)">
<title>Entity Relationship Diagram created by erdantic</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-1880.75 4555,-1880.75 4555,4 -4,4"/>
<text text-anchor="middle" x="2275.5" y="-6.7" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="9.00" fill="#a8a8a8">Created by erdantic v1.0.3 &lt;https://github.com/drivendataorg/erdantic&gt;</text>
<!-- aind_behavior_services.task_logic.distributions.BetaDistribution -->
<g id="node1" class="node">
<title>aind_behavior_services.task_logic.distributions.BetaDistribution</title>
<g id="a_node1"><a xlink:title="aind_behavior_services.task_logic.distributions.BetaDistribution&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3744,-858.25 3744,-880.25 4073,-880.25 4073,-858.25 3744,-858.25"/>
<text text-anchor="start" x="3857.88" y="-864.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">BetaDistribution</text>
<polygon fill="none" stroke="black" points="3744,-837.25 3744,-858.25 3881,-858.25 3881,-837.25 3744,-837.25"/>
<text text-anchor="start" x="3795.62" y="-841.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="3881,-837.25 3881,-858.25 4073,-858.25 4073,-837.25 3881,-837.25"/>
<text text-anchor="start" x="3884" y="-841.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.BETA]</text>
<polygon fill="none" stroke="black" points="3744,-816.25 3744,-837.25 3881,-837.25 3881,-816.25 3744,-816.25"/>
<text text-anchor="start" x="3746.88" y="-820.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">distribution_parameters</text>
<polygon fill="none" stroke="black" points="3881,-816.25 3881,-837.25 4073,-837.25 4073,-816.25 3881,-816.25"/>
<text text-anchor="start" x="3901.25" y="-820.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">BetaDistributionParameters</text>
<polygon fill="none" stroke="black" points="3744,-795.25 3744,-816.25 3881,-816.25 3881,-795.25 3744,-795.25"/>
<text text-anchor="start" x="3750.62" y="-799.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">truncation_parameters</text>
<polygon fill="none" stroke="black" points="3881,-795.25 3881,-816.25 4073,-816.25 4073,-795.25 3881,-795.25"/>
<text text-anchor="start" x="3887.38" y="-799.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[TruncationParameters]</text>
<polygon fill="none" stroke="black" points="3744,-774.25 3744,-795.25 3881,-795.25 3881,-774.25 3744,-774.25"/>
<text text-anchor="start" x="3759.25" y="-778.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scaling_parameters</text>
<polygon fill="none" stroke="black" points="3881,-774.25 3881,-795.25 4073,-795.25 4073,-774.25 3881,-774.25"/>
<text text-anchor="start" x="3897.5" y="-778.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[ScalingParameters]</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.BetaDistributionParameters -->
<g id="node2" class="node">
<title>aind_behavior_services.task_logic.distributions.BetaDistributionParameters</title>
<g id="a_node2"><a xlink:title="aind_behavior_services.task_logic.distributions.BetaDistributionParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4265.5,-784.75 4265.5,-806.75 4496.5,-806.75 4496.5,-784.75 4265.5,-784.75"/>
<text text-anchor="start" x="4294.75" y="-791.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">BetaDistributionParameters</text>
<polygon fill="none" stroke="black" points="4265.5,-763.75 4265.5,-784.75 4304.5,-784.75 4304.5,-763.75 4265.5,-763.75"/>
<text text-anchor="start" x="4268.12" y="-768.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="4304.5,-763.75 4304.5,-784.75 4496.5,-784.75 4496.5,-763.75 4304.5,-763.75"/>
<text text-anchor="start" x="4307.5" y="-768.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.BETA]</text>
<polygon fill="none" stroke="black" points="4265.5,-742.75 4265.5,-763.75 4304.5,-763.75 4304.5,-742.75 4265.5,-742.75"/>
<text text-anchor="start" x="4270.38" y="-747.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">alpha</text>
<polygon fill="none" stroke="black" points="4304.5,-742.75 4304.5,-763.75 4496.5,-763.75 4496.5,-742.75 4304.5,-742.75"/>
<text text-anchor="start" x="4388.12" y="-747.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4265.5,-721.75 4265.5,-742.75 4304.5,-742.75 4304.5,-721.75 4265.5,-721.75"/>
<text text-anchor="start" x="4273.38" y="-726.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">beta</text>
<polygon fill="none" stroke="black" points="4304.5,-721.75 4304.5,-742.75 4496.5,-742.75 4496.5,-721.75 4304.5,-721.75"/>
<text text-anchor="start" x="4388.12" y="-726.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.BetaDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.BetaDistributionParameters -->
<g id="edge1" class="edge">
<title>aind_behavior_services.task_logic.distributions.BetaDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.BetaDistributionParameters:w</title>
<path fill="none" stroke="black" d="M4083.75,-826.61C4156.51,-824.52 4179.26,-799.23 4249.74,-796.07"/>
<polyline fill="none" stroke="black" points="4074,-826.75 4079,-826.68"/>
<polyline fill="none" stroke="black" points="4079,-826.68 4084,-826.61"/>
<polyline fill="none" stroke="black" points="4264.5,-795.75 4259.5,-795.86"/>
<polygon fill="black" stroke="black" points="4258.39,-790.88 4258.61,-800.88 4256.61,-800.92 4256.39,-790.93 4258.39,-790.88"/>
<polyline fill="none" stroke="black" points="4259.5,-795.86 4254.5,-795.97"/>
<polygon fill="black" stroke="black" points="4253.39,-790.99 4253.61,-800.99 4251.61,-801.03 4251.39,-791.03 4253.39,-790.99"/>
<polyline fill="none" stroke="black" points="4254.5,-795.97 4249.5,-796.08"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.ScalingParameters -->
<g id="node3" class="node">
<title>aind_behavior_services.task_logic.distributions.ScalingParameters</title>
<g id="a_node3"><a xlink:title="aind_behavior_services.task_logic.distributions.ScalingParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4320,-1148.25 4320,-1170.25 4442,-1170.25 4442,-1148.25 4320,-1148.25"/>
<text text-anchor="start" x="4322.88" y="-1154.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ScalingParameters</text>
<polygon fill="none" stroke="black" points="4320,-1127.25 4320,-1148.25 4385,-1148.25 4385,-1127.25 4320,-1127.25"/>
<text text-anchor="start" x="4338.62" y="-1131.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scale</text>
<polygon fill="none" stroke="black" points="4385,-1127.25 4385,-1148.25 4442,-1148.25 4442,-1127.25 4385,-1127.25"/>
<text text-anchor="start" x="4401.12" y="-1131.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4320,-1106.25 4320,-1127.25 4385,-1127.25 4385,-1106.25 4320,-1106.25"/>
<text text-anchor="start" x="4336.38" y="-1110.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">offset</text>
<polygon fill="none" stroke="black" points="4385,-1106.25 4385,-1127.25 4442,-1127.25 4442,-1106.25 4385,-1106.25"/>
<text text-anchor="start" x="4401.12" y="-1110.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.BetaDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters -->
<g id="edge2" class="edge">
<title>aind_behavior_services.task_logic.distributions.BetaDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters:w</title>
<path fill="none" stroke="black" d="M4083.99,-785.06C4217.09,-793.66 4117.16,-978.33 4211,-1088.25 4243.85,-1126.73 4258.06,-1152.51 4300.23,-1158.11"/>
<polyline fill="none" stroke="black" points="4074,-784.75 4079,-784.91"/>
<polyline fill="none" stroke="black" points="4079,-784.91 4084,-785.06"/>
<polyline fill="none" stroke="black" points="4319,-1159.25 4314.01,-1158.95"/>
<polygon fill="black" stroke="black" points="4313.32,-1153.89 4312.71,-1163.88 4310.71,-1163.75 4311.32,-1153.77 4313.32,-1153.89"/>
<polyline fill="none" stroke="black" points="4314.01,-1158.95 4309.02,-1158.64"/>
<ellipse fill="none" stroke="black" cx="4304.53" cy="-1158.37" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.TruncationParameters -->
<g id="node4" class="node">
<title>aind_behavior_services.task_logic.distributions.TruncationParameters</title>
<g id="a_node4"><a xlink:title="aind_behavior_services.task_logic.distributions.TruncationParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4308.5,-1269.75 4308.5,-1291.75 4453.5,-1291.75 4453.5,-1269.75 4308.5,-1269.75"/>
<text text-anchor="start" x="4311.25" y="-1276.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">TruncationParameters</text>
<polygon fill="none" stroke="black" points="4308.5,-1248.75 4308.5,-1269.75 4402.5,-1269.75 4402.5,-1248.75 4308.5,-1248.75"/>
<text text-anchor="start" x="4321.38" y="-1253.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">is_truncated</text>
<polygon fill="none" stroke="black" points="4402.5,-1248.75 4402.5,-1269.75 4453.5,-1269.75 4453.5,-1248.75 4402.5,-1248.75"/>
<text text-anchor="start" x="4415.25" y="-1253.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
<polygon fill="none" stroke="black" points="4308.5,-1227.75 4308.5,-1248.75 4402.5,-1248.75 4402.5,-1227.75 4308.5,-1227.75"/>
<text text-anchor="start" x="4345.38" y="-1232.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">min</text>
<polygon fill="none" stroke="black" points="4402.5,-1227.75 4402.5,-1248.75 4453.5,-1248.75 4453.5,-1227.75 4402.5,-1227.75"/>
<text text-anchor="start" x="4415.62" y="-1232.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4308.5,-1206.75 4308.5,-1227.75 4402.5,-1227.75 4402.5,-1206.75 4308.5,-1206.75"/>
<text text-anchor="start" x="4343.88" y="-1211.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">max</text>
<polygon fill="none" stroke="black" points="4402.5,-1206.75 4402.5,-1227.75 4453.5,-1227.75 4453.5,-1206.75 4402.5,-1206.75"/>
<text text-anchor="start" x="4415.62" y="-1211.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.BetaDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters -->
<g id="edge3" class="edge">
<title>aind_behavior_services.task_logic.distributions.BetaDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters:w</title>
<path fill="none" stroke="black" d="M4083.71,-806.03C4296.32,-818.73 4088.3,-1254.52 4288.58,-1279.62"/>
<polyline fill="none" stroke="black" points="4074,-805.75 4079,-805.9"/>
<polyline fill="none" stroke="black" points="4079,-805.9 4084,-806.04"/>
<polyline fill="none" stroke="black" points="4307.5,-1280.75 4302.51,-1280.45"/>
<polygon fill="black" stroke="black" points="4301.81,-1275.4 4301.21,-1285.38 4299.22,-1285.27 4299.81,-1275.28 4301.81,-1275.4"/>
<polyline fill="none" stroke="black" points="4302.51,-1280.45 4297.52,-1280.16"/>
<ellipse fill="none" stroke="black" cx="4293.03" cy="-1279.89" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.BinomialDistribution -->
<g id="node5" class="node">
<title>aind_behavior_services.task_logic.distributions.BinomialDistribution</title>
<g id="a_node5"><a xlink:title="aind_behavior_services.task_logic.distributions.BinomialDistribution&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3728,-1000.25 3728,-1022.25 4089,-1022.25 4089,-1000.25 3728,-1000.25"/>
<text text-anchor="start" x="3844.75" y="-1006.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">BinomialDistribution</text>
<polygon fill="none" stroke="black" points="3728,-979.25 3728,-1000.25 3865,-1000.25 3865,-979.25 3728,-979.25"/>
<text text-anchor="start" x="3779.62" y="-983.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="3865,-979.25 3865,-1000.25 4089,-1000.25 4089,-979.25 3865,-979.25"/>
<text text-anchor="start" x="3867.88" y="-983.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.BINOMIAL]</text>
<polygon fill="none" stroke="black" points="3728,-958.25 3728,-979.25 3865,-979.25 3865,-958.25 3728,-958.25"/>
<text text-anchor="start" x="3730.88" y="-962.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">distribution_parameters</text>
<polygon fill="none" stroke="black" points="3865,-958.25 3865,-979.25 4089,-979.25 4089,-958.25 3865,-958.25"/>
<text text-anchor="start" x="3889.25" y="-962.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">BinomialDistributionParameters</text>
<polygon fill="none" stroke="black" points="3728,-937.25 3728,-958.25 3865,-958.25 3865,-937.25 3728,-937.25"/>
<text text-anchor="start" x="3734.62" y="-941.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">truncation_parameters</text>
<polygon fill="none" stroke="black" points="3865,-937.25 3865,-958.25 4089,-958.25 4089,-937.25 3865,-937.25"/>
<text text-anchor="start" x="3887.38" y="-941.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[TruncationParameters]</text>
<polygon fill="none" stroke="black" points="3728,-916.25 3728,-937.25 3865,-937.25 3865,-916.25 3728,-916.25"/>
<text text-anchor="start" x="3743.25" y="-920.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scaling_parameters</text>
<polygon fill="none" stroke="black" points="3865,-916.25 3865,-937.25 4089,-937.25 4089,-916.25 3865,-916.25"/>
<text text-anchor="start" x="3897.5" y="-920.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[ScalingParameters]</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.BinomialDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters -->
<g id="edge5" class="edge">
<title>aind_behavior_services.task_logic.distributions.BinomialDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters:w</title>
<path fill="none" stroke="black" d="M4099.96,-927.2C4177.18,-934.51 4148.21,-1029.21 4211,-1088.25 4247.78,-1122.84 4258.96,-1151.47 4300.13,-1157.9"/>
<polyline fill="none" stroke="black" points="4090,-926.75 4094.99,-926.98"/>
<polyline fill="none" stroke="black" points="4094.99,-926.98 4099.99,-927.2"/>
<polyline fill="none" stroke="black" points="4319,-1159.25 4314.01,-1158.89"/>
<polygon fill="black" stroke="black" points="4313.37,-1153.83 4312.66,-1163.81 4310.66,-1163.67 4311.38,-1153.69 4313.37,-1153.83"/>
<polyline fill="none" stroke="black" points="4314.01,-1158.89 4309.03,-1158.54"/>
<ellipse fill="none" stroke="black" cx="4304.54" cy="-1158.22" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.BinomialDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters -->
<g id="edge6" class="edge">
<title>aind_behavior_services.task_logic.distributions.BinomialDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters:w</title>
<path fill="none" stroke="black" d="M4099.52,-948.09C4255.65,-959.54 4143.32,-1256.77 4288.96,-1279.39"/>
<polyline fill="none" stroke="black" points="4090,-947.75 4095,-947.93"/>
<polyline fill="none" stroke="black" points="4095,-947.93 4099.99,-948.11"/>
<polyline fill="none" stroke="black" points="4307.5,-1280.75 4302.51,-1280.38"/>
<polygon fill="black" stroke="black" points="4301.88,-1275.32 4301.15,-1285.3 4299.16,-1285.15 4299.89,-1275.18 4301.88,-1275.32"/>
<polyline fill="none" stroke="black" points="4302.51,-1280.38 4297.53,-1280.02"/>
<ellipse fill="none" stroke="black" cx="4293.04" cy="-1279.69" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.BinomialDistributionParameters -->
<g id="node6" class="node">
<title>aind_behavior_services.task_logic.distributions.BinomialDistributionParameters</title>
<g id="a_node6"><a xlink:title="aind_behavior_services.task_logic.distributions.BinomialDistributionParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4249.5,-905.75 4249.5,-927.75 4512.5,-927.75 4512.5,-905.75 4249.5,-905.75"/>
<text text-anchor="start" x="4281.62" y="-912.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">BinomialDistributionParameters</text>
<polygon fill="none" stroke="black" points="4249.5,-884.75 4249.5,-905.75 4288.5,-905.75 4288.5,-884.75 4249.5,-884.75"/>
<text text-anchor="start" x="4252.12" y="-889.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="4288.5,-884.75 4288.5,-905.75 4512.5,-905.75 4512.5,-884.75 4288.5,-884.75"/>
<text text-anchor="start" x="4291.38" y="-889.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.BINOMIAL]</text>
<polygon fill="none" stroke="black" points="4249.5,-863.75 4249.5,-884.75 4288.5,-884.75 4288.5,-863.75 4249.5,-863.75"/>
<text text-anchor="start" x="4265.62" y="-868.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">n</text>
<polygon fill="none" stroke="black" points="4288.5,-863.75 4288.5,-884.75 4512.5,-884.75 4512.5,-863.75 4288.5,-863.75"/>
<text text-anchor="start" x="4393.75" y="-868.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="4249.5,-842.75 4249.5,-863.75 4288.5,-863.75 4288.5,-842.75 4249.5,-842.75"/>
<text text-anchor="start" x="4265.25" y="-847.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">p</text>
<polygon fill="none" stroke="black" points="4288.5,-842.75 4288.5,-863.75 4512.5,-863.75 4512.5,-842.75 4288.5,-842.75"/>
<text text-anchor="start" x="4388.12" y="-847.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.BinomialDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.BinomialDistributionParameters -->
<g id="edge4" class="edge">
<title>aind_behavior_services.task_logic.distributions.BinomialDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.BinomialDistributionParameters:w</title>
<path fill="none" stroke="black" d="M4099.62,-968.44C4160.32,-964.5 4175.54,-923.55 4233.65,-917.5"/>
<polyline fill="none" stroke="black" points="4090,-968.75 4095,-968.59"/>
<polyline fill="none" stroke="black" points="4095,-968.59 4099.99,-968.43"/>
<polyline fill="none" stroke="black" points="4248.5,-916.75 4243.51,-917"/>
<polygon fill="black" stroke="black" points="4242.26,-912.06 4242.76,-922.05 4240.76,-922.15 4240.26,-912.16 4242.26,-912.06"/>
<polyline fill="none" stroke="black" points="4243.51,-917 4238.51,-917.25"/>
<polygon fill="black" stroke="black" points="4237.26,-912.31 4237.77,-922.3 4235.77,-922.4 4235.27,-912.41 4237.26,-912.31"/>
<polyline fill="none" stroke="black" points="4238.51,-917.25 4233.52,-917.5"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.Distribution -->
<g id="node7" class="node">
<title>aind_behavior_services.task_logic.distributions.Distribution</title>
<g id="a_node7"><a xlink:title="aind_behavior_services.task_logic.distributions.Distribution&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/#rootmodel&#45;and&#45;custom&#45;root&#45;types&#10;&#10;A Pydantic `BaseModel` for the root object of the model.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;root: The root object of the model.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a RootModel.&#10; &#160;&#160;&#160;__pydantic_private__: Private fields in the model.&#10; &#160;&#160;&#160;__pydantic_extra__: Extra fields in the model.&#10;">
<polygon fill="none" stroke="black" points="2533,-1042.75 2533,-1064.75 3606,-1064.75 3606,-1042.75 2533,-1042.75"/>
<text text-anchor="start" x="3033.12" y="-1049.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Distribution</text>
<polygon fill="none" stroke="black" points="2533,-1021.75 2533,-1042.75 2562,-1042.75 2562,-1021.75 2533,-1021.75"/>
<text text-anchor="start" x="2535.88" y="-1026.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">root</text>
<polygon fill="none" stroke="black" points="2562,-1021.75 2562,-1042.75 3606,-1042.75 3606,-1021.75 2562,-1021.75"/>
<text text-anchor="start" x="2565" y="-1026.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Union[Scalar, NormalDistribution, LogNormalDistribution, ExponentialDistribution, UniformDistribution, PoissonDistribution, BinomialDistribution, BetaDistribution, GammaDistribution]</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.Distribution&#45;&gt;aind_behavior_services.task_logic.distributions.BetaDistribution -->
<g id="edge7" class="edge">
<title>aind_behavior_services.task_logic.distributions.Distribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.BetaDistribution:w</title>
<path fill="none" stroke="black" d="M3615.94,-1031.59C3692.21,-1021.03 3656.73,-886.48 3728.33,-870.75"/>
<polyline fill="none" stroke="black" points="3606,-1032.25 3610.99,-1031.92"/>
<polyline fill="none" stroke="black" points="3610.99,-1031.92 3615.98,-1031.59"/>
<polyline fill="none" stroke="black" points="3743,-869.25 3738.03,-869.76"/>
<polygon fill="black" stroke="black" points="3736.52,-864.89 3737.54,-874.83 3735.55,-875.04 3734.53,-865.09 3736.52,-864.89"/>
<polyline fill="none" stroke="black" points="3738.03,-869.76 3733.05,-870.27"/>
<polygon fill="black" stroke="black" points="3731.55,-865.39 3732.56,-875.34 3730.58,-875.55 3729.56,-865.6 3731.55,-865.39"/>
<polyline fill="none" stroke="black" points="3733.05,-870.27 3728.08,-870.77"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.Distribution&#45;&gt;aind_behavior_services.task_logic.distributions.BinomialDistribution -->
<g id="edge8" class="edge">
<title>aind_behavior_services.task_logic.distributions.Distribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.BinomialDistribution:w</title>
<path fill="none" stroke="black" d="M3615.75,-1032.01C3657.42,-1029.95 3672.66,-1014.9 3712.24,-1011.8"/>
<polyline fill="none" stroke="black" points="3606,-1032.25 3611,-1032.13"/>
<polyline fill="none" stroke="black" points="3611,-1032.13 3616,-1032.01"/>
<polyline fill="none" stroke="black" points="3727,-1011.25 3722,-1011.44"/>
<polygon fill="black" stroke="black" points="3720.82,-1006.48 3721.19,-1016.47 3719.19,-1016.55 3718.82,-1006.55 3720.82,-1006.48"/>
<polyline fill="none" stroke="black" points="3722,-1011.44 3717.01,-1011.63"/>
<polygon fill="black" stroke="black" points="3715.82,-1006.67 3716.2,-1016.66 3714.2,-1016.73 3713.82,-1006.74 3715.82,-1006.67"/>
<polyline fill="none" stroke="black" points="3717.01,-1011.63 3712.01,-1011.81"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.ExponentialDistribution -->
<g id="node8" class="node">
<title>aind_behavior_services.task_logic.distributions.ExponentialDistribution</title>
<g id="a_node8"><a xlink:title="aind_behavior_services.task_logic.distributions.ExponentialDistribution&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3714,-716.25 3714,-738.25 4103,-738.25 4103,-716.25 3714,-716.25"/>
<text text-anchor="start" x="3835.75" y="-722.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ExponentialDistribution</text>
<polygon fill="none" stroke="black" points="3714,-695.25 3714,-716.25 3851,-716.25 3851,-695.25 3714,-695.25"/>
<text text-anchor="start" x="3765.62" y="-699.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="3851,-695.25 3851,-716.25 4103,-716.25 4103,-695.25 3851,-695.25"/>
<text text-anchor="start" x="3854" y="-699.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.EXPONENTIAL]</text>
<polygon fill="none" stroke="black" points="3714,-674.25 3714,-695.25 3851,-695.25 3851,-674.25 3714,-674.25"/>
<text text-anchor="start" x="3716.88" y="-678.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">distribution_parameters</text>
<polygon fill="none" stroke="black" points="3851,-674.25 3851,-695.25 4103,-695.25 4103,-674.25 3851,-674.25"/>
<text text-anchor="start" x="3881" y="-678.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">ExponentialDistributionParameters</text>
<polygon fill="none" stroke="black" points="3714,-653.25 3714,-674.25 3851,-674.25 3851,-653.25 3714,-653.25"/>
<text text-anchor="start" x="3720.62" y="-657.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">truncation_parameters</text>
<polygon fill="none" stroke="black" points="3851,-653.25 3851,-674.25 4103,-674.25 4103,-653.25 3851,-653.25"/>
<text text-anchor="start" x="3887.38" y="-657.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[TruncationParameters]</text>
<polygon fill="none" stroke="black" points="3714,-632.25 3714,-653.25 3851,-653.25 3851,-632.25 3714,-632.25"/>
<text text-anchor="start" x="3729.25" y="-636.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scaling_parameters</text>
<polygon fill="none" stroke="black" points="3851,-632.25 3851,-653.25 4103,-653.25 4103,-632.25 3851,-632.25"/>
<text text-anchor="start" x="3897.5" y="-636.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[ScalingParameters]</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.Distribution&#45;&gt;aind_behavior_services.task_logic.distributions.ExponentialDistribution -->
<g id="edge9" class="edge">
<title>aind_behavior_services.task_logic.distributions.Distribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.ExponentialDistribution:w</title>
<path fill="none" stroke="black" d="M3615.96,-1031.71C3736.46,-1018.08 3586.04,-748.96 3699.28,-728.48"/>
<polyline fill="none" stroke="black" points="3606,-1032.25 3610.99,-1031.98"/>
<polyline fill="none" stroke="black" points="3610.99,-1031.98 3615.99,-1031.71"/>
<polyline fill="none" stroke="black" points="3714,-727.25 3709.02,-727.67"/>
<polygon fill="black" stroke="black" points="3707.6,-722.77 3708.44,-732.73 3706.44,-732.9 3705.61,-722.93 3707.6,-722.77"/>
<polyline fill="none" stroke="black" points="3709.02,-727.67 3704.03,-728.08"/>
<polygon fill="black" stroke="black" points="3702.62,-723.18 3703.46,-733.15 3701.46,-733.32 3700.63,-723.35 3702.62,-723.18"/>
<polyline fill="none" stroke="black" points="3704.03,-728.08 3699.05,-728.5"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.GammaDistribution -->
<g id="node9" class="node">
<title>aind_behavior_services.task_logic.distributions.GammaDistribution</title>
<g id="a_node9"><a xlink:title="aind_behavior_services.task_logic.distributions.GammaDistribution&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3735,-1852.25 3735,-1874.25 4082,-1874.25 4082,-1852.25 3735,-1852.25"/>
<text text-anchor="start" x="3847.75" y="-1858.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">GammaDistribution</text>
<polygon fill="none" stroke="black" points="3735,-1831.25 3735,-1852.25 3872,-1852.25 3872,-1831.25 3735,-1831.25"/>
<text text-anchor="start" x="3786.62" y="-1835.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="3872,-1831.25 3872,-1852.25 4082,-1852.25 4082,-1831.25 3872,-1831.25"/>
<text text-anchor="start" x="3875" y="-1835.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.GAMMA]</text>
<polygon fill="none" stroke="black" points="3735,-1810.25 3735,-1831.25 3872,-1831.25 3872,-1810.25 3735,-1810.25"/>
<text text-anchor="start" x="3737.88" y="-1814.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">distribution_parameters</text>
<polygon fill="none" stroke="black" points="3872,-1810.25 3872,-1831.25 4082,-1831.25 4082,-1810.25 3872,-1810.25"/>
<text text-anchor="start" x="3891.88" y="-1814.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">GammaDistributionParameters</text>
<polygon fill="none" stroke="black" points="3735,-1789.25 3735,-1810.25 3872,-1810.25 3872,-1789.25 3735,-1789.25"/>
<text text-anchor="start" x="3741.62" y="-1793.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">truncation_parameters</text>
<polygon fill="none" stroke="black" points="3872,-1789.25 3872,-1810.25 4082,-1810.25 4082,-1789.25 3872,-1789.25"/>
<text text-anchor="start" x="3887.38" y="-1793.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[TruncationParameters]</text>
<polygon fill="none" stroke="black" points="3735,-1768.25 3735,-1789.25 3872,-1789.25 3872,-1768.25 3735,-1768.25"/>
<text text-anchor="start" x="3750.25" y="-1772.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scaling_parameters</text>
<polygon fill="none" stroke="black" points="3872,-1768.25 3872,-1789.25 4082,-1789.25 4082,-1768.25 3872,-1768.25"/>
<text text-anchor="start" x="3897.5" y="-1772.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[ScalingParameters]</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.Distribution&#45;&gt;aind_behavior_services.task_logic.distributions.GammaDistribution -->
<g id="edge10" class="edge">
<title>aind_behavior_services.task_logic.distributions.Distribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.GammaDistribution:w</title>
<path fill="none" stroke="black" d="M3615.96,-1033.1C3779.12,-1061.96 3563.51,-1818.53 3719.4,-1861.36"/>
<polyline fill="none" stroke="black" points="3606,-1032.25 3610.98,-1032.67"/>
<polyline fill="none" stroke="black" points="3610.98,-1032.67 3615.96,-1033.1"/>
<polyline fill="none" stroke="black" points="3734,-1863.25 3729.04,-1862.61"/>
<polygon fill="black" stroke="black" points="3728.69,-1857.52 3727.41,-1867.44 3725.42,-1867.18 3726.71,-1857.26 3728.69,-1857.52"/>
<polyline fill="none" stroke="black" points="3729.04,-1862.61 3724.08,-1861.97"/>
<polygon fill="black" stroke="black" points="3723.73,-1856.88 3722.45,-1866.8 3720.47,-1866.54 3721.75,-1856.62 3723.73,-1856.88"/>
<polyline fill="none" stroke="black" points="3724.08,-1861.97 3719.12,-1861.32"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.LogNormalDistribution -->
<g id="node10" class="node">
<title>aind_behavior_services.task_logic.distributions.LogNormalDistribution</title>
<g id="a_node10"><a xlink:title="aind_behavior_services.task_logic.distributions.LogNormalDistribution&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3717.5,-1568.25 3717.5,-1590.25 4099.5,-1590.25 4099.5,-1568.25 3717.5,-1568.25"/>
<text text-anchor="start" x="3836.88" y="-1574.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">LogNormalDistribution</text>
<polygon fill="none" stroke="black" points="3717.5,-1547.25 3717.5,-1568.25 3854.5,-1568.25 3854.5,-1547.25 3717.5,-1547.25"/>
<text text-anchor="start" x="3769.12" y="-1551.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="3854.5,-1547.25 3854.5,-1568.25 4099.5,-1568.25 4099.5,-1547.25 3854.5,-1547.25"/>
<text text-anchor="start" x="3857.38" y="-1551.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.LOGNORMAL]</text>
<polygon fill="none" stroke="black" points="3717.5,-1526.25 3717.5,-1547.25 3854.5,-1547.25 3854.5,-1526.25 3717.5,-1526.25"/>
<text text-anchor="start" x="3720.38" y="-1530.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">distribution_parameters</text>
<polygon fill="none" stroke="black" points="3854.5,-1526.25 3854.5,-1547.25 4099.5,-1547.25 4099.5,-1526.25 3854.5,-1526.25"/>
<text text-anchor="start" x="3881.75" y="-1530.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">LogNormalDistributionParameters</text>
<polygon fill="none" stroke="black" points="3717.5,-1505.25 3717.5,-1526.25 3854.5,-1526.25 3854.5,-1505.25 3717.5,-1505.25"/>
<text text-anchor="start" x="3724.12" y="-1509.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">truncation_parameters</text>
<polygon fill="none" stroke="black" points="3854.5,-1505.25 3854.5,-1526.25 4099.5,-1526.25 4099.5,-1505.25 3854.5,-1505.25"/>
<text text-anchor="start" x="3887.38" y="-1509.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[TruncationParameters]</text>
<polygon fill="none" stroke="black" points="3717.5,-1484.25 3717.5,-1505.25 3854.5,-1505.25 3854.5,-1484.25 3717.5,-1484.25"/>
<text text-anchor="start" x="3732.75" y="-1488.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scaling_parameters</text>
<polygon fill="none" stroke="black" points="3854.5,-1484.25 3854.5,-1505.25 4099.5,-1505.25 4099.5,-1484.25 3854.5,-1484.25"/>
<text text-anchor="start" x="3897.5" y="-1488.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[ScalingParameters]</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.Distribution&#45;&gt;aind_behavior_services.task_logic.distributions.LogNormalDistribution -->
<g id="edge11" class="edge">
<title>aind_behavior_services.task_logic.distributions.Distribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.LogNormalDistribution:w</title>
<path fill="none" stroke="black" d="M3615.82,-1032.55C3838.7,-1046.79 3487.56,-1556.62 3701.57,-1578.52"/>
<polyline fill="none" stroke="black" points="3606,-1032.25 3611,-1032.4"/>
<polyline fill="none" stroke="black" points="3611,-1032.4 3616,-1032.56"/>
<polyline fill="none" stroke="black" points="3716.5,-1579.25 3711.51,-1579.01"/>
<polygon fill="black" stroke="black" points="3710.75,-1573.96 3710.26,-1583.95 3708.27,-1583.86 3708.75,-1573.87 3710.75,-1573.96"/>
<polyline fill="none" stroke="black" points="3711.51,-1579.01 3706.51,-1578.76"/>
<polygon fill="black" stroke="black" points="3705.76,-1573.72 3705.27,-1583.71 3703.27,-1583.61 3703.76,-1573.62 3705.76,-1573.72"/>
<polyline fill="none" stroke="black" points="3706.51,-1578.76 3701.52,-1578.52"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.NormalDistribution -->
<g id="node11" class="node">
<title>aind_behavior_services.task_logic.distributions.NormalDistribution</title>
<g id="a_node11"><a xlink:title="aind_behavior_services.task_logic.distributions.NormalDistribution&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3732,-1426.25 3732,-1448.25 4085,-1448.25 4085,-1426.25 3732,-1426.25"/>
<text text-anchor="start" x="3848.88" y="-1432.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">NormalDistribution</text>
<polygon fill="none" stroke="black" points="3732,-1405.25 3732,-1426.25 3869,-1426.25 3869,-1405.25 3732,-1405.25"/>
<text text-anchor="start" x="3783.62" y="-1409.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="3869,-1405.25 3869,-1426.25 4085,-1426.25 4085,-1405.25 3869,-1405.25"/>
<text text-anchor="start" x="3872" y="-1409.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.NORMAL]</text>
<polygon fill="none" stroke="black" points="3732,-1384.25 3732,-1405.25 3869,-1405.25 3869,-1384.25 3732,-1384.25"/>
<text text-anchor="start" x="3734.88" y="-1388.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">distribution_parameters</text>
<polygon fill="none" stroke="black" points="3869,-1384.25 3869,-1405.25 4085,-1405.25 4085,-1384.25 3869,-1384.25"/>
<text text-anchor="start" x="3893" y="-1388.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">NormalDistributionParameters</text>
<polygon fill="none" stroke="black" points="3732,-1363.25 3732,-1384.25 3869,-1384.25 3869,-1363.25 3732,-1363.25"/>
<text text-anchor="start" x="3738.62" y="-1367.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">truncation_parameters</text>
<polygon fill="none" stroke="black" points="3869,-1363.25 3869,-1384.25 4085,-1384.25 4085,-1363.25 3869,-1363.25"/>
<text text-anchor="start" x="3887.38" y="-1367.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[TruncationParameters]</text>
<polygon fill="none" stroke="black" points="3732,-1342.25 3732,-1363.25 3869,-1363.25 3869,-1342.25 3732,-1342.25"/>
<text text-anchor="start" x="3747.25" y="-1346.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scaling_parameters</text>
<polygon fill="none" stroke="black" points="3869,-1342.25 3869,-1363.25 4085,-1363.25 4085,-1342.25 3869,-1342.25"/>
<text text-anchor="start" x="3897.5" y="-1346.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[ScalingParameters]</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.Distribution&#45;&gt;aind_behavior_services.task_logic.distributions.NormalDistribution -->
<g id="edge12" class="edge">
<title>aind_behavior_services.task_logic.distributions.Distribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.NormalDistribution:w</title>
<path fill="none" stroke="black" d="M3615.78,-1032.64C3780.62,-1046.35 3559.26,-1415.43 3716.29,-1436.33"/>
<polyline fill="none" stroke="black" points="3606,-1032.25 3611,-1032.45"/>
<polyline fill="none" stroke="black" points="3611,-1032.45 3615.99,-1032.65"/>
<polyline fill="none" stroke="black" points="3731,-1437.25 3726.01,-1436.94"/>
<polygon fill="black" stroke="black" points="3725.32,-1431.88 3724.7,-1441.86 3722.7,-1441.74 3723.33,-1431.76 3725.32,-1431.88"/>
<polyline fill="none" stroke="black" points="3726.01,-1436.94 3721.02,-1436.62"/>
<polygon fill="black" stroke="black" points="3720.33,-1431.57 3719.71,-1441.55 3717.71,-1441.43 3718.34,-1431.45 3720.33,-1431.57"/>
<polyline fill="none" stroke="black" points="3721.02,-1436.62 3716.03,-1436.31"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.PoissonDistribution -->
<g id="node12" class="node">
<title>aind_behavior_services.task_logic.distributions.PoissonDistribution</title>
<g id="a_node12"><a xlink:title="aind_behavior_services.task_logic.distributions.PoissonDistribution&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3732,-1710.25 3732,-1732.25 4085,-1732.25 4085,-1710.25 3732,-1710.25"/>
<text text-anchor="start" x="3848.5" y="-1716.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">PoissonDistribution</text>
<polygon fill="none" stroke="black" points="3732,-1689.25 3732,-1710.25 3869,-1710.25 3869,-1689.25 3732,-1689.25"/>
<text text-anchor="start" x="3783.62" y="-1693.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="3869,-1689.25 3869,-1710.25 4085,-1710.25 4085,-1689.25 3869,-1689.25"/>
<text text-anchor="start" x="3872" y="-1693.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.POISSON]</text>
<polygon fill="none" stroke="black" points="3732,-1668.25 3732,-1689.25 3869,-1689.25 3869,-1668.25 3732,-1668.25"/>
<text text-anchor="start" x="3734.88" y="-1672.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">distribution_parameters</text>
<polygon fill="none" stroke="black" points="3869,-1668.25 3869,-1689.25 4085,-1689.25 4085,-1668.25 3869,-1668.25"/>
<text text-anchor="start" x="3891.12" y="-1672.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">PoissonDistributionParameters</text>
<polygon fill="none" stroke="black" points="3732,-1647.25 3732,-1668.25 3869,-1668.25 3869,-1647.25 3732,-1647.25"/>
<text text-anchor="start" x="3738.62" y="-1651.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">truncation_parameters</text>
<polygon fill="none" stroke="black" points="3869,-1647.25 3869,-1668.25 4085,-1668.25 4085,-1647.25 3869,-1647.25"/>
<text text-anchor="start" x="3887.38" y="-1651.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[TruncationParameters]</text>
<polygon fill="none" stroke="black" points="3732,-1626.25 3732,-1647.25 3869,-1647.25 3869,-1626.25 3732,-1626.25"/>
<text text-anchor="start" x="3747.25" y="-1630.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scaling_parameters</text>
<polygon fill="none" stroke="black" points="3869,-1626.25 3869,-1647.25 4085,-1647.25 4085,-1626.25 3869,-1626.25"/>
<text text-anchor="start" x="3897.5" y="-1630.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[ScalingParameters]</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.Distribution&#45;&gt;aind_behavior_services.task_logic.distributions.PoissonDistribution -->
<g id="edge13" class="edge">
<title>aind_behavior_services.task_logic.distributions.Distribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.PoissonDistribution:w</title>
<path fill="none" stroke="black" d="M3615.75,-1032.49C3901.8,-1046.73 3438.96,-1699.04 3716.31,-1720.7"/>
<polyline fill="none" stroke="black" points="3606,-1032.25 3611,-1032.37"/>
<polyline fill="none" stroke="black" points="3611,-1032.37 3616,-1032.49"/>
<polyline fill="none" stroke="black" points="3731,-1721.25 3726,-1721.06"/>
<polygon fill="black" stroke="black" points="3725.19,-1716.03 3724.82,-1726.02 3722.82,-1725.95 3723.19,-1715.95 3725.19,-1716.03"/>
<polyline fill="none" stroke="black" points="3726,-1721.06 3721.01,-1720.87"/>
<polygon fill="black" stroke="black" points="3720.2,-1715.84 3719.82,-1725.83 3717.82,-1725.76 3718.2,-1715.77 3720.2,-1715.84"/>
<polyline fill="none" stroke="black" points="3721.01,-1720.87 3716.01,-1720.69"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.Scalar -->
<g id="node13" class="node">
<title>aind_behavior_services.task_logic.distributions.Scalar</title>
<g id="a_node13"><a xlink:title="aind_behavior_services.task_logic.distributions.Scalar&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3734.5,-1142.25 3734.5,-1164.25 4082.5,-1164.25 4082.5,-1142.25 3734.5,-1142.25"/>
<text text-anchor="start" x="3888.62" y="-1148.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Scalar</text>
<polygon fill="none" stroke="black" points="3734.5,-1121.25 3734.5,-1142.25 3871.5,-1142.25 3871.5,-1121.25 3734.5,-1121.25"/>
<text text-anchor="start" x="3786.12" y="-1125.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="3871.5,-1121.25 3871.5,-1142.25 4082.5,-1142.25 4082.5,-1121.25 3871.5,-1121.25"/>
<text text-anchor="start" x="3874.25" y="-1125.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.SCALAR]</text>
<polygon fill="none" stroke="black" points="3734.5,-1100.25 3734.5,-1121.25 3871.5,-1121.25 3871.5,-1100.25 3734.5,-1100.25"/>
<text text-anchor="start" x="3737.38" y="-1104.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">distribution_parameters</text>
<polygon fill="none" stroke="black" points="3871.5,-1100.25 3871.5,-1121.25 4082.5,-1121.25 4082.5,-1100.25 3871.5,-1100.25"/>
<text text-anchor="start" x="3899.38" y="-1104.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">ScalarDistributionParameter</text>
<polygon fill="none" stroke="black" points="3734.5,-1079.25 3734.5,-1100.25 3871.5,-1100.25 3871.5,-1079.25 3734.5,-1079.25"/>
<text text-anchor="start" x="3741.12" y="-1083.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">truncation_parameters</text>
<polygon fill="none" stroke="black" points="3871.5,-1079.25 3871.5,-1100.25 4082.5,-1100.25 4082.5,-1079.25 3871.5,-1079.25"/>
<text text-anchor="start" x="3887.38" y="-1083.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[TruncationParameters]</text>
<polygon fill="none" stroke="black" points="3734.5,-1058.25 3734.5,-1079.25 3871.5,-1079.25 3871.5,-1058.25 3734.5,-1058.25"/>
<text text-anchor="start" x="3749.75" y="-1062.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scaling_parameters</text>
<polygon fill="none" stroke="black" points="3871.5,-1058.25 3871.5,-1079.25 4082.5,-1079.25 4082.5,-1058.25 3871.5,-1058.25"/>
<text text-anchor="start" x="3897.5" y="-1062.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[ScalingParameters]</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.Distribution&#45;&gt;aind_behavior_services.task_logic.distributions.Scalar -->
<g id="edge14" class="edge">
<title>aind_behavior_services.task_logic.distributions.Distribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.Scalar:w</title>
<path fill="none" stroke="black" d="M3615.9,-1032.96C3677,-1042.16 3661.73,-1137.82 3718.78,-1151.6"/>
<polyline fill="none" stroke="black" points="3606,-1032.25 3610.99,-1032.61"/>
<polyline fill="none" stroke="black" points="3610.99,-1032.61 3615.97,-1032.97"/>
<polyline fill="none" stroke="black" points="3733.5,-1153.25 3728.53,-1152.69"/>
<polygon fill="black" stroke="black" points="3728.09,-1147.61 3726.98,-1157.55 3724.99,-1157.33 3726.11,-1147.39 3728.09,-1147.61"/>
<polyline fill="none" stroke="black" points="3728.53,-1152.69 3723.56,-1152.14"/>
<polygon fill="black" stroke="black" points="3723.13,-1147.06 3722.01,-1156.99 3720.02,-1156.77 3721.14,-1146.83 3723.13,-1147.06"/>
<polyline fill="none" stroke="black" points="3723.56,-1152.14 3718.59,-1151.58"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.UniformDistribution -->
<g id="node14" class="node">
<title>aind_behavior_services.task_logic.distributions.UniformDistribution</title>
<g id="a_node14"><a xlink:title="aind_behavior_services.task_logic.distributions.UniformDistribution&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3730,-1284.25 3730,-1306.25 4087,-1306.25 4087,-1284.25 3730,-1284.25"/>
<text text-anchor="start" x="3847" y="-1290.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">UniformDistribution</text>
<polygon fill="none" stroke="black" points="3730,-1263.25 3730,-1284.25 3867,-1284.25 3867,-1263.25 3730,-1263.25"/>
<text text-anchor="start" x="3781.62" y="-1267.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="3867,-1263.25 3867,-1284.25 4087,-1284.25 4087,-1263.25 3867,-1263.25"/>
<text text-anchor="start" x="3869.75" y="-1267.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.UNIFORM]</text>
<polygon fill="none" stroke="black" points="3730,-1242.25 3730,-1263.25 3867,-1263.25 3867,-1242.25 3730,-1242.25"/>
<text text-anchor="start" x="3732.88" y="-1246.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">distribution_parameters</text>
<polygon fill="none" stroke="black" points="3867,-1242.25 3867,-1263.25 4087,-1263.25 4087,-1242.25 3867,-1242.25"/>
<text text-anchor="start" x="3890.38" y="-1246.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">UniformDistributionParameters</text>
<polygon fill="none" stroke="black" points="3730,-1221.25 3730,-1242.25 3867,-1242.25 3867,-1221.25 3730,-1221.25"/>
<text text-anchor="start" x="3736.62" y="-1225.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">truncation_parameters</text>
<polygon fill="none" stroke="black" points="3867,-1221.25 3867,-1242.25 4087,-1242.25 4087,-1221.25 3867,-1221.25"/>
<text text-anchor="start" x="3887.38" y="-1225.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[TruncationParameters]</text>
<polygon fill="none" stroke="black" points="3730,-1200.25 3730,-1221.25 3867,-1221.25 3867,-1200.25 3730,-1200.25"/>
<text text-anchor="start" x="3745.25" y="-1204.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scaling_parameters</text>
<polygon fill="none" stroke="black" points="3867,-1200.25 3867,-1221.25 4087,-1221.25 4087,-1200.25 3867,-1200.25"/>
<text text-anchor="start" x="3897.5" y="-1204.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[ScalingParameters]</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.Distribution&#45;&gt;aind_behavior_services.task_logic.distributions.UniformDistribution -->
<g id="edge15" class="edge">
<title>aind_behavior_services.task_logic.distributions.Distribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.UniformDistribution:w</title>
<path fill="none" stroke="black" d="M3615.67,-1032.79C3723.27,-1045.37 3613.64,-1274.26 3714.15,-1293.91"/>
<polyline fill="none" stroke="black" points="3606,-1032.25 3610.99,-1032.53"/>
<polyline fill="none" stroke="black" points="3610.99,-1032.53 3615.98,-1032.81"/>
<polyline fill="none" stroke="black" points="3729,-1295.25 3724.02,-1294.8"/>
<polygon fill="black" stroke="black" points="3723.47,-1289.73 3722.57,-1299.69 3720.58,-1299.51 3721.48,-1289.55 3723.47,-1289.73"/>
<polyline fill="none" stroke="black" points="3724.02,-1294.8 3719.04,-1294.35"/>
<polygon fill="black" stroke="black" points="3718.49,-1289.28 3717.59,-1299.24 3715.6,-1299.06 3716.5,-1289.1 3718.49,-1289.28"/>
<polyline fill="none" stroke="black" points="3719.04,-1294.35 3714.06,-1293.9"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.ExponentialDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters -->
<g id="edge17" class="edge">
<title>aind_behavior_services.task_logic.distributions.ExponentialDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters:w</title>
<path fill="none" stroke="black" d="M4112.81,-642.98C4299.75,-651.98 4095.64,-924.44 4211,-1088.25 4240.13,-1129.62 4257.17,-1153.2 4300.08,-1158.23"/>
<polyline fill="none" stroke="black" points="4103,-642.75 4108,-642.87"/>
<polyline fill="none" stroke="black" points="4108,-642.87 4113,-642.98"/>
<polyline fill="none" stroke="black" points="4319,-1159.25 4314.01,-1158.98"/>
<polygon fill="black" stroke="black" points="4313.28,-1153.93 4312.74,-1163.92 4310.74,-1163.81 4311.28,-1153.83 4313.28,-1153.93"/>
<polyline fill="none" stroke="black" points="4314.01,-1158.98 4309.01,-1158.71"/>
<ellipse fill="none" stroke="black" cx="4304.52" cy="-1158.47" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.ExponentialDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters -->
<g id="edge18" class="edge">
<title>aind_behavior_services.task_logic.distributions.ExponentialDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters:w</title>
<path fill="none" stroke="black" d="M4112.67,-664.74C4218.22,-687.3 4155.08,-1087.04 4211,-1188.25 4236.37,-1234.16 4245.85,-1271.1 4288.6,-1279.13"/>
<polyline fill="none" stroke="black" points="4103,-663.75 4107.97,-664.26"/>
<polyline fill="none" stroke="black" points="4107.97,-664.26 4112.95,-664.77"/>
<polyline fill="none" stroke="black" points="4307.5,-1280.75 4302.52,-1280.32"/>
<polygon fill="black" stroke="black" points="4301.95,-1275.26 4301.09,-1285.22 4299.1,-1285.05 4299.96,-1275.08 4301.95,-1275.26"/>
<polyline fill="none" stroke="black" points="4302.52,-1280.32 4297.54,-1279.89"/>
<ellipse fill="none" stroke="black" cx="4293.05" cy="-1279.51" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.ExponentialDistributionParameters -->
<g id="node15" class="node">
<title>aind_behavior_services.task_logic.distributions.ExponentialDistributionParameters</title>
<g id="a_node15"><a xlink:title="aind_behavior_services.task_logic.distributions.ExponentialDistributionParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4235.5,-663.25 4235.5,-685.25 4526.5,-685.25 4526.5,-663.25 4235.5,-663.25"/>
<text text-anchor="start" x="4272.62" y="-669.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ExponentialDistributionParameters</text>
<polygon fill="none" stroke="black" points="4235.5,-642.25 4235.5,-663.25 4274.5,-663.25 4274.5,-642.25 4235.5,-642.25"/>
<text text-anchor="start" x="4238.12" y="-646.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="4274.5,-642.25 4274.5,-663.25 4526.5,-663.25 4526.5,-642.25 4274.5,-642.25"/>
<text text-anchor="start" x="4277.5" y="-646.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.EXPONENTIAL]</text>
<polygon fill="none" stroke="black" points="4235.5,-621.25 4235.5,-642.25 4274.5,-642.25 4274.5,-621.25 4235.5,-621.25"/>
<text text-anchor="start" x="4244.88" y="-625.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">rate</text>
<polygon fill="none" stroke="black" points="4274.5,-621.25 4274.5,-642.25 4526.5,-642.25 4526.5,-621.25 4274.5,-621.25"/>
<text text-anchor="start" x="4388.12" y="-625.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.ExponentialDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.ExponentialDistributionParameters -->
<g id="edge16" class="edge">
<title>aind_behavior_services.task_logic.distributions.ExponentialDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.ExponentialDistributionParameters:w</title>
<path fill="none" stroke="black" d="M4112.87,-684.65C4158.61,-683.66 4175.95,-675.96 4219.67,-674.49"/>
<polyline fill="none" stroke="black" points="4103,-684.75 4108,-684.7"/>
<polyline fill="none" stroke="black" points="4108,-684.7 4113,-684.64"/>
<polyline fill="none" stroke="black" points="4234.5,-674.25 4229.5,-674.33"/>
<polygon fill="black" stroke="black" points="4228.42,-669.35 4228.58,-679.35 4226.58,-679.38 4226.42,-669.38 4228.42,-669.35"/>
<polyline fill="none" stroke="black" points="4229.5,-674.33 4224.5,-674.41"/>
<polygon fill="black" stroke="black" points="4223.42,-669.43 4223.58,-679.43 4221.58,-679.46 4221.42,-669.46 4223.42,-669.43"/>
<polyline fill="none" stroke="black" points="4224.5,-674.41 4219.5,-674.49"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.GammaDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters -->
<g id="edge20" class="edge">
<title>aind_behavior_services.task_logic.distributions.GammaDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters:w</title>
<path fill="none" stroke="black" d="M4092.93,-1778.56C4343.01,-1768.82 4031.54,-1383.83 4211,-1189.25 4240.22,-1157.57 4262.43,-1158.25 4300.16,-1159.01"/>
<polyline fill="none" stroke="black" points="4083,-1778.75 4088,-1778.66"/>
<polyline fill="none" stroke="black" points="4088,-1778.66 4093,-1778.56"/>
<polyline fill="none" stroke="black" points="4319,-1159.25 4314,-1159.19"/>
<polygon fill="black" stroke="black" points="4313.06,-1154.17 4312.94,-1164.17 4310.94,-1164.15 4311.06,-1154.15 4313.06,-1154.17"/>
<polyline fill="none" stroke="black" points="4314,-1159.19 4309,-1159.12"/>
<ellipse fill="none" stroke="black" cx="4304.5" cy="-1159.07" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.GammaDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters -->
<g id="edge21" class="edge">
<title>aind_behavior_services.task_logic.distributions.GammaDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters:w</title>
<path fill="none" stroke="black" d="M4092.89,-1799.53C4300.35,-1789.91 4058.84,-1471.17 4211,-1310.25 4237.12,-1282.63 4256.07,-1280.64 4288.55,-1280.67"/>
<polyline fill="none" stroke="black" points="4083,-1799.75 4088,-1799.64"/>
<polyline fill="none" stroke="black" points="4088,-1799.64 4093,-1799.52"/>
<polyline fill="none" stroke="black" points="4307.5,-1280.75 4302.5,-1280.73"/>
<polygon fill="black" stroke="black" points="4301.52,-1275.73 4301.48,-1285.73 4299.48,-1285.72 4299.52,-1275.72 4301.52,-1275.73"/>
<polyline fill="none" stroke="black" points="4302.5,-1280.73 4297.5,-1280.71"/>
<ellipse fill="none" stroke="black" cx="4293" cy="-1280.69" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.GammaDistributionParameters -->
<g id="node16" class="node">
<title>aind_behavior_services.task_logic.distributions.GammaDistributionParameters</title>
<g id="a_node16"><a xlink:title="aind_behavior_services.task_logic.distributions.GammaDistributionParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4256.5,-1854.75 4256.5,-1876.75 4505.5,-1876.75 4505.5,-1854.75 4256.5,-1854.75"/>
<text text-anchor="start" x="4284.62" y="-1861.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">GammaDistributionParameters</text>
<polygon fill="none" stroke="black" points="4256.5,-1833.75 4256.5,-1854.75 4295.5,-1854.75 4295.5,-1833.75 4256.5,-1833.75"/>
<text text-anchor="start" x="4259.12" y="-1838.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="4295.5,-1833.75 4295.5,-1854.75 4505.5,-1854.75 4505.5,-1833.75 4295.5,-1833.75"/>
<text text-anchor="start" x="4298.5" y="-1838.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.GAMMA]</text>
<polygon fill="none" stroke="black" points="4256.5,-1812.75 4256.5,-1833.75 4295.5,-1833.75 4295.5,-1812.75 4256.5,-1812.75"/>
<text text-anchor="start" x="4259.88" y="-1817.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">shape</text>
<polygon fill="none" stroke="black" points="4295.5,-1812.75 4295.5,-1833.75 4505.5,-1833.75 4505.5,-1812.75 4295.5,-1812.75"/>
<text text-anchor="start" x="4388.12" y="-1817.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4256.5,-1791.75 4256.5,-1812.75 4295.5,-1812.75 4295.5,-1791.75 4256.5,-1791.75"/>
<text text-anchor="start" x="4265.88" y="-1796.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">rate</text>
<polygon fill="none" stroke="black" points="4295.5,-1791.75 4295.5,-1812.75 4505.5,-1812.75 4505.5,-1791.75 4295.5,-1791.75"/>
<text text-anchor="start" x="4388.12" y="-1796.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.GammaDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.GammaDistributionParameters -->
<g id="edge19" class="edge">
<title>aind_behavior_services.task_logic.distributions.GammaDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.GammaDistributionParameters:w</title>
<path fill="none" stroke="black" d="M4092.86,-1820.99C4158.73,-1824.29 4177.21,-1860.29 4240.75,-1865.2"/>
<polyline fill="none" stroke="black" points="4083,-1820.75 4088,-1820.87"/>
<polyline fill="none" stroke="black" points="4088,-1820.87 4093,-1821"/>
<polyline fill="none" stroke="black" points="4255.5,-1865.75 4250.5,-1865.56"/>
<polygon fill="black" stroke="black" points="4249.69,-1860.53 4249.32,-1870.52 4247.32,-1870.45 4247.69,-1860.45 4249.69,-1860.53"/>
<polyline fill="none" stroke="black" points="4250.5,-1865.56 4245.51,-1865.38"/>
<polygon fill="black" stroke="black" points="4244.69,-1860.34 4244.32,-1870.33 4242.32,-1870.26 4242.7,-1860.27 4244.69,-1860.34"/>
<polyline fill="none" stroke="black" points="4245.51,-1865.38 4240.51,-1865.19"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.LogNormalDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters -->
<g id="edge23" class="edge">
<title>aind_behavior_services.task_logic.distributions.LogNormalDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters:w</title>
<path fill="none" stroke="black" d="M4110.19,-1494.41C4238.47,-1485.09 4107.57,-1285.09 4211,-1189.25 4242.55,-1160.02 4262.99,-1158.9 4300.04,-1159.14"/>
<polyline fill="none" stroke="black" points="4100.5,-1494.75 4105.5,-1494.58"/>
<polyline fill="none" stroke="black" points="4105.5,-1494.58 4110.49,-1494.4"/>
<polyline fill="none" stroke="black" points="4319,-1159.25 4314,-1159.22"/>
<polygon fill="black" stroke="black" points="4313.03,-1154.22 4312.97,-1164.22 4310.97,-1164.2 4311.03,-1154.2 4313.03,-1154.22"/>
<polyline fill="none" stroke="black" points="4314,-1159.22 4309,-1159.19"/>
<ellipse fill="none" stroke="black" cx="4304.5" cy="-1159.17" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.LogNormalDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters -->
<g id="edge24" class="edge">
<title>aind_behavior_services.task_logic.distributions.LogNormalDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters:w</title>
<path fill="none" stroke="black" d="M4110.26,-1515.3C4199.5,-1506.55 4133.49,-1373.84 4211,-1310.25 4240.39,-1286.14 4257.07,-1281.71 4288.78,-1280.92"/>
<polyline fill="none" stroke="black" points="4100.5,-1515.75 4105.49,-1515.52"/>
<polyline fill="none" stroke="black" points="4105.49,-1515.52 4110.49,-1515.28"/>
<polyline fill="none" stroke="black" points="4307.5,-1280.75 4302.5,-1280.79"/>
<polygon fill="black" stroke="black" points="4301.46,-1275.8 4301.54,-1285.8 4299.54,-1285.82 4299.46,-1275.82 4301.46,-1275.8"/>
<polyline fill="none" stroke="black" points="4302.5,-1280.79 4297.5,-1280.84"/>
<ellipse fill="none" stroke="black" cx="4293" cy="-1280.88" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.LogNormalDistributionParameters -->
<g id="node17" class="node">
<title>aind_behavior_services.task_logic.distributions.LogNormalDistributionParameters</title>
<g id="a_node17"><a xlink:title="aind_behavior_services.task_logic.distributions.LogNormalDistributionParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4239,-1632.75 4239,-1654.75 4523,-1654.75 4523,-1632.75 4239,-1632.75"/>
<text text-anchor="start" x="4273.75" y="-1639.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">LogNormalDistributionParameters</text>
<polygon fill="none" stroke="black" points="4239,-1611.75 4239,-1632.75 4278,-1632.75 4278,-1611.75 4239,-1611.75"/>
<text text-anchor="start" x="4241.62" y="-1616.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="4278,-1611.75 4278,-1632.75 4523,-1632.75 4523,-1611.75 4278,-1611.75"/>
<text text-anchor="start" x="4280.88" y="-1616.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.LOGNORMAL]</text>
<polygon fill="none" stroke="black" points="4239,-1590.75 4239,-1611.75 4278,-1611.75 4278,-1590.75 4239,-1590.75"/>
<text text-anchor="start" x="4243.88" y="-1595.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">mean</text>
<polygon fill="none" stroke="black" points="4278,-1590.75 4278,-1611.75 4523,-1611.75 4523,-1590.75 4278,-1590.75"/>
<text text-anchor="start" x="4388.12" y="-1595.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4239,-1569.75 4239,-1590.75 4278,-1590.75 4278,-1569.75 4239,-1569.75"/>
<text text-anchor="start" x="4249.88" y="-1574.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">std</text>
<polygon fill="none" stroke="black" points="4278,-1569.75 4278,-1590.75 4523,-1590.75 4523,-1569.75 4278,-1569.75"/>
<text text-anchor="start" x="4388.12" y="-1574.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.LogNormalDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.LogNormalDistributionParameters -->
<g id="edge22" class="edge">
<title>aind_behavior_services.task_logic.distributions.LogNormalDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.LogNormalDistributionParameters:w</title>
<path fill="none" stroke="black" d="M4110.38,-1537.38C4171.78,-1545.51 4165.44,-1630.11 4223.26,-1642.29"/>
<polyline fill="none" stroke="black" points="4100.5,-1536.75 4105.49,-1537.07"/>
<polyline fill="none" stroke="black" points="4105.49,-1537.07 4110.48,-1537.38"/>
<polyline fill="none" stroke="black" points="4238,-1643.75 4233.02,-1643.26"/>
<polygon fill="black" stroke="black" points="4232.52,-1638.18 4231.54,-1648.13 4229.55,-1647.94 4230.53,-1637.99 4232.52,-1638.18"/>
<polyline fill="none" stroke="black" points="4233.02,-1643.26 4228.05,-1642.77"/>
<polygon fill="black" stroke="black" points="4227.55,-1637.69 4226.56,-1647.64 4224.57,-1647.45 4225.56,-1637.49 4227.55,-1637.69"/>
<polyline fill="none" stroke="black" points="4228.05,-1642.77 4223.07,-1642.27"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.NormalDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters -->
<g id="edge26" class="edge">
<title>aind_behavior_services.task_logic.distributions.NormalDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters:w</title>
<path fill="none" stroke="black" d="M4095.64,-1352.3C4174.5,-1344.5 4138.04,-1238.58 4211,-1189.25 4246.63,-1165.16 4264.1,-1160.31 4300.27,-1159.43"/>
<polyline fill="none" stroke="black" points="4086,-1352.75 4090.99,-1352.51"/>
<polyline fill="none" stroke="black" points="4090.99,-1352.51 4095.99,-1352.28"/>
<polyline fill="none" stroke="black" points="4319,-1159.25 4314,-1159.3"/>
<polygon fill="black" stroke="black" points="4312.95,-1154.31 4313.05,-1164.31 4311.05,-1164.33 4310.95,-1154.33 4312.95,-1154.31"/>
<polyline fill="none" stroke="black" points="4314,-1159.3 4309,-1159.35"/>
<ellipse fill="none" stroke="black" cx="4304.5" cy="-1159.39" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.NormalDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters -->
<g id="edge27" class="edge">
<title>aind_behavior_services.task_logic.distributions.NormalDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters:w</title>
<path fill="none" stroke="black" d="M4095.73,-1373.4C4149.01,-1369.4 4156.37,-1332.28 4211,-1310.25 4246.09,-1296.1 4258.74,-1284.83 4288.77,-1281.65"/>
<polyline fill="none" stroke="black" points="4086,-1373.75 4091,-1373.57"/>
<polyline fill="none" stroke="black" points="4091,-1373.57 4095.99,-1373.39"/>
<polyline fill="none" stroke="black" points="4307.5,-1280.75 4302.51,-1280.99"/>
<polygon fill="black" stroke="black" points="4301.27,-1276.04 4301.75,-1286.03 4299.75,-1286.13 4299.27,-1276.14 4301.27,-1276.04"/>
<polyline fill="none" stroke="black" points="4302.51,-1280.99 4297.51,-1281.23"/>
<ellipse fill="none" stroke="black" cx="4293.02" cy="-1281.45" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.NormalDistributionParameters -->
<g id="node18" class="node">
<title>aind_behavior_services.task_logic.distributions.NormalDistributionParameters</title>
<g id="a_node18"><a xlink:title="aind_behavior_services.task_logic.distributions.NormalDistributionParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4253.5,-1511.75 4253.5,-1533.75 4508.5,-1533.75 4508.5,-1511.75 4253.5,-1511.75"/>
<text text-anchor="start" x="4285.75" y="-1518.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">NormalDistributionParameters</text>
<polygon fill="none" stroke="black" points="4253.5,-1490.75 4253.5,-1511.75 4292.5,-1511.75 4292.5,-1490.75 4253.5,-1490.75"/>
<text text-anchor="start" x="4256.12" y="-1495.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="4292.5,-1490.75 4292.5,-1511.75 4508.5,-1511.75 4508.5,-1490.75 4292.5,-1490.75"/>
<text text-anchor="start" x="4295.5" y="-1495.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.NORMAL]</text>
<polygon fill="none" stroke="black" points="4253.5,-1469.75 4253.5,-1490.75 4292.5,-1490.75 4292.5,-1469.75 4253.5,-1469.75"/>
<text text-anchor="start" x="4258.38" y="-1474.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">mean</text>
<polygon fill="none" stroke="black" points="4292.5,-1469.75 4292.5,-1490.75 4508.5,-1490.75 4508.5,-1469.75 4292.5,-1469.75"/>
<text text-anchor="start" x="4388.12" y="-1474.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4253.5,-1448.75 4253.5,-1469.75 4292.5,-1469.75 4292.5,-1448.75 4253.5,-1448.75"/>
<text text-anchor="start" x="4264.38" y="-1453.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">std</text>
<polygon fill="none" stroke="black" points="4292.5,-1448.75 4292.5,-1469.75 4508.5,-1469.75 4508.5,-1448.75 4292.5,-1448.75"/>
<text text-anchor="start" x="4388.12" y="-1453.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.NormalDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.NormalDistributionParameters -->
<g id="edge25" class="edge">
<title>aind_behavior_services.task_logic.distributions.NormalDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.NormalDistributionParameters:w</title>
<path fill="none" stroke="black" d="M4095.93,-1395.27C4173.19,-1403.56 4164.09,-1509.22 4237.74,-1521.57"/>
<polyline fill="none" stroke="black" points="4086,-1394.75 4090.99,-1395.01"/>
<polyline fill="none" stroke="black" points="4090.99,-1395.01 4095.99,-1395.27"/>
<polyline fill="none" stroke="black" points="4252.5,-1522.75 4247.52,-1522.35"/>
<polygon fill="black" stroke="black" points="4246.92,-1517.29 4246.12,-1527.26 4244.13,-1527.1 4244.92,-1517.13 4246.92,-1517.29"/>
<polyline fill="none" stroke="black" points="4247.52,-1522.35 4242.53,-1521.96"/>
<polygon fill="black" stroke="black" points="4241.93,-1516.89 4241.14,-1526.86 4239.14,-1526.7 4239.94,-1516.73 4241.93,-1516.89"/>
<polyline fill="none" stroke="black" points="4242.53,-1521.96 4237.55,-1521.56"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.PoissonDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters -->
<g id="edge29" class="edge">
<title>aind_behavior_services.task_logic.distributions.PoissonDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters:w</title>
<path fill="none" stroke="black" d="M4095.93,-1636.5C4285.1,-1626.83 4068.75,-1334.18 4211,-1189.25 4241.19,-1158.49 4262.7,-1158.5 4300.21,-1159.06"/>
<polyline fill="none" stroke="black" points="4086,-1636.75 4091,-1636.63"/>
<polyline fill="none" stroke="black" points="4091,-1636.63 4096,-1636.5"/>
<polyline fill="none" stroke="black" points="4319,-1159.25 4314,-1159.2"/>
<polygon fill="black" stroke="black" points="4313.05,-1154.19 4312.95,-1164.19 4310.95,-1164.17 4311.05,-1154.17 4313.05,-1154.19"/>
<polyline fill="none" stroke="black" points="4314,-1159.2 4309,-1159.15"/>
<ellipse fill="none" stroke="black" cx="4304.5" cy="-1159.1" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.PoissonDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters -->
<g id="edge30" class="edge">
<title>aind_behavior_services.task_logic.distributions.PoissonDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters:w</title>
<path fill="none" stroke="black" d="M4095.7,-1657.46C4243.77,-1648.19 4094.59,-1421.13 4211,-1310.25 4238.53,-1284.03 4256.5,-1281.06 4288.65,-1280.77"/>
<polyline fill="none" stroke="black" points="4086,-1657.75 4091,-1657.6"/>
<polyline fill="none" stroke="black" points="4091,-1657.6 4096,-1657.45"/>
<polyline fill="none" stroke="black" points="4307.5,-1280.75 4302.5,-1280.76"/>
<polygon fill="black" stroke="black" points="4301.49,-1275.76 4301.51,-1285.76 4299.51,-1285.76 4299.49,-1275.76 4301.49,-1275.76"/>
<polyline fill="none" stroke="black" points="4302.5,-1280.76 4297.5,-1280.76"/>
<ellipse fill="none" stroke="black" cx="4293" cy="-1280.77" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.PoissonDistributionParameters -->
<g id="node19" class="node">
<title>aind_behavior_services.task_logic.distributions.PoissonDistributionParameters</title>
<g id="a_node19"><a xlink:title="aind_behavior_services.task_logic.distributions.PoissonDistributionParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4253.5,-1733.25 4253.5,-1755.25 4508.5,-1755.25 4508.5,-1733.25 4253.5,-1733.25"/>
<text text-anchor="start" x="4285.38" y="-1739.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">PoissonDistributionParameters</text>
<polygon fill="none" stroke="black" points="4253.5,-1712.25 4253.5,-1733.25 4292.5,-1733.25 4292.5,-1712.25 4253.5,-1712.25"/>
<text text-anchor="start" x="4256.12" y="-1716.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="4292.5,-1712.25 4292.5,-1733.25 4508.5,-1733.25 4508.5,-1712.25 4292.5,-1712.25"/>
<text text-anchor="start" x="4295.5" y="-1716.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.POISSON]</text>
<polygon fill="none" stroke="black" points="4253.5,-1691.25 4253.5,-1712.25 4292.5,-1712.25 4292.5,-1691.25 4253.5,-1691.25"/>
<text text-anchor="start" x="4262.88" y="-1695.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">rate</text>
<polygon fill="none" stroke="black" points="4292.5,-1691.25 4292.5,-1712.25 4508.5,-1712.25 4508.5,-1691.25 4292.5,-1691.25"/>
<text text-anchor="start" x="4388.12" y="-1695.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.PoissonDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.PoissonDistributionParameters -->
<g id="edge28" class="edge">
<title>aind_behavior_services.task_logic.distributions.PoissonDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.PoissonDistributionParameters:w</title>
<path fill="none" stroke="black" d="M4095.86,-1679.1C4161.48,-1683.91 4174.73,-1736.3 4237.78,-1743.45"/>
<polyline fill="none" stroke="black" points="4086,-1678.75 4091,-1678.93"/>
<polyline fill="none" stroke="black" points="4091,-1678.93 4095.99,-1679.11"/>
<polyline fill="none" stroke="black" points="4252.5,-1744.25 4247.51,-1743.98"/>
<polygon fill="black" stroke="black" points="4246.78,-1738.93 4246.24,-1748.92 4244.24,-1748.81 4244.78,-1738.82 4246.78,-1738.93"/>
<polyline fill="none" stroke="black" points="4247.51,-1743.98 4242.51,-1743.7"/>
<polygon fill="black" stroke="black" points="4241.79,-1738.66 4241.24,-1748.64 4239.25,-1748.53 4239.79,-1738.55 4241.79,-1738.66"/>
<polyline fill="none" stroke="black" points="4242.51,-1743.7 4237.52,-1743.43"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.Scalar&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters -->
<g id="edge32" class="edge">
<title>aind_behavior_services.task_logic.distributions.Scalar:e&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters:w</title>
<path fill="none" stroke="black" d="M4093.41,-1068.99C4190.17,-1073.83 4208.26,-1149.24 4300.25,-1158.35"/>
<polyline fill="none" stroke="black" points="4083.5,-1068.75 4088.5,-1068.87"/>
<polyline fill="none" stroke="black" points="4088.5,-1068.87 4093.5,-1069"/>
<polyline fill="none" stroke="black" points="4319,-1159.25 4314.01,-1159.01"/>
<polygon fill="black" stroke="black" points="4313.25,-1153.97 4312.77,-1163.96 4310.77,-1163.86 4311.25,-1153.87 4313.25,-1153.97"/>
<polyline fill="none" stroke="black" points="4314.01,-1159.01 4309.01,-1158.77"/>
<ellipse fill="none" stroke="black" cx="4304.52" cy="-1158.56" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.Scalar&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters -->
<g id="edge33" class="edge">
<title>aind_behavior_services.task_logic.distributions.Scalar:e&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters:w</title>
<path fill="none" stroke="black" d="M4093.15,-1090.11C4206.23,-1098.84 4183,-1262.09 4288.62,-1279.29"/>
<polyline fill="none" stroke="black" points="4083.5,-1089.75 4088.5,-1089.94"/>
<polyline fill="none" stroke="black" points="4088.5,-1089.94 4093.49,-1090.13"/>
<polyline fill="none" stroke="black" points="4307.5,-1280.75 4302.51,-1280.36"/>
<polygon fill="black" stroke="black" points="4301.9,-1275.3 4301.13,-1285.27 4299.14,-1285.12 4299.91,-1275.15 4301.9,-1275.3"/>
<polyline fill="none" stroke="black" points="4302.51,-1280.36 4297.53,-1279.98"/>
<ellipse fill="none" stroke="black" cx="4293.04" cy="-1279.63" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.ScalarDistributionParameter -->
<g id="node20" class="node">
<title>aind_behavior_services.task_logic.distributions.ScalarDistributionParameter</title>
<g id="a_node20"><a xlink:title="aind_behavior_services.task_logic.distributions.ScalarDistributionParameter&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4211,-1048.25 4211,-1070.25 4551,-1070.25 4551,-1048.25 4211,-1048.25"/>
<text text-anchor="start" x="4292.12" y="-1054.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ScalarDistributionParameter</text>
<polygon fill="none" stroke="black" points="4211,-1027.25 4211,-1048.25 4340,-1048.25 4340,-1027.25 4211,-1027.25"/>
<text text-anchor="start" x="4258.62" y="-1031.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="4340,-1027.25 4340,-1048.25 4551,-1048.25 4551,-1027.25 4340,-1027.25"/>
<text text-anchor="start" x="4342.75" y="-1031.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.SCALAR]</text>
<polygon fill="none" stroke="black" points="4211,-1006.25 4211,-1027.25 4340,-1027.25 4340,-1006.25 4211,-1006.25"/>
<text text-anchor="start" x="4261.25" y="-1010.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">value</text>
<polygon fill="none" stroke="black" points="4340,-1006.25 4340,-1027.25 4551,-1027.25 4551,-1006.25 4340,-1006.25"/>
<text text-anchor="start" x="4433.12" y="-1010.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4211,-985.25 4211,-1006.25 4340,-1006.25 4340,-985.25 4211,-985.25"/>
<text text-anchor="start" x="4213.62" y="-989.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">truncation_parameters</text>
<polygon fill="none" stroke="black" points="4340,-985.25 4340,-1006.25 4551,-1006.25 4551,-985.25 4340,-985.25"/>
<text text-anchor="start" x="4408.75" y="-989.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[None]</text>
<polygon fill="none" stroke="black" points="4211,-964.25 4211,-985.25 4340,-985.25 4340,-964.25 4211,-964.25"/>
<text text-anchor="start" x="4222.25" y="-968.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">scaling_parameters</text>
<polygon fill="none" stroke="black" points="4340,-964.25 4340,-985.25 4551,-985.25 4551,-964.25 4340,-964.25"/>
<text text-anchor="start" x="4408.75" y="-968.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[None]</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.Scalar&#45;&gt;aind_behavior_services.task_logic.distributions.ScalarDistributionParameter -->
<g id="edge31" class="edge">
<title>aind_behavior_services.task_logic.distributions.Scalar:e&#45;&gt;aind_behavior_services.task_logic.distributions.ScalarDistributionParameter:w</title>
<path fill="none" stroke="black" d="M4093.37,-1110.27C4140.62,-1105.56 4151.51,-1067.32 4196.31,-1060.34"/>
<polyline fill="none" stroke="black" points="4083.5,-1110.75 4088.49,-1110.51"/>
<polyline fill="none" stroke="black" points="4088.49,-1110.51 4093.49,-1110.27"/>
<polyline fill="none" stroke="black" points="4211,-1059.25 4206.01,-1059.62"/>
<polygon fill="black" stroke="black" points="4204.65,-1054.71 4205.39,-1064.68 4203.39,-1064.83 4202.65,-1054.86 4204.65,-1054.71"/>
<polyline fill="none" stroke="black" points="4206.01,-1059.62 4201.03,-1059.99"/>
<polygon fill="black" stroke="black" points="4199.66,-1055.08 4200.4,-1065.05 4198.41,-1065.2 4197.67,-1055.23 4199.66,-1055.08"/>
<polyline fill="none" stroke="black" points="4201.03,-1059.99 4196.04,-1060.36"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.UniformDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters -->
<g id="edge34" class="edge">
<title>aind_behavior_services.task_logic.distributions.UniformDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.ScalingParameters:w</title>
<path fill="none" stroke="black" d="M4097.91,-1210.59C4188.37,-1207.68 4213.98,-1165.28 4300.26,-1159.83"/>
<polyline fill="none" stroke="black" points="4088,-1210.75 4093,-1210.67"/>
<polyline fill="none" stroke="black" points="4093,-1210.67 4098,-1210.59"/>
<polyline fill="none" stroke="black" points="4319,-1159.25 4314,-1159.4"/>
<polygon fill="black" stroke="black" points="4312.85,-1154.44 4313.16,-1164.43 4311.16,-1164.49 4310.85,-1154.5 4312.85,-1154.44"/>
<polyline fill="none" stroke="black" points="4314,-1159.4 4309,-1159.56"/>
<ellipse fill="none" stroke="black" cx="4304.51" cy="-1159.7" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.UniformDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters -->
<g id="edge35" class="edge">
<title>aind_behavior_services.task_logic.distributions.UniformDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.TruncationParameters:w</title>
<path fill="none" stroke="black" d="M4097.97,-1231.92C4183.14,-1234.83 4207.68,-1274.7 4288.71,-1280.14"/>
<polyline fill="none" stroke="black" points="4088,-1231.75 4093,-1231.83"/>
<polyline fill="none" stroke="black" points="4093,-1231.83 4098,-1231.92"/>
<polyline fill="none" stroke="black" points="4307.5,-1280.75 4302.5,-1280.59"/>
<polygon fill="black" stroke="black" points="4301.67,-1275.56 4301.34,-1285.55 4299.34,-1285.49 4299.67,-1275.49 4301.67,-1275.56"/>
<polyline fill="none" stroke="black" points="4302.5,-1280.59 4297.51,-1280.42"/>
<ellipse fill="none" stroke="black" cx="4293.01" cy="-1280.28" rx="4" ry="4"/>
</g>
<!-- aind_behavior_services.task_logic.distributions.UniformDistributionParameters -->
<g id="node21" class="node">
<title>aind_behavior_services.task_logic.distributions.UniformDistributionParameters</title>
<g id="a_node21"><a xlink:title="aind_behavior_services.task_logic.distributions.UniformDistributionParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4251.5,-1390.75 4251.5,-1412.75 4510.5,-1412.75 4510.5,-1390.75 4251.5,-1390.75"/>
<text text-anchor="start" x="4283.88" y="-1397.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">UniformDistributionParameters</text>
<polygon fill="none" stroke="black" points="4251.5,-1369.75 4251.5,-1390.75 4290.5,-1390.75 4290.5,-1369.75 4251.5,-1369.75"/>
<text text-anchor="start" x="4254.12" y="-1374.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">family</text>
<polygon fill="none" stroke="black" points="4290.5,-1369.75 4290.5,-1390.75 4510.5,-1390.75 4510.5,-1369.75 4290.5,-1369.75"/>
<text text-anchor="start" x="4293.25" y="-1374.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[DistributionFamily.UNIFORM]</text>
<polygon fill="none" stroke="black" points="4251.5,-1348.75 4251.5,-1369.75 4290.5,-1369.75 4290.5,-1348.75 4251.5,-1348.75"/>
<text text-anchor="start" x="4260.88" y="-1353.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">min</text>
<polygon fill="none" stroke="black" points="4290.5,-1348.75 4290.5,-1369.75 4510.5,-1369.75 4510.5,-1348.75 4290.5,-1348.75"/>
<text text-anchor="start" x="4388.12" y="-1353.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4251.5,-1327.75 4251.5,-1348.75 4290.5,-1348.75 4290.5,-1327.75 4251.5,-1327.75"/>
<text text-anchor="start" x="4259.38" y="-1332.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">max</text>
<polygon fill="none" stroke="black" points="4290.5,-1327.75 4290.5,-1348.75 4510.5,-1348.75 4510.5,-1327.75 4290.5,-1327.75"/>
<text text-anchor="start" x="4388.12" y="-1332.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_services.task_logic.distributions.UniformDistribution&#45;&gt;aind_behavior_services.task_logic.distributions.UniformDistributionParameters -->
<g id="edge36" class="edge">
<title>aind_behavior_services.task_logic.distributions.UniformDistribution:e&#45;&gt;aind_behavior_services.task_logic.distributions.UniformDistributionParameters:w</title>
<path fill="none" stroke="black" d="M4097.86,-1253.29C4178.93,-1262.49 4158.75,-1386.45 4235.57,-1400.46"/>
<polyline fill="none" stroke="black" points="4088,-1252.75 4092.99,-1253.02"/>
<polyline fill="none" stroke="black" points="4092.99,-1253.02 4097.99,-1253.3"/>
<polyline fill="none" stroke="black" points="4250.5,-1401.75 4245.52,-1401.32"/>
<polygon fill="black" stroke="black" points="4244.95,-1396.25 4244.09,-1406.22 4242.1,-1406.04 4242.96,-1396.08 4244.95,-1396.25"/>
<polyline fill="none" stroke="black" points="4245.52,-1401.32 4240.54,-1400.89"/>
<polygon fill="black" stroke="black" points="4239.97,-1395.82 4239.11,-1405.79 4237.12,-1405.62 4237.98,-1395.65 4239.97,-1395.82"/>
<polyline fill="none" stroke="black" points="4240.54,-1400.89 4235.56,-1400.46"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskLogic -->
<g id="node22" class="node">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskLogic</title>
<g id="a_node22"><a xlink:title="aind_behavior_vr_foraging.task_logic.AindVrForagingTaskLogic&#10;&#10;Base Task Primitive.&#10;Holds Task metadata and parameters.&#10;">
<polygon fill="none" stroke="black" points="0,-967.25 0,-989.25 282,-989.25 282,-967.25 0,-967.25"/>
<text text-anchor="start" x="57.75" y="-973.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">AindVrForagingTaskLogic</text>
<polygon fill="none" stroke="black" points="0,-946.25 0,-967.25 96,-967.25 96,-946.25 0,-946.25"/>
<text text-anchor="start" x="33.38" y="-950.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="96,-946.25 96,-967.25 282,-967.25 282,-946.25 96,-946.25"/>
<text text-anchor="start" x="181.88" y="-950.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="0,-925.25 0,-946.25 96,-946.25 96,-925.25 0,-925.25"/>
<text text-anchor="start" x="16.88" y="-929.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">description</text>
<polygon fill="none" stroke="black" points="96,-925.25 96,-946.25 282,-946.25 282,-925.25 96,-925.25"/>
<text text-anchor="start" x="181.88" y="-929.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="0,-904.25 0,-925.25 96,-925.25 96,-904.25 0,-904.25"/>
<text text-anchor="start" x="27.75" y="-908.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">version</text>
<polygon fill="none" stroke="black" points="96,-904.25 96,-925.25 282,-925.25 282,-904.25 96,-904.25"/>
<text text-anchor="start" x="150.38" y="-908.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;0.4.1&#39;]</text>
<polygon fill="none" stroke="black" points="0,-883.25 0,-904.25 96,-904.25 96,-883.25 0,-883.25"/>
<text text-anchor="start" x="2.62" y="-887.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_parameters</text>
<polygon fill="none" stroke="black" points="96,-883.25 96,-904.25 282,-904.25 282,-883.25 96,-883.25"/>
<text text-anchor="start" x="99" y="-887.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">AindVrForagingTaskParameters</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters -->
<g id="node23" class="node">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters</title>
<g id="a_node23"><a xlink:title="aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters&#10;&#10;Set of parameters associated with a subject task.&#10;Subclass with Task Parameters.&#10;">
<polygon fill="none" stroke="black" points="390,-883.25 390,-905.25 680,-905.25 680,-883.25 390,-883.25"/>
<text text-anchor="start" x="433.38" y="-889.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">AindVrForagingTaskParameters</text>
<polygon fill="none" stroke="black" points="390,-862.25 390,-883.25 519,-883.25 519,-862.25 390,-862.25"/>
<text text-anchor="start" x="429" y="-866.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">rng_seed</text>
<polygon fill="none" stroke="black" points="519,-862.25 519,-883.25 680,-883.25 680,-862.25 519,-862.25"/>
<text text-anchor="start" x="558.62" y="-866.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[float]</text>
<polygon fill="none" stroke="black" points="390,-841.25 390,-862.25 519,-862.25 519,-841.25 390,-841.25"/>
<text text-anchor="start" x="424.5" y="-845.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">stage_alias</text>
<polygon fill="none" stroke="black" points="519,-841.25 519,-862.25 680,-862.25 680,-841.25 519,-841.25"/>
<text text-anchor="start" x="563.88" y="-845.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[str]</text>
<polygon fill="none" stroke="black" points="390,-820.25 390,-841.25 519,-841.25 519,-820.25 390,-820.25"/>
<text text-anchor="start" x="430.5" y="-824.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">updaters</text>
<polygon fill="none" stroke="black" points="519,-820.25 519,-841.25 680,-841.25 680,-820.25 519,-820.25"/>
<text text-anchor="start" x="521.88" y="-824.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Dict[str, NumericalUpdater]</text>
<polygon fill="none" stroke="black" points="390,-799.25 390,-820.25 519,-820.25 519,-799.25 390,-799.25"/>
<text text-anchor="start" x="392.62" y="-803.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">environment_statistics</text>
<polygon fill="none" stroke="black" points="519,-799.25 519,-820.25 680,-820.25 680,-799.25 519,-799.25"/>
<text text-anchor="start" x="539.12" y="-803.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">EnvironmentStatistics</text>
<polygon fill="none" stroke="black" points="390,-778.25 390,-799.25 519,-799.25 519,-778.25 390,-778.25"/>
<text text-anchor="start" x="399" y="-782.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_mode_settings</text>
<polygon fill="none" stroke="black" points="519,-778.25 519,-799.25 680,-799.25 680,-778.25 519,-778.25"/>
<text text-anchor="start" x="547" y="-782.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">TaskModeSettings</text>
<polygon fill="none" stroke="black" points="390,-757.25 390,-778.25 519,-778.25 519,-757.25 390,-757.25"/>
<text text-anchor="start" x="404.62" y="-761.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">operation_control</text>
<polygon fill="none" stroke="black" points="519,-757.25 519,-778.25 680,-778.25 680,-757.25 519,-757.25"/>
<text text-anchor="start" x="550.38" y="-761.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">OperationControl</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskLogic&#45;&gt;aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters -->
<g id="edge37" class="edge">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskLogic:e&#45;&gt;aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters:w</title>
<path fill="none" stroke="black" d="M291.87,-893.76C327.07,-893.81 341.8,-894.15 375.08,-894.23"/>
<polyline fill="none" stroke="black" points="282,-893.75 287,-893.75"/>
<polyline fill="none" stroke="black" points="287,-893.75 292,-893.76"/>
<polyline fill="none" stroke="black" points="390,-894.25 385,-894.24"/>
<polygon fill="black" stroke="black" points="384.01,-889.24 383.99,-899.24 381.99,-899.24 382.01,-889.24 384.01,-889.24"/>
<polyline fill="none" stroke="black" points="385,-894.24 380,-894.24"/>
<polygon fill="black" stroke="black" points="379.01,-889.24 378.99,-899.24 376.99,-899.23 377.01,-889.23 379.01,-889.24"/>
<polyline fill="none" stroke="black" points="380,-894.24 375,-894.23"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.EnvironmentStatistics -->
<g id="node24" class="node">
<title>aind_behavior_vr_foraging.task_logic.EnvironmentStatistics</title>
<g id="a_node24"><a xlink:title="aind_behavior_vr_foraging.task_logic.EnvironmentStatistics&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="867.5,-862.75 867.5,-884.75 1083.5,-884.75 1083.5,-862.75 867.5,-862.75"/>
<text text-anchor="start" x="908.38" y="-869.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">EnvironmentStatistics</text>
<polygon fill="none" stroke="black" points="867.5,-841.75 867.5,-862.75 966.5,-862.75 966.5,-841.75 867.5,-841.75"/>
<text text-anchor="start" x="895.62" y="-846.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">patches</text>
<polygon fill="none" stroke="black" points="966.5,-841.75 966.5,-862.75 1083.5,-862.75 1083.5,-841.75 966.5,-841.75"/>
<text text-anchor="start" x="969.12" y="-846.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[PatchStatistics]</text>
<polygon fill="none" stroke="black" points="867.5,-820.75 867.5,-841.75 966.5,-841.75 966.5,-820.75 867.5,-820.75"/>
<text text-anchor="start" x="870.5" y="-825.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">transition_matrix</text>
<polygon fill="none" stroke="black" points="966.5,-820.75 966.5,-841.75 1083.5,-841.75 1083.5,-820.75 966.5,-820.75"/>
<text text-anchor="start" x="998.75" y="-825.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Matrix2D</text>
<polygon fill="none" stroke="black" points="867.5,-799.75 867.5,-820.75 966.5,-820.75 966.5,-799.75 867.5,-799.75"/>
<text text-anchor="start" x="889.62" y="-804.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">first_state</text>
<polygon fill="none" stroke="black" points="966.5,-799.75 966.5,-820.75 1083.5,-820.75 1083.5,-799.75 966.5,-799.75"/>
<text text-anchor="start" x="989.75" y="-804.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[int]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters&#45;&gt;aind_behavior_vr_foraging.task_logic.EnvironmentStatistics -->
<g id="edge38" class="edge">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters:e&#45;&gt;aind_behavior_vr_foraging.task_logic.EnvironmentStatistics:w</title>
<path fill="none" stroke="black" d="M689.93,-810.04C763.86,-814.37 780.4,-866.79 851.95,-873.13"/>
<polyline fill="none" stroke="black" points="680,-809.75 685,-809.89"/>
<polyline fill="none" stroke="black" points="685,-809.89 690,-810.04"/>
<polyline fill="none" stroke="black" points="866.5,-873.75 861.5,-873.54"/>
<polygon fill="black" stroke="black" points="860.72,-868.5 860.29,-878.49 858.29,-878.4 858.72,-868.41 860.72,-868.5"/>
<polyline fill="none" stroke="black" points="861.5,-873.54 856.51,-873.32"/>
<polygon fill="black" stroke="black" points="855.72,-868.28 855.3,-878.27 853.3,-878.19 853.73,-868.2 855.72,-868.28"/>
<polyline fill="none" stroke="black" points="856.51,-873.32 851.51,-873.11"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.NumericalUpdater -->
<g id="node25" class="node">
<title>aind_behavior_vr_foraging.task_logic.NumericalUpdater</title>
<g id="a_node25"><a xlink:title="aind_behavior_vr_foraging.task_logic.NumericalUpdater&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="858.5,-1076.25 858.5,-1098.25 1092.5,-1098.25 1092.5,-1076.25 858.5,-1076.25"/>
<text text-anchor="start" x="918.88" y="-1082.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">NumericalUpdater</text>
<polygon fill="none" stroke="black" points="858.5,-1055.25 858.5,-1076.25 924.5,-1076.25 924.5,-1055.25 858.5,-1055.25"/>
<text text-anchor="start" x="865.25" y="-1059.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">operation</text>
<polygon fill="none" stroke="black" points="924.5,-1055.25 924.5,-1076.25 1092.5,-1076.25 1092.5,-1055.25 924.5,-1055.25"/>
<text text-anchor="start" x="930.12" y="-1059.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">NumericalUpdaterOperation</text>
<polygon fill="none" stroke="black" points="858.5,-1034.25 858.5,-1055.25 924.5,-1055.25 924.5,-1034.25 858.5,-1034.25"/>
<text text-anchor="start" x="861.12" y="-1038.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">parameters</text>
<polygon fill="none" stroke="black" points="924.5,-1034.25 924.5,-1055.25 1092.5,-1055.25 1092.5,-1034.25 924.5,-1034.25"/>
<text text-anchor="start" x="927.12" y="-1038.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">NumericalUpdaterParameters</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters&#45;&gt;aind_behavior_vr_foraging.task_logic.NumericalUpdater -->
<g id="edge39" class="edge">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters:e&#45;&gt;aind_behavior_vr_foraging.task_logic.NumericalUpdater:w</title>
<path fill="none" stroke="black" d="M689.73,-831.2C808.93,-842.64 729.24,-1068.07 842.32,-1086.11"/>
<polyline fill="none" stroke="black" points="680,-830.75 684.99,-830.98"/>
<polyline fill="none" stroke="black" points="684.99,-830.98 689.99,-831.21"/>
<polygon fill="black" stroke="black" points="847.19,-1086.47 856.83,-1091.71 852.51,-1086.87 856.83,-1087.2 856.83,-1087.2 856.83,-1087.2 852.51,-1086.87 857.5,-1082.74 847.19,-1086.47"/>
<polyline fill="none" stroke="black" points="845.98,-1086.38 840.99,-1086.01"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperationControl -->
<g id="node26" class="node">
<title>aind_behavior_vr_foraging.task_logic.OperationControl</title>
<g id="a_node26"><a xlink:title="aind_behavior_vr_foraging.task_logic.OperationControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="840.5,-387.25 840.5,-409.25 1110.5,-409.25 1110.5,-387.25 840.5,-387.25"/>
<text text-anchor="start" x="920.75" y="-393.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">OperationControl</text>
<polygon fill="none" stroke="black" points="840.5,-366.25 840.5,-387.25 979.5,-387.25 979.5,-366.25 840.5,-366.25"/>
<text text-anchor="start" x="843.25" y="-370.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">movable_spout_control</text>
<polygon fill="none" stroke="black" points="979.5,-366.25 979.5,-387.25 1110.5,-387.25 1110.5,-366.25 979.5,-366.25"/>
<text text-anchor="start" x="982.38" y="-370.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">MovableSpoutControl</text>
<polygon fill="none" stroke="black" points="840.5,-345.25 840.5,-366.25 979.5,-366.25 979.5,-345.25 840.5,-345.25"/>
<text text-anchor="start" x="872.88" y="-349.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">odor_control</text>
<polygon fill="none" stroke="black" points="979.5,-345.25 979.5,-366.25 1110.5,-366.25 1110.5,-345.25 979.5,-345.25"/>
<text text-anchor="start" x="1008.62" y="-349.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">OdorControl</text>
<polygon fill="none" stroke="black" points="840.5,-324.25 840.5,-345.25 979.5,-345.25 979.5,-324.25 840.5,-324.25"/>
<text text-anchor="start" x="863.88" y="-328.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">position_control</text>
<polygon fill="none" stroke="black" points="979.5,-324.25 979.5,-345.25 1110.5,-345.25 1110.5,-324.25 979.5,-324.25"/>
<text text-anchor="start" x="1000.75" y="-328.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">PositionControl</text>
<polygon fill="none" stroke="black" points="840.5,-303.25 840.5,-324.25 979.5,-324.25 979.5,-303.25 840.5,-303.25"/>
<text text-anchor="start" x="871" y="-307.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">audio_control</text>
<polygon fill="none" stroke="black" points="979.5,-303.25 979.5,-324.25 1110.5,-324.25 1110.5,-303.25 979.5,-303.25"/>
<text text-anchor="start" x="1006.38" y="-307.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">AudioControl</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters&#45;&gt;aind_behavior_vr_foraging.task_logic.OperationControl -->
<g id="edge40" class="edge">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters:e&#45;&gt;aind_behavior_vr_foraging.task_logic.OperationControl:w</title>
<path fill="none" stroke="black" d="M689.57,-767.37C846.74,-754.57 674.99,-419.49 824.54,-399.21"/>
<polyline fill="none" stroke="black" points="680,-767.75 685,-767.55"/>
<polyline fill="none" stroke="black" points="685,-767.55 689.99,-767.36"/>
<polyline fill="none" stroke="black" points="839.5,-398.25 834.51,-398.57"/>
<polygon fill="black" stroke="black" points="833.19,-393.64 833.83,-403.62 831.84,-403.75 831.2,-393.77 833.19,-393.64"/>
<polyline fill="none" stroke="black" points="834.51,-398.57 829.52,-398.89"/>
<polygon fill="black" stroke="black" points="828.2,-393.96 828.84,-403.94 826.85,-404.07 826.21,-394.09 828.2,-393.96"/>
<polyline fill="none" stroke="black" points="829.52,-398.89 824.53,-399.21"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.TaskModeSettings -->
<g id="node27" class="node">
<title>aind_behavior_vr_foraging.task_logic.TaskModeSettings</title>
<g id="a_node27"><a xlink:title="aind_behavior_vr_foraging.task_logic.TaskModeSettings&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/#rootmodel&#45;and&#45;custom&#45;root&#45;types&#10;&#10;A Pydantic `BaseModel` for the root object of the model.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;root: The root object of the model.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a RootModel.&#10; &#160;&#160;&#160;__pydantic_private__: Private fields in the model.&#10; &#160;&#160;&#160;__pydantic_extra__: Extra fields in the model.&#10;">
<polygon fill="none" stroke="black" points="788,-714.75 788,-736.75 1163,-736.75 1163,-714.75 788,-714.75"/>
<text text-anchor="start" x="917.75" y="-721.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">TaskModeSettings</text>
<polygon fill="none" stroke="black" points="788,-693.75 788,-714.75 817,-714.75 817,-693.75 788,-693.75"/>
<text text-anchor="start" x="790.88" y="-698.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">root</text>
<polygon fill="none" stroke="black" points="817,-693.75 817,-714.75 1163,-714.75 1163,-693.75 817,-693.75"/>
<text text-anchor="start" x="819.75" y="-698.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Union[HabituationSettings, ForagingSettings, DebugSettings]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters&#45;&gt;aind_behavior_vr_foraging.task_logic.TaskModeSettings -->
<g id="edge41" class="edge">
<title>aind_behavior_vr_foraging.task_logic.AindVrForagingTaskParameters:e&#45;&gt;aind_behavior_vr_foraging.task_logic.TaskModeSettings:w</title>
<path fill="none" stroke="black" d="M689.76,-788.04C730.59,-781.85 735.3,-736.89 773.12,-727.48"/>
<polyline fill="none" stroke="black" points="680,-788.75 684.99,-788.39"/>
<polyline fill="none" stroke="black" points="684.99,-788.39 689.97,-788.03"/>
<polyline fill="none" stroke="black" points="788,-725.75 783.03,-726.33"/>
<polygon fill="black" stroke="black" points="781.46,-721.47 782.62,-731.41 780.63,-731.64 779.48,-721.71 781.46,-721.47"/>
<polyline fill="none" stroke="black" points="783.03,-726.33 778.07,-726.9"/>
<polygon fill="black" stroke="black" points="776.5,-722.05 777.65,-731.98 775.66,-732.22 774.51,-722.28 776.5,-722.05"/>
<polyline fill="none" stroke="black" points="778.07,-726.9 773.1,-727.48"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Matrix2D -->
<g id="node33" class="node">
<title>aind_behavior_vr_foraging.task_logic.Matrix2D</title>
<g id="a_node33"><a xlink:title="aind_behavior_vr_foraging.task_logic.Matrix2D&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1366,-820.75 1366,-842.75 1485,-842.75 1485,-820.75 1366,-820.75"/>
<text text-anchor="start" x="1395.5" y="-827.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Matrix2D</text>
<polygon fill="none" stroke="black" points="1366,-799.75 1366,-820.75 1395,-820.75 1395,-799.75 1366,-799.75"/>
<text text-anchor="start" x="1368.88" y="-804.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">data</text>
<polygon fill="none" stroke="black" points="1395,-799.75 1395,-820.75 1485,-820.75 1485,-799.75 1395,-799.75"/>
<text text-anchor="start" x="1397.62" y="-804.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[List[float]]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.EnvironmentStatistics&#45;&gt;aind_behavior_vr_foraging.task_logic.Matrix2D -->
<g id="edge44" class="edge">
<title>aind_behavior_vr_foraging.task_logic.EnvironmentStatistics:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Matrix2D:w</title>
<path fill="none" stroke="black" d="M1094.17,-831.25C1205.97,-831.27 1240.72,-831.71 1350.17,-831.75"/>
<polyline fill="none" stroke="black" points="1084.5,-831.25 1089.5,-831.25"/>
<polyline fill="none" stroke="black" points="1089.5,-831.25 1094.5,-831.25"/>
<polyline fill="none" stroke="black" points="1365,-831.75 1360,-831.75"/>
<polygon fill="black" stroke="black" points="1359,-826.75 1359,-836.75 1357,-836.75 1357,-826.75 1359,-826.75"/>
<polyline fill="none" stroke="black" points="1360,-831.75 1355,-831.75"/>
<polygon fill="black" stroke="black" points="1354,-826.75 1354,-836.75 1352,-836.75 1352,-826.75 1354,-826.75"/>
<polyline fill="none" stroke="black" points="1355,-831.75 1350,-831.75"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchStatistics -->
<g id="node34" class="node">
<title>aind_behavior_vr_foraging.task_logic.PatchStatistics</title>
<g id="a_node34"><a xlink:title="aind_behavior_vr_foraging.task_logic.PatchStatistics&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1271,-983.75 1271,-1005.75 1580,-1005.75 1580,-983.75 1271,-983.75"/>
<text text-anchor="start" x="1380.12" y="-990.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">PatchStatistics</text>
<polygon fill="none" stroke="black" points="1271,-962.75 1271,-983.75 1401,-983.75 1401,-962.75 1271,-962.75"/>
<text text-anchor="start" x="1323.25" y="-967.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">label</text>
<polygon fill="none" stroke="black" points="1401,-962.75 1401,-983.75 1580,-983.75 1580,-962.75 1401,-962.75"/>
<text text-anchor="start" x="1483.38" y="-967.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="1271,-941.75 1271,-962.75 1401,-962.75 1401,-941.75 1271,-941.75"/>
<text text-anchor="start" x="1304.5" y="-946.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">state_index</text>
<polygon fill="none" stroke="black" points="1401,-941.75 1401,-962.75 1580,-962.75 1580,-941.75 1401,-941.75"/>
<text text-anchor="start" x="1483.75" y="-946.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="1271,-920.75 1271,-941.75 1401,-941.75 1401,-920.75 1271,-920.75"/>
<text text-anchor="start" x="1283.5" y="-925.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">odor_specification</text>
<polygon fill="none" stroke="black" points="1401,-920.75 1401,-941.75 1580,-941.75 1580,-920.75 1401,-920.75"/>
<text text-anchor="start" x="1410.62" y="-925.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[OdorSpecification]</text>
<polygon fill="none" stroke="black" points="1271,-899.75 1271,-920.75 1401,-920.75 1401,-899.75 1271,-899.75"/>
<text text-anchor="start" x="1277.88" y="-904.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">reward_specification</text>
<polygon fill="none" stroke="black" points="1401,-899.75 1401,-920.75 1580,-920.75 1580,-899.75 1401,-899.75"/>
<text text-anchor="start" x="1403.88" y="-904.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[RewardSpecification]</text>
<polygon fill="none" stroke="black" points="1271,-878.75 1271,-899.75 1401,-899.75 1401,-878.75 1271,-878.75"/>
<text text-anchor="start" x="1273.75" y="-883.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">virtual_site_generation</text>
<polygon fill="none" stroke="black" points="1401,-878.75 1401,-899.75 1580,-899.75 1580,-878.75 1401,-878.75"/>
<text text-anchor="start" x="1431.25" y="-883.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteGeneration</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.EnvironmentStatistics&#45;&gt;aind_behavior_vr_foraging.task_logic.PatchStatistics -->
<g id="edge45" class="edge">
<title>aind_behavior_vr_foraging.task_logic.EnvironmentStatistics:e&#45;&gt;aind_behavior_vr_foraging.task_logic.PatchStatistics:w</title>
<path fill="none" stroke="black" d="M1094.48,-852.71C1182.49,-861.08 1171.69,-980.8 1255.74,-993.64"/>
<polyline fill="none" stroke="black" points="1084.5,-852.25 1089.49,-852.48"/>
<polyline fill="none" stroke="black" points="1089.49,-852.48 1094.49,-852.71"/>
<polygon fill="black" stroke="black" points="1260.69,-994 1270.34,-999.21 1266.01,-994.39 1270.33,-994.7 1270.33,-994.7 1270.33,-994.7 1266.01,-994.39 1270.99,-990.24 1260.69,-994"/>
<polyline fill="none" stroke="black" points="1259.48,-993.91 1254.49,-993.55"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.NumericalUpdaterParameters -->
<g id="node41" class="node">
<title>aind_behavior_vr_foraging.task_logic.NumericalUpdaterParameters</title>
<g id="a_node41"><a xlink:title="aind_behavior_vr_foraging.task_logic.NumericalUpdaterParameters&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1330.5,-1146.75 1330.5,-1168.75 1520.5,-1168.75 1520.5,-1146.75 1330.5,-1146.75"/>
<text text-anchor="start" x="1333.25" y="-1153.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">NumericalUpdaterParameters</text>
<polygon fill="none" stroke="black" points="1330.5,-1125.75 1330.5,-1146.75 1445.5,-1146.75 1445.5,-1125.75 1330.5,-1125.75"/>
<text text-anchor="start" x="1355.75" y="-1130.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">initial_value</text>
<polygon fill="none" stroke="black" points="1445.5,-1125.75 1445.5,-1146.75 1520.5,-1146.75 1520.5,-1125.75 1445.5,-1125.75"/>
<text text-anchor="start" x="1470.62" y="-1130.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1330.5,-1104.75 1330.5,-1125.75 1445.5,-1125.75 1445.5,-1104.75 1330.5,-1104.75"/>
<text text-anchor="start" x="1361" y="-1109.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">increment</text>
<polygon fill="none" stroke="black" points="1445.5,-1104.75 1445.5,-1125.75 1520.5,-1125.75 1520.5,-1104.75 1445.5,-1104.75"/>
<text text-anchor="start" x="1470.62" y="-1109.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1330.5,-1083.75 1330.5,-1104.75 1445.5,-1104.75 1445.5,-1083.75 1330.5,-1083.75"/>
<text text-anchor="start" x="1359.12" y="-1088.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">decrement</text>
<polygon fill="none" stroke="black" points="1445.5,-1083.75 1445.5,-1104.75 1520.5,-1104.75 1520.5,-1083.75 1445.5,-1083.75"/>
<text text-anchor="start" x="1470.62" y="-1088.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1330.5,-1062.75 1330.5,-1083.75 1445.5,-1083.75 1445.5,-1062.75 1330.5,-1062.75"/>
<text text-anchor="start" x="1362.5" y="-1067.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">minimum</text>
<polygon fill="none" stroke="black" points="1445.5,-1062.75 1445.5,-1083.75 1520.5,-1083.75 1520.5,-1062.75 1445.5,-1062.75"/>
<text text-anchor="start" x="1470.62" y="-1067.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1330.5,-1041.75 1330.5,-1062.75 1445.5,-1062.75 1445.5,-1041.75 1330.5,-1041.75"/>
<text text-anchor="start" x="1361" y="-1046.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">maximum</text>
<polygon fill="none" stroke="black" points="1445.5,-1041.75 1445.5,-1062.75 1520.5,-1062.75 1520.5,-1041.75 1445.5,-1041.75"/>
<text text-anchor="start" x="1470.62" y="-1046.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.NumericalUpdater&#45;&gt;aind_behavior_vr_foraging.task_logic.NumericalUpdaterParameters -->
<g id="edge49" class="edge">
<title>aind_behavior_vr_foraging.task_logic.NumericalUpdater:e&#45;&gt;aind_behavior_vr_foraging.task_logic.NumericalUpdaterParameters:w</title>
<path fill="none" stroke="black" d="M1103.44,-1045.04C1205.19,-1050.99 1215.8,-1148.19 1314.61,-1157.1"/>
<polyline fill="none" stroke="black" points="1093.5,-1044.75 1098.5,-1044.89"/>
<polyline fill="none" stroke="black" points="1098.5,-1044.89 1103.5,-1045.04"/>
<polyline fill="none" stroke="black" points="1329.5,-1157.75 1324.5,-1157.53"/>
<polygon fill="black" stroke="black" points="1323.72,-1152.49 1323.29,-1162.48 1321.29,-1162.39 1321.73,-1152.4 1323.72,-1152.49"/>
<polyline fill="none" stroke="black" points="1324.5,-1157.53 1319.51,-1157.31"/>
<polygon fill="black" stroke="black" points="1318.73,-1152.27 1318.29,-1162.26 1316.29,-1162.18 1316.73,-1152.19 1318.73,-1152.27"/>
<polyline fill="none" stroke="black" points="1319.51,-1157.31 1314.51,-1157.09"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.AudioControl -->
<g id="node28" class="node">
<title>aind_behavior_vr_foraging.task_logic.AudioControl</title>
<g id="a_node28"><a xlink:title="aind_behavior_vr_foraging.task_logic.AudioControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1380,-61.25 1380,-83.25 1471,-83.25 1471,-61.25 1380,-61.25"/>
<text text-anchor="start" x="1383.88" y="-67.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">AudioControl</text>
<polygon fill="none" stroke="black" points="1380,-40.25 1380,-61.25 1441,-61.25 1441,-40.25 1380,-40.25"/>
<text text-anchor="start" x="1387.62" y="-44.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">duration</text>
<polygon fill="none" stroke="black" points="1441,-40.25 1441,-61.25 1471,-61.25 1471,-40.25 1441,-40.25"/>
<text text-anchor="start" x="1443.62" y="-44.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1380,-19.25 1380,-40.25 1441,-40.25 1441,-19.25 1380,-19.25"/>
<text text-anchor="start" x="1382.75" y="-23.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">frequency</text>
<polygon fill="none" stroke="black" points="1441,-19.25 1441,-40.25 1471,-40.25 1471,-19.25 1441,-19.25"/>
<text text-anchor="start" x="1443.62" y="-23.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperationControl&#45;&gt;aind_behavior_vr_foraging.task_logic.AudioControl -->
<g id="edge50" class="edge">
<title>aind_behavior_vr_foraging.task_logic.OperationControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.AudioControl:w</title>
<path fill="none" stroke="black" d="M1121.44,-313.38C1226.42,-305.24 1176.05,-165.47 1271,-101.25 1307.75,-76.4 1325.34,-72.81 1364.04,-72.32"/>
<polyline fill="none" stroke="black" points="1111.5,-313.75 1116.5,-313.56"/>
<polyline fill="none" stroke="black" points="1116.5,-313.56 1121.49,-313.38"/>
<polyline fill="none" stroke="black" points="1379,-72.25 1374,-72.27"/>
<polygon fill="black" stroke="black" points="1372.98,-67.28 1373.02,-77.28 1371.02,-77.29 1370.98,-67.29 1372.98,-67.28"/>
<polyline fill="none" stroke="black" points="1374,-72.27 1369,-72.3"/>
<polygon fill="black" stroke="black" points="1367.98,-67.3 1368.02,-77.3 1366.02,-77.31 1365.98,-67.31 1367.98,-67.3"/>
<polyline fill="none" stroke="black" points="1369,-72.3 1364,-72.32"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.MovableSpoutControl -->
<g id="node39" class="node">
<title>aind_behavior_vr_foraging.task_logic.MovableSpoutControl</title>
<g id="a_node39"><a xlink:title="aind_behavior_vr_foraging.task_logic.MovableSpoutControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1303.5,-466.75 1303.5,-488.75 1547.5,-488.75 1547.5,-466.75 1303.5,-466.75"/>
<text text-anchor="start" x="1357.62" y="-473.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">MovableSpoutControl</text>
<polygon fill="none" stroke="black" points="1303.5,-445.75 1303.5,-466.75 1473.5,-466.75 1473.5,-445.75 1303.5,-445.75"/>
<text text-anchor="start" x="1367.12" y="-450.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">enabled</text>
<polygon fill="none" stroke="black" points="1473.5,-445.75 1473.5,-466.75 1547.5,-466.75 1547.5,-445.75 1473.5,-445.75"/>
<text text-anchor="start" x="1497.75" y="-450.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
<polygon fill="none" stroke="black" points="1303.5,-424.75 1303.5,-445.75 1473.5,-445.75 1473.5,-424.75 1303.5,-424.75"/>
<text text-anchor="start" x="1306.38" y="-429.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">time_to_collect_after_reward</text>
<polygon fill="none" stroke="black" points="1473.5,-424.75 1473.5,-445.75 1547.5,-445.75 1547.5,-424.75 1473.5,-424.75"/>
<text text-anchor="start" x="1498.12" y="-429.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1303.5,-403.75 1303.5,-424.75 1473.5,-424.75 1473.5,-403.75 1303.5,-403.75"/>
<text text-anchor="start" x="1352.5" y="-408.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">servo_motor</text>
<polygon fill="none" stroke="black" points="1473.5,-403.75 1473.5,-424.75 1547.5,-424.75 1547.5,-403.75 1473.5,-403.75"/>
<text text-anchor="start" x="1476.38" y="-408.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">ServoMotor</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperationControl&#45;&gt;aind_behavior_vr_foraging.task_logic.MovableSpoutControl -->
<g id="edge51" class="edge">
<title>aind_behavior_vr_foraging.task_logic.OperationControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.MovableSpoutControl:w</title>
<path fill="none" stroke="black" d="M1121.28,-377.12C1202.68,-383.35 1209.32,-467.38 1287.59,-476.88"/>
<polyline fill="none" stroke="black" points="1111.5,-376.75 1116.5,-376.94"/>
<polyline fill="none" stroke="black" points="1116.5,-376.94 1121.49,-377.12"/>
<polyline fill="none" stroke="black" points="1302.5,-477.75 1297.51,-477.46"/>
<polygon fill="black" stroke="black" points="1296.8,-472.41 1296.22,-482.39 1294.22,-482.27 1294.81,-472.29 1296.8,-472.41"/>
<polyline fill="none" stroke="black" points="1297.51,-477.46 1292.52,-477.17"/>
<polygon fill="black" stroke="black" points="1291.81,-472.12 1291.23,-482.1 1289.23,-481.98 1289.81,-472 1291.81,-472.12"/>
<polyline fill="none" stroke="black" points="1292.52,-477.17 1287.53,-476.87"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OdorControl -->
<g id="node42" class="node">
<title>aind_behavior_vr_foraging.task_logic.OdorControl</title>
<g id="a_node42"><a xlink:title="aind_behavior_vr_foraging.task_logic.OdorControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1335,-345.25 1335,-367.25 1516,-367.25 1516,-345.25 1335,-345.25"/>
<text text-anchor="start" x="1385.75" y="-351.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">OdorControl</text>
<polygon fill="none" stroke="black" points="1335,-324.25 1335,-345.25 1485,-345.25 1485,-324.25 1335,-324.25"/>
<text text-anchor="start" x="1347.38" y="-328.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">valve_max_open_time</text>
<polygon fill="none" stroke="black" points="1485,-324.25 1485,-345.25 1516,-345.25 1516,-324.25 1485,-324.25"/>
<text text-anchor="start" x="1488.12" y="-328.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1335,-303.25 1335,-324.25 1485,-324.25 1485,-303.25 1335,-303.25"/>
<text text-anchor="start" x="1362.75" y="-307.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">target_total_flow</text>
<polygon fill="none" stroke="black" points="1485,-303.25 1485,-324.25 1516,-324.25 1516,-303.25 1485,-303.25"/>
<text text-anchor="start" x="1488.12" y="-307.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1335,-282.25 1335,-303.25 1485,-303.25 1485,-282.25 1335,-282.25"/>
<text text-anchor="start" x="1337.62" y="-286.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">use_channel_3_as_carrier</text>
<polygon fill="none" stroke="black" points="1485,-282.25 1485,-303.25 1516,-303.25 1516,-282.25 1485,-282.25"/>
<text text-anchor="start" x="1487.75" y="-286.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
<polygon fill="none" stroke="black" points="1335,-261.25 1335,-282.25 1485,-282.25 1485,-261.25 1335,-261.25"/>
<text text-anchor="start" x="1361.25" y="-265.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">target_odor_flow</text>
<polygon fill="none" stroke="black" points="1485,-261.25 1485,-282.25 1516,-282.25 1516,-261.25 1485,-261.25"/>
<text text-anchor="start" x="1488.12" y="-265.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperationControl&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorControl -->
<g id="edge52" class="edge">
<title>aind_behavior_vr_foraging.task_logic.OperationControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorControl:w</title>
<path fill="none" stroke="black" d="M1121.39,-355.75C1207.29,-355.78 1235.48,-356.2 1319.19,-356.25"/>
<polyline fill="none" stroke="black" points="1111.5,-355.75 1116.5,-355.75"/>
<polyline fill="none" stroke="black" points="1116.5,-355.75 1121.5,-355.75"/>
<polyline fill="none" stroke="black" points="1334,-356.25 1329,-356.25"/>
<polygon fill="black" stroke="black" points="1328,-351.25 1328,-361.25 1326,-361.25 1326,-351.25 1328,-351.25"/>
<polyline fill="none" stroke="black" points="1329,-356.25 1324,-356.25"/>
<polygon fill="black" stroke="black" points="1323,-351.25 1323,-361.25 1321,-361.25 1321,-351.25 1323,-351.25"/>
<polyline fill="none" stroke="black" points="1324,-356.25 1319,-356.25"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PositionControl -->
<g id="node45" class="node">
<title>aind_behavior_vr_foraging.task_logic.PositionControl</title>
<g id="a_node45"><a xlink:title="aind_behavior_vr_foraging.task_logic.PositionControl&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1332.5,-203.25 1332.5,-225.25 1518.5,-225.25 1518.5,-203.25 1332.5,-203.25"/>
<text text-anchor="start" x="1377.12" y="-209.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">PositionControl</text>
<polygon fill="none" stroke="black" points="1332.5,-182.25 1332.5,-203.25 1467.5,-203.25 1467.5,-182.25 1332.5,-182.25"/>
<text text-anchor="start" x="1388.75" y="-186.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">gain</text>
<polygon fill="none" stroke="black" points="1467.5,-182.25 1467.5,-203.25 1518.5,-203.25 1518.5,-182.25 1467.5,-182.25"/>
<text text-anchor="start" x="1470.5" y="-186.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Vector3</text>
<polygon fill="none" stroke="black" points="1332.5,-161.25 1332.5,-182.25 1467.5,-182.25 1467.5,-161.25 1332.5,-161.25"/>
<text text-anchor="start" x="1359.5" y="-165.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">initial_position</text>
<polygon fill="none" stroke="black" points="1467.5,-161.25 1467.5,-182.25 1518.5,-182.25 1518.5,-161.25 1467.5,-161.25"/>
<text text-anchor="start" x="1470.5" y="-165.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Vector3</text>
<polygon fill="none" stroke="black" points="1332.5,-140.25 1332.5,-161.25 1467.5,-161.25 1467.5,-140.25 1332.5,-140.25"/>
<text text-anchor="start" x="1335.5" y="-144.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">frequency_filter_cutoff</text>
<polygon fill="none" stroke="black" points="1467.5,-140.25 1467.5,-161.25 1518.5,-161.25 1518.5,-140.25 1467.5,-140.25"/>
<text text-anchor="start" x="1480.62" y="-144.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1332.5,-119.25 1332.5,-140.25 1467.5,-140.25 1467.5,-119.25 1332.5,-119.25"/>
<text text-anchor="start" x="1348.62" y="-123.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">velocity_threshold</text>
<polygon fill="none" stroke="black" points="1467.5,-119.25 1467.5,-140.25 1518.5,-140.25 1518.5,-119.25 1467.5,-119.25"/>
<text text-anchor="start" x="1480.62" y="-123.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperationControl&#45;&gt;aind_behavior_vr_foraging.task_logic.PositionControl -->
<g id="edge53" class="edge">
<title>aind_behavior_vr_foraging.task_logic.OperationControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.PositionControl:w</title>
<path fill="none" stroke="black" d="M1121.32,-334.43C1218.05,-327.89 1223.11,-224.85 1316.7,-215"/>
<polyline fill="none" stroke="black" points="1111.5,-334.75 1116.5,-334.58"/>
<polyline fill="none" stroke="black" points="1116.5,-334.58 1121.49,-334.42"/>
<polyline fill="none" stroke="black" points="1331.5,-214.25 1326.51,-214.5"/>
<polygon fill="black" stroke="black" points="1325.25,-209.56 1325.76,-219.55 1323.76,-219.65 1323.26,-209.66 1325.25,-209.56"/>
<polyline fill="none" stroke="black" points="1326.51,-214.5 1321.51,-214.76"/>
<polygon fill="black" stroke="black" points="1320.26,-209.82 1320.77,-219.8 1318.77,-219.91 1318.26,-209.92 1320.26,-209.82"/>
<polyline fill="none" stroke="black" points="1321.51,-214.76 1316.52,-215.01"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.DebugSettings -->
<g id="node30" class="node">
<title>aind_behavior_vr_foraging.task_logic.DebugSettings</title>
<g id="a_node30"><a xlink:title="aind_behavior_vr_foraging.task_logic.DebugSettings&#10;&#10;This class is not currently implemented&#10;">
<polygon fill="none" stroke="black" points="1297,-666.75 1297,-688.75 1554,-688.75 1554,-666.75 1297,-666.75"/>
<text text-anchor="start" x="1381.25" y="-673.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">DebugSettings</text>
<polygon fill="none" stroke="black" points="1297,-645.75 1297,-666.75 1393,-666.75 1393,-645.75 1297,-645.75"/>
<text text-anchor="start" x="1314.25" y="-650.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_mode</text>
<polygon fill="none" stroke="black" points="1393,-645.75 1393,-666.75 1554,-666.75 1554,-645.75 1393,-645.75"/>
<text text-anchor="start" x="1395.88" y="-650.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[TaskMode.DEBUG]</text>
<polygon fill="none" stroke="black" points="1297,-624.75 1297,-645.75 1393,-645.75 1393,-624.75 1297,-624.75"/>
<text text-anchor="start" x="1299.62" y="-629.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">visual_corridors</text>
<polygon fill="none" stroke="black" points="1393,-624.75 1393,-645.75 1554,-645.75 1554,-624.75 1393,-624.75"/>
<text text-anchor="start" x="1416.88" y="-629.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[VisualCorridor]</text>
<polygon fill="none" stroke="black" points="1297,-603.75 1297,-624.75 1393,-624.75 1393,-603.75 1297,-603.75"/>
<text text-anchor="start" x="1312" y="-608.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">virtual_sites</text>
<polygon fill="none" stroke="black" points="1393,-603.75 1393,-624.75 1554,-624.75 1554,-603.75 1393,-603.75"/>
<text text-anchor="start" x="1429.62" y="-608.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">List[VirtualSite]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.TaskModeSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.DebugSettings -->
<g id="edge68" class="edge">
<title>aind_behavior_vr_foraging.task_logic.TaskModeSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.DebugSettings:w</title>
<path fill="none" stroke="black" d="M1172.8,-704C1219.96,-701.58 1236.13,-681.99 1281.06,-678.34"/>
<polyline fill="none" stroke="black" points="1163,-704.25 1168,-704.12"/>
<polyline fill="none" stroke="black" points="1168,-704.12 1173,-704"/>
<polyline fill="none" stroke="black" points="1296,-677.75 1291,-677.95"/>
<polygon fill="black" stroke="black" points="1289.81,-672.99 1290.2,-682.98 1288.2,-683.06 1287.81,-673.07 1289.81,-672.99"/>
<polyline fill="none" stroke="black" points="1291,-677.95 1286.01,-678.14"/>
<polygon fill="black" stroke="black" points="1284.81,-673.18 1285.2,-683.18 1283.21,-683.26 1282.81,-673.26 1284.81,-673.18"/>
<polyline fill="none" stroke="black" points="1286.01,-678.14 1281.01,-678.34"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.ForagingSettings -->
<g id="node35" class="node">
<title>aind_behavior_vr_foraging.task_logic.ForagingSettings</title>
<g id="a_node35"><a xlink:title="aind_behavior_vr_foraging.task_logic.ForagingSettings&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1298.5,-545.75 1298.5,-567.75 1552.5,-567.75 1552.5,-545.75 1298.5,-545.75"/>
<text text-anchor="start" x="1373" y="-552.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ForagingSettings</text>
<polygon fill="none" stroke="black" points="1298.5,-524.75 1298.5,-545.75 1365.5,-545.75 1365.5,-524.75 1298.5,-524.75"/>
<text text-anchor="start" x="1301.25" y="-529.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_mode</text>
<polygon fill="none" stroke="black" points="1365.5,-524.75 1365.5,-545.75 1552.5,-545.75 1552.5,-524.75 1365.5,-524.75"/>
<text text-anchor="start" x="1368.25" y="-529.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[TaskMode.FORAGING]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.TaskModeSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.ForagingSettings -->
<g id="edge69" class="edge">
<title>aind_behavior_vr_foraging.task_logic.TaskModeSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.ForagingSettings:w</title>
<path fill="none" stroke="black" d="M1172.81,-703.59C1243.83,-693.62 1216.35,-573.28 1282.88,-558.28"/>
<polyline fill="none" stroke="black" points="1163,-704.25 1167.99,-703.92"/>
<polyline fill="none" stroke="black" points="1167.99,-703.92 1172.98,-703.58"/>
<polyline fill="none" stroke="black" points="1297.5,-556.75 1292.53,-557.27"/>
<polygon fill="black" stroke="black" points="1291.01,-552.4 1292.05,-562.35 1290.06,-562.56 1289.02,-552.61 1291.01,-552.4"/>
<polyline fill="none" stroke="black" points="1292.53,-557.27 1287.55,-557.79"/>
<polygon fill="black" stroke="black" points="1286.04,-552.92 1287.08,-562.87 1285.09,-563.08 1284.05,-553.13 1286.04,-552.92"/>
<polyline fill="none" stroke="black" points="1287.55,-557.79 1282.58,-558.31"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.HabituationSettings -->
<g id="node36" class="node">
<title>aind_behavior_vr_foraging.task_logic.HabituationSettings</title>
<g id="a_node36"><a xlink:title="aind_behavior_vr_foraging.task_logic.HabituationSettings&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2097,-729.75 2097,-751.75 2425,-751.75 2425,-729.75 2097,-729.75"/>
<text text-anchor="start" x="2200.62" y="-736.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">HabituationSettings</text>
<polygon fill="none" stroke="black" points="2097,-708.75 2097,-729.75 2216,-729.75 2216,-708.75 2097,-708.75"/>
<text text-anchor="start" x="2125.75" y="-713.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">task_mode</text>
<polygon fill="none" stroke="black" points="2216,-708.75 2216,-729.75 2425,-729.75 2425,-708.75 2216,-708.75"/>
<text text-anchor="start" x="2218.88" y="-713.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[TaskMode.HABITUATION]</text>
<polygon fill="none" stroke="black" points="2097,-687.75 2097,-708.75 2216,-708.75 2216,-687.75 2097,-687.75"/>
<text text-anchor="start" x="2101.38" y="-692.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">distance_to_reward</text>
<polygon fill="none" stroke="black" points="2216,-687.75 2216,-708.75 2425,-708.75 2425,-687.75 2216,-687.75"/>
<text text-anchor="start" x="2287.88" y="-692.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
<polygon fill="none" stroke="black" points="2097,-666.75 2097,-687.75 2216,-687.75 2216,-666.75 2097,-666.75"/>
<text text-anchor="start" x="2099.88" y="-671.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">render_specification</text>
<polygon fill="none" stroke="black" points="2216,-666.75 2216,-687.75 2425,-687.75 2425,-666.75 2216,-666.75"/>
<text text-anchor="start" x="2263.88" y="-671.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RenderSpecification</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.TaskModeSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.HabituationSettings -->
<g id="edge70" class="edge">
<title>aind_behavior_vr_foraging.task_logic.TaskModeSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.HabituationSettings:w</title>
<path fill="none" stroke="black" d="M1172.89,-704.33C1300.78,-706.14 1941.63,-738.04 2082.11,-740.59"/>
<polyline fill="none" stroke="black" points="1163,-704.25 1168,-704.29"/>
<polyline fill="none" stroke="black" points="1168,-704.29 1173,-704.33"/>
<polyline fill="none" stroke="black" points="2097,-740.75 2092,-740.7"/>
<polygon fill="black" stroke="black" points="2091.05,-735.69 2090.95,-745.68 2088.95,-745.66 2089.05,-735.66 2091.05,-735.69"/>
<polyline fill="none" stroke="black" points="2092,-740.7 2087,-740.64"/>
<polygon fill="black" stroke="black" points="2086.05,-735.63 2085.95,-745.63 2083.95,-745.61 2084.06,-735.61 2086.05,-735.63"/>
<polyline fill="none" stroke="black" points="2087,-740.64 2082,-740.59"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.ConstantFunction -->
<g id="node29" class="node">
<title>aind_behavior_vr_foraging.task_logic.ConstantFunction</title>
<g id="a_node29"><a xlink:title="aind_behavior_vr_foraging.task_logic.ConstantFunction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4262,-563.25 4262,-585.25 4500,-585.25 4500,-563.25 4262,-563.25"/>
<text text-anchor="start" x="4326.25" y="-569.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ConstantFunction</text>
<polygon fill="none" stroke="black" points="4262,-542.25 4262,-563.25 4345,-563.25 4345,-542.25 4262,-542.25"/>
<text text-anchor="start" x="4264.88" y="-546.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">function_type</text>
<polygon fill="none" stroke="black" points="4345,-542.25 4345,-563.25 4500,-563.25 4500,-542.25 4345,-542.25"/>
<text text-anchor="start" x="4347.88" y="-546.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;ConstantFunction&#39;]</text>
<polygon fill="none" stroke="black" points="4262,-521.25 4262,-542.25 4345,-542.25 4345,-521.25 4262,-521.25"/>
<text text-anchor="start" x="4289.25" y="-525.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">value</text>
<polygon fill="none" stroke="black" points="4345,-521.25 4345,-542.25 4500,-542.25 4500,-521.25 4345,-521.25"/>
<text text-anchor="start" x="4410.12" y="-525.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSite -->
<g id="node31" class="node">
<title>aind_behavior_vr_foraging.task_logic.VirtualSite</title>
<g id="a_node31"><a xlink:title="aind_behavior_vr_foraging.task_logic.VirtualSite&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1688,-1073.75 1688,-1095.75 1989,-1095.75 1989,-1073.75 1688,-1073.75"/>
<text text-anchor="start" x="1805.5" y="-1080.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">VirtualSite</text>
<polygon fill="none" stroke="black" points="1688,-1052.75 1688,-1073.75 1810,-1073.75 1810,-1052.75 1688,-1052.75"/>
<text text-anchor="start" x="1743.75" y="-1057.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">id</text>
<polygon fill="none" stroke="black" points="1810,-1052.75 1810,-1073.75 1989,-1073.75 1989,-1052.75 1810,-1052.75"/>
<text text-anchor="start" x="1892.75" y="-1057.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="1688,-1031.75 1688,-1052.75 1810,-1052.75 1810,-1031.75 1688,-1031.75"/>
<text text-anchor="start" x="1736.25" y="-1036.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">label</text>
<polygon fill="none" stroke="black" points="1810,-1031.75 1810,-1052.75 1989,-1052.75 1989,-1031.75 1810,-1031.75"/>
<text text-anchor="start" x="1852.25" y="-1036.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteLabels</text>
<polygon fill="none" stroke="black" points="1688,-1010.75 1688,-1031.75 1810,-1031.75 1810,-1010.75 1688,-1010.75"/>
<text text-anchor="start" x="1732.5" y="-1015.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">length</text>
<polygon fill="none" stroke="black" points="1810,-1010.75 1810,-1031.75 1989,-1031.75 1989,-1010.75 1810,-1010.75"/>
<text text-anchor="start" x="1887.12" y="-1015.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1688,-989.75 1688,-1010.75 1810,-1010.75 1810,-989.75 1688,-989.75"/>
<text text-anchor="start" x="1710.75" y="-994.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">start_position</text>
<polygon fill="none" stroke="black" points="1810,-989.75 1810,-1010.75 1989,-1010.75 1989,-989.75 1810,-989.75"/>
<text text-anchor="start" x="1887.12" y="-994.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1688,-968.75 1688,-989.75 1810,-989.75 1810,-968.75 1688,-968.75"/>
<text text-anchor="start" x="1696.5" y="-973.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">odor_specification</text>
<polygon fill="none" stroke="black" points="1810,-968.75 1810,-989.75 1989,-989.75 1989,-968.75 1810,-968.75"/>
<text text-anchor="start" x="1819.62" y="-973.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[OdorSpecification]</text>
<polygon fill="none" stroke="black" points="1688,-947.75 1688,-968.75 1810,-968.75 1810,-947.75 1688,-947.75"/>
<text text-anchor="start" x="1690.88" y="-952.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">reward_specification</text>
<polygon fill="none" stroke="black" points="1810,-947.75 1810,-968.75 1989,-968.75 1989,-947.75 1810,-947.75"/>
<text text-anchor="start" x="1812.88" y="-952.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[RewardSpecification]</text>
<polygon fill="none" stroke="black" points="1688,-926.75 1688,-947.75 1810,-947.75 1810,-926.75 1688,-926.75"/>
<text text-anchor="start" x="1692.38" y="-931.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">render_specification</text>
<polygon fill="none" stroke="black" points="1810,-926.75 1810,-947.75 1989,-947.75 1989,-926.75 1810,-926.75"/>
<text text-anchor="start" x="1842.88" y="-931.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RenderSpecification</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.DebugSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSite -->
<g id="edge42" class="edge">
<title>aind_behavior_vr_foraging.task_logic.DebugSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSite:w</title>
<path fill="none" stroke="black" d="M1564.81,-614.59C1757.97,-628.48 1488.45,-1061.88 1672.66,-1083.88"/>
<polyline fill="none" stroke="black" points="1555,-614.25 1560,-614.42"/>
<polyline fill="none" stroke="black" points="1560,-614.42 1564.99,-614.6"/>
<polygon fill="black" stroke="black" points="1677.68,-1084.17 1687.41,-1089.22 1683.01,-1084.47 1687.33,-1084.71 1687.33,-1084.71 1687.33,-1084.71 1683.01,-1084.47 1687.92,-1080.24 1677.68,-1084.17"/>
<polyline fill="none" stroke="black" points="1676.47,-1084.1 1671.47,-1083.82"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VisualCorridor -->
<g id="node32" class="node">
<title>aind_behavior_vr_foraging.task_logic.VisualCorridor</title>
<g id="a_node32"><a xlink:title="aind_behavior_vr_foraging.task_logic.VisualCorridor&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1757.5,-623.75 1757.5,-645.75 1919.5,-645.75 1919.5,-623.75 1757.5,-623.75"/>
<text text-anchor="start" x="1792" y="-630.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">VisualCorridor</text>
<polygon fill="none" stroke="black" points="1757.5,-602.75 1757.5,-623.75 1839.5,-623.75 1839.5,-602.75 1757.5,-602.75"/>
<text text-anchor="start" x="1793.25" y="-607.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">id</text>
<polygon fill="none" stroke="black" points="1839.5,-602.75 1839.5,-623.75 1919.5,-623.75 1919.5,-602.75 1839.5,-602.75"/>
<text text-anchor="start" x="1872.75" y="-607.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="1757.5,-581.75 1757.5,-602.75 1839.5,-602.75 1839.5,-581.75 1757.5,-581.75"/>
<text text-anchor="start" x="1788" y="-586.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">size</text>
<polygon fill="none" stroke="black" points="1839.5,-581.75 1839.5,-602.75 1919.5,-602.75 1919.5,-581.75 1839.5,-581.75"/>
<text text-anchor="start" x="1867.88" y="-586.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Size</text>
<polygon fill="none" stroke="black" points="1757.5,-560.75 1757.5,-581.75 1839.5,-581.75 1839.5,-560.75 1757.5,-560.75"/>
<text text-anchor="start" x="1760.25" y="-565.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">start_position</text>
<polygon fill="none" stroke="black" points="1839.5,-560.75 1839.5,-581.75 1919.5,-581.75 1919.5,-560.75 1839.5,-560.75"/>
<text text-anchor="start" x="1867.12" y="-565.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1757.5,-539.75 1757.5,-560.75 1839.5,-560.75 1839.5,-539.75 1757.5,-539.75"/>
<text text-anchor="start" x="1782" y="-544.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">length</text>
<polygon fill="none" stroke="black" points="1839.5,-539.75 1839.5,-560.75 1919.5,-560.75 1919.5,-539.75 1839.5,-539.75"/>
<text text-anchor="start" x="1867.12" y="-544.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1757.5,-518.75 1757.5,-539.75 1839.5,-539.75 1839.5,-518.75 1757.5,-518.75"/>
<text text-anchor="start" x="1776.75" y="-523.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">textures</text>
<polygon fill="none" stroke="black" points="1839.5,-518.75 1839.5,-539.75 1919.5,-539.75 1919.5,-518.75 1839.5,-518.75"/>
<text text-anchor="start" x="1842.38" y="-523.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">WallTextures</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.DebugSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.VisualCorridor -->
<g id="edge43" class="edge">
<title>aind_behavior_vr_foraging.task_logic.DebugSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VisualCorridor:w</title>
<path fill="none" stroke="black" d="M1564.7,-635.25C1641.21,-635.22 1667.05,-634.81 1741.03,-634.76"/>
<polyline fill="none" stroke="black" points="1555,-635.25 1560,-635.25"/>
<polyline fill="none" stroke="black" points="1560,-635.25 1565,-635.25"/>
<polygon fill="black" stroke="black" points="1746.17,-634.75 1756.17,-639.25 1751.5,-634.75 1755.83,-634.75 1755.83,-634.75 1755.83,-634.75 1751.5,-634.75 1756.16,-630.25 1746.17,-634.75"/>
<polyline fill="none" stroke="black" points="1744.95,-634.75 1739.95,-634.76"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RenderSpecification -->
<g id="node37" class="node">
<title>aind_behavior_vr_foraging.task_logic.RenderSpecification</title>
<g id="a_node37"><a xlink:title="aind_behavior_vr_foraging.task_logic.RenderSpecification&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3000.5,-668.75 3000.5,-690.75 3138.5,-690.75 3138.5,-668.75 3000.5,-668.75"/>
<text text-anchor="start" x="3007.62" y="-675.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">RenderSpecification</text>
<polygon fill="none" stroke="black" points="3000.5,-647.75 3000.5,-668.75 3051.5,-668.75 3051.5,-647.75 3000.5,-647.75"/>
<text text-anchor="start" x="3003.5" y="-652.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">contrast</text>
<polygon fill="none" stroke="black" points="3051.5,-647.75 3051.5,-668.75 3138.5,-668.75 3138.5,-647.75 3051.5,-647.75"/>
<text text-anchor="start" x="3054.12" y="-652.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[float]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSite&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification -->
<g id="edge73" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSite:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification:w</title>
<path fill="none" stroke="black" d="M1998.89,-937.3C2186.51,-939.22 2263.77,-994.63 2425,-891.25 2504.18,-840.48 2452.77,-758.35 2533,-709.25 2705.87,-603.45 2787.71,-676.01 2984.51,-679.61"/>
<polyline fill="none" stroke="black" points="1989,-937.25 1994,-937.28"/>
<polyline fill="none" stroke="black" points="1994,-937.28 1999,-937.3"/>
<polyline fill="none" stroke="black" points="2999.5,-679.75 2994.5,-679.7"/>
<polygon fill="black" stroke="black" points="2993.55,-674.7 2993.45,-684.69 2991.45,-684.68 2991.55,-674.68 2993.55,-674.7"/>
<polyline fill="none" stroke="black" points="2994.5,-679.7 2989.5,-679.66"/>
<polygon fill="black" stroke="black" points="2988.55,-674.65 2988.45,-684.65 2986.45,-684.63 2986.55,-674.63 2988.55,-674.65"/>
<polyline fill="none" stroke="black" points="2989.5,-679.66 2984.5,-679.61"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OdorSpecification -->
<g id="node43" class="node">
<title>aind_behavior_vr_foraging.task_logic.OdorSpecification</title>
<g id="a_node43"><a xlink:title="aind_behavior_vr_foraging.task_logic.OdorSpecification&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2202.5,-1201.25 2202.5,-1223.25 2319.5,-1223.25 2319.5,-1201.25 2202.5,-1201.25"/>
<text text-anchor="start" x="2205.5" y="-1207.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">OdorSpecification</text>
<polygon fill="none" stroke="black" points="2202.5,-1180.25 2202.5,-1201.25 2286.5,-1201.25 2286.5,-1180.25 2202.5,-1180.25"/>
<text text-anchor="start" x="2229.5" y="-1184.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">index</text>
<polygon fill="none" stroke="black" points="2286.5,-1180.25 2286.5,-1201.25 2319.5,-1201.25 2319.5,-1180.25 2286.5,-1180.25"/>
<text text-anchor="start" x="2296.25" y="-1184.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="2202.5,-1159.25 2202.5,-1180.25 2286.5,-1180.25 2286.5,-1159.25 2202.5,-1159.25"/>
<text text-anchor="start" x="2206.62" y="-1163.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">concentration</text>
<polygon fill="none" stroke="black" points="2286.5,-1159.25 2286.5,-1180.25 2319.5,-1180.25 2319.5,-1159.25 2286.5,-1159.25"/>
<text text-anchor="start" x="2290.62" y="-1163.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSite&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorSpecification -->
<g id="edge72" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSite:e&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorSpecification:w</title>
<path fill="none" stroke="black" d="M1998.82,-979.72C2067.45,-986.7 2043.97,-1069.09 2097,-1125.25 2133.71,-1164.13 2139.96,-1202.31 2182.76,-1210.6"/>
<polyline fill="none" stroke="black" points="1989,-979.25 1993.99,-979.49"/>
<polyline fill="none" stroke="black" points="1993.99,-979.49 1998.99,-979.73"/>
<polyline fill="none" stroke="black" points="2201.5,-1212.25 2196.52,-1211.81"/>
<polygon fill="black" stroke="black" points="2195.96,-1206.74 2195.08,-1216.7 2193.09,-1216.53 2193.97,-1206.57 2195.96,-1206.74"/>
<polyline fill="none" stroke="black" points="2196.52,-1211.81 2191.54,-1211.37"/>
<ellipse fill="none" stroke="black" cx="2187.06" cy="-1210.98" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardSpecification -->
<g id="node48" class="node">
<title>aind_behavior_vr_foraging.task_logic.RewardSpecification</title>
<g id="a_node48"><a xlink:title="aind_behavior_vr_foraging.task_logic.RewardSpecification&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2142.5,-1084.75 2142.5,-1106.75 2379.5,-1106.75 2379.5,-1084.75 2142.5,-1084.75"/>
<text text-anchor="start" x="2197.25" y="-1091.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">RewardSpecification</text>
<polygon fill="none" stroke="black" points="2142.5,-1063.75 2142.5,-1084.75 2239.5,-1084.75 2239.5,-1063.75 2142.5,-1063.75"/>
<text text-anchor="start" x="2152.75" y="-1068.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">operant_logic</text>
<polygon fill="none" stroke="black" points="2239.5,-1063.75 2239.5,-1084.75 2379.5,-1084.75 2379.5,-1063.75 2239.5,-1063.75"/>
<text text-anchor="start" x="2242.38" y="-1068.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Optional[OperantLogic]</text>
<polygon fill="none" stroke="black" points="2142.5,-1042.75 2142.5,-1063.75 2239.5,-1063.75 2239.5,-1042.75 2142.5,-1042.75"/>
<text text-anchor="start" x="2176.38" y="-1047.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">delay</text>
<polygon fill="none" stroke="black" points="2239.5,-1042.75 2239.5,-1063.75 2379.5,-1063.75 2379.5,-1042.75 2239.5,-1042.75"/>
<text text-anchor="start" x="2276.88" y="-1047.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
<polygon fill="none" stroke="black" points="2142.5,-1021.75 2142.5,-1042.75 2239.5,-1042.75 2239.5,-1021.75 2142.5,-1021.75"/>
<text text-anchor="start" x="2145.25" y="-1026.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">reward_function</text>
<polygon fill="none" stroke="black" points="2239.5,-1021.75 2239.5,-1042.75 2379.5,-1042.75 2379.5,-1021.75 2239.5,-1021.75"/>
<text text-anchor="start" x="2247.25" y="-1026.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">PatchRewardFunction</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSite&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardSpecification -->
<g id="edge74" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSite:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardSpecification:w</title>
<path fill="none" stroke="black" d="M1998.67,-958.8C2071.99,-967.53 2056.83,-1076.55 2122.86,-1093.53"/>
<polyline fill="none" stroke="black" points="1989,-958.25 1993.99,-958.54"/>
<polyline fill="none" stroke="black" points="1993.99,-958.54 1998.98,-958.82"/>
<polyline fill="none" stroke="black" points="2141.5,-1095.75 2136.54,-1095.16"/>
<polygon fill="black" stroke="black" points="2136.13,-1090.08 2134.95,-1100.01 2132.97,-1099.77 2134.15,-1089.84 2136.13,-1090.08"/>
<polyline fill="none" stroke="black" points="2136.54,-1095.16 2131.57,-1094.57"/>
<ellipse fill="none" stroke="black" cx="2127.1" cy="-1094.04" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Size -->
<g id="node52" class="node">
<title>aind_behavior_vr_foraging.task_logic.Size</title>
<g id="a_node52"><a xlink:title="aind_behavior_vr_foraging.task_logic.Size&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3874,-457.25 3874,-479.25 3943,-479.25 3943,-457.25 3874,-457.25"/>
<text text-anchor="start" x="3896.12" y="-463.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Size</text>
<polygon fill="none" stroke="black" points="3874,-436.25 3874,-457.25 3913,-457.25 3913,-436.25 3874,-436.25"/>
<text text-anchor="start" x="3878.12" y="-440.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">width</text>
<polygon fill="none" stroke="black" points="3913,-436.25 3913,-457.25 3943,-457.25 3943,-436.25 3913,-436.25"/>
<text text-anchor="start" x="3915.62" y="-440.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="3874,-415.25 3874,-436.25 3913,-436.25 3913,-415.25 3874,-415.25"/>
<text text-anchor="start" x="3877" y="-419.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">height</text>
<polygon fill="none" stroke="black" points="3913,-415.25 3913,-436.25 3943,-436.25 3943,-415.25 3913,-415.25"/>
<text text-anchor="start" x="3915.62" y="-419.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VisualCorridor&#45;&gt;aind_behavior_vr_foraging.task_logic.Size -->
<g id="edge80" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VisualCorridor:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Size:w</title>
<path fill="none" stroke="black" d="M1930.35,-592.25C2672.11,-592.26 2863.62,-592.92 3606,-513.25 3720.63,-500.95 3750.23,-470.92 3858.32,-468.42"/>
<polyline fill="none" stroke="black" points="1920.5,-592.25 1925.5,-592.25"/>
<polyline fill="none" stroke="black" points="1925.5,-592.25 1930.5,-592.25"/>
<polyline fill="none" stroke="black" points="3873,-468.25 3868,-468.31"/>
<polygon fill="black" stroke="black" points="3866.94,-463.32 3867.06,-473.32 3865.06,-473.34 3864.94,-463.34 3866.94,-463.32"/>
<polyline fill="none" stroke="black" points="3868,-468.31 3863,-468.36"/>
<polygon fill="black" stroke="black" points="3861.94,-463.38 3862.06,-473.37 3860.06,-473.4 3859.94,-463.4 3861.94,-463.38"/>
<polyline fill="none" stroke="black" points="3863,-468.36 3858,-468.42"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.WallTextures -->
<g id="node55" class="node">
<title>aind_behavior_vr_foraging.task_logic.WallTextures</title>
<g id="a_node55"><a xlink:title="aind_behavior_vr_foraging.task_logic.WallTextures&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2216.5,-515.25 2216.5,-537.25 2305.5,-537.25 2305.5,-515.25 2216.5,-515.25"/>
<text text-anchor="start" x="2219.38" y="-521.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">WallTextures</text>
<polygon fill="none" stroke="black" points="2216.5,-494.25 2216.5,-515.25 2257.5,-515.25 2257.5,-494.25 2216.5,-494.25"/>
<text text-anchor="start" x="2223.5" y="-498.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">floor</text>
<polygon fill="none" stroke="black" points="2257.5,-494.25 2257.5,-515.25 2305.5,-515.25 2305.5,-494.25 2257.5,-494.25"/>
<text text-anchor="start" x="2260.12" y="-498.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Texture</text>
<polygon fill="none" stroke="black" points="2216.5,-473.25 2216.5,-494.25 2257.5,-494.25 2257.5,-473.25 2216.5,-473.25"/>
<text text-anchor="start" x="2219.38" y="-477.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">ceiling</text>
<polygon fill="none" stroke="black" points="2257.5,-473.25 2257.5,-494.25 2305.5,-494.25 2305.5,-473.25 2257.5,-473.25"/>
<text text-anchor="start" x="2260.12" y="-477.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Texture</text>
<polygon fill="none" stroke="black" points="2216.5,-452.25 2216.5,-473.25 2257.5,-473.25 2257.5,-452.25 2216.5,-452.25"/>
<text text-anchor="start" x="2228.38" y="-456.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">left</text>
<polygon fill="none" stroke="black" points="2257.5,-452.25 2257.5,-473.25 2305.5,-473.25 2305.5,-452.25 2257.5,-452.25"/>
<text text-anchor="start" x="2260.12" y="-456.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Texture</text>
<polygon fill="none" stroke="black" points="2216.5,-431.25 2216.5,-452.25 2257.5,-452.25 2257.5,-431.25 2216.5,-431.25"/>
<text text-anchor="start" x="2224.62" y="-435.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">right</text>
<polygon fill="none" stroke="black" points="2257.5,-431.25 2257.5,-452.25 2305.5,-452.25 2305.5,-431.25 2257.5,-431.25"/>
<text text-anchor="start" x="2260.12" y="-435.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Texture</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VisualCorridor&#45;&gt;aind_behavior_vr_foraging.task_logic.WallTextures -->
<g id="edge81" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VisualCorridor:e&#45;&gt;aind_behavior_vr_foraging.task_logic.WallTextures:w</title>
<path fill="none" stroke="black" d="M1930.3,-529.24C2048.42,-529.11 2084.82,-526.47 2200.59,-526.26"/>
<polyline fill="none" stroke="black" points="1920.5,-529.25 1925.5,-529.25"/>
<polyline fill="none" stroke="black" points="1925.5,-529.25 1930.5,-529.24"/>
<polyline fill="none" stroke="black" points="2215.5,-526.25 2210.5,-526.25"/>
<polygon fill="black" stroke="black" points="2209.5,-521.26 2209.5,-531.26 2207.5,-531.26 2207.5,-521.26 2209.5,-521.26"/>
<polyline fill="none" stroke="black" points="2210.5,-526.25 2205.5,-526.26"/>
<polygon fill="black" stroke="black" points="2204.5,-521.26 2204.5,-531.26 2202.5,-531.26 2202.5,-521.26 2204.5,-521.26"/>
<polyline fill="none" stroke="black" points="2205.5,-526.26 2200.5,-526.26"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchStatistics&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorSpecification -->
<g id="edge57" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchStatistics:e&#45;&gt;aind_behavior_vr_foraging.task_logic.OdorSpecification:w</title>
<path fill="none" stroke="black" d="M1589.72,-931.7C1687.58,-941.18 1598.25,-1098.82 1688,-1162.25 1870.04,-1290.91 1966.73,-1216.67 2182.66,-1212.43"/>
<polyline fill="none" stroke="black" points="1580,-931.25 1584.99,-931.48"/>
<polyline fill="none" stroke="black" points="1584.99,-931.48 1589.99,-931.71"/>
<polyline fill="none" stroke="black" points="2201.5,-1212.25 2196.5,-1212.3"/>
<polygon fill="black" stroke="black" points="2195.45,-1207.31 2195.55,-1217.31 2193.55,-1217.33 2193.45,-1207.33 2195.45,-1207.31"/>
<polyline fill="none" stroke="black" points="2196.5,-1212.3 2191.5,-1212.35"/>
<ellipse fill="none" stroke="black" cx="2187" cy="-1212.39" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchStatistics&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardSpecification -->
<g id="edge58" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchStatistics:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardSpecification:w</title>
<path fill="none" stroke="black" d="M1589.88,-910.77C1677.15,-920.46 1603.12,-1063.14 1688,-1114.25 1855.33,-1215 1934.67,-1103.3 2122.66,-1096.11"/>
<polyline fill="none" stroke="black" points="1580,-910.25 1584.99,-910.51"/>
<polyline fill="none" stroke="black" points="1584.99,-910.51 1589.99,-910.77"/>
<polyline fill="none" stroke="black" points="2141.5,-1095.75 2136.5,-1095.85"/>
<polygon fill="black" stroke="black" points="2135.41,-1090.87 2135.6,-1100.86 2133.6,-1100.9 2133.41,-1090.9 2135.41,-1090.87"/>
<polyline fill="none" stroke="black" points="2136.5,-1095.85 2131.5,-1095.94"/>
<ellipse fill="none" stroke="black" cx="2127" cy="-1096.03" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration -->
<g id="node49" class="node">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration</title>
<g id="a_node49"><a xlink:title="aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1744,-868.75 1744,-890.75 1933,-890.75 1933,-868.75 1744,-868.75"/>
<text text-anchor="start" x="1771" y="-875.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">VirtualSiteGeneration</text>
<polygon fill="none" stroke="black" points="1744,-847.75 1744,-868.75 1814,-868.75 1814,-847.75 1744,-847.75"/>
<text text-anchor="start" x="1753.88" y="-852.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">inter_site</text>
<polygon fill="none" stroke="black" points="1814,-847.75 1814,-868.75 1933,-868.75 1933,-847.75 1814,-847.75"/>
<text text-anchor="start" x="1816.88" y="-852.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteGenerator</text>
<polygon fill="none" stroke="black" points="1744,-826.75 1744,-847.75 1814,-847.75 1814,-826.75 1744,-826.75"/>
<text text-anchor="start" x="1747.88" y="-831.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">inter_patch</text>
<polygon fill="none" stroke="black" points="1814,-826.75 1814,-847.75 1933,-847.75 1933,-826.75 1814,-826.75"/>
<text text-anchor="start" x="1816.88" y="-831.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteGenerator</text>
<polygon fill="none" stroke="black" points="1744,-805.75 1744,-826.75 1814,-826.75 1814,-805.75 1744,-805.75"/>
<text text-anchor="start" x="1746.75" y="-810.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">reward_site</text>
<polygon fill="none" stroke="black" points="1814,-805.75 1814,-826.75 1933,-826.75 1933,-805.75 1814,-805.75"/>
<text text-anchor="start" x="1816.88" y="-810.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteGenerator</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchStatistics&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration -->
<g id="edge59" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchStatistics:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration:w</title>
<path fill="none" stroke="black" d="M1589.86,-889.19C1649.45,-888.44 1670.61,-881.02 1728.02,-879.89"/>
<polyline fill="none" stroke="black" points="1580,-889.25 1585,-889.22"/>
<polyline fill="none" stroke="black" points="1585,-889.22 1590,-889.19"/>
<polyline fill="none" stroke="black" points="1743,-879.75 1738,-879.8"/>
<polygon fill="black" stroke="black" points="1736.95,-874.81 1737.05,-884.81 1735.05,-884.83 1734.95,-874.83 1736.95,-874.81"/>
<polyline fill="none" stroke="black" points="1738,-879.8 1733,-879.85"/>
<polygon fill="black" stroke="black" points="1731.95,-874.86 1732.05,-884.85 1730.05,-884.87 1729.95,-874.87 1731.95,-874.86"/>
<polyline fill="none" stroke="black" points="1733,-879.85 1728,-879.89"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.HabituationSettings&#45;&gt;aind_behavior_services.task_logic.distributions.Distribution -->
<g id="edge46" class="edge">
<title>aind_behavior_vr_foraging.task_logic.HabituationSettings:e&#45;&gt;aind_behavior_services.task_logic.distributions.Distribution:w</title>
<path fill="none" stroke="black" d="M2434.68,-698.69C2576.31,-712.22 2384.8,-1031.46 2518.09,-1052.65"/>
<polyline fill="none" stroke="black" points="2425,-698.25 2429.99,-698.48"/>
<polyline fill="none" stroke="black" points="2429.99,-698.48 2434.99,-698.71"/>
<polyline fill="none" stroke="black" points="2533,-1053.75 2528.01,-1053.38"/>
<polygon fill="black" stroke="black" points="2527.39,-1048.32 2526.65,-1058.29 2524.65,-1058.15 2525.39,-1048.17 2527.39,-1048.32"/>
<polyline fill="none" stroke="black" points="2528.01,-1053.38 2523.03,-1053.01"/>
<polygon fill="black" stroke="black" points="2522.4,-1047.95 2521.66,-1057.92 2519.67,-1057.78 2520.4,-1047.8 2522.4,-1047.95"/>
<polyline fill="none" stroke="black" points="2523.03,-1053.01 2518.04,-1052.64"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.HabituationSettings&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification -->
<g id="edge47" class="edge">
<title>aind_behavior_vr_foraging.task_logic.HabituationSettings:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification:w</title>
<path fill="none" stroke="black" d="M2435,-677.25C2677.11,-677.31 2744.84,-679.65 2984.59,-679.75"/>
<polyline fill="none" stroke="black" points="2425,-677.25 2430,-677.25"/>
<polyline fill="none" stroke="black" points="2430,-677.25 2435,-677.25"/>
<polyline fill="none" stroke="black" points="2999.5,-679.75 2994.5,-679.75"/>
<polygon fill="black" stroke="black" points="2993.5,-674.75 2993.5,-684.75 2991.5,-684.75 2991.5,-674.75 2993.5,-674.75"/>
<polyline fill="none" stroke="black" points="2994.5,-679.75 2989.5,-679.75"/>
<polygon fill="black" stroke="black" points="2988.5,-674.75 2988.5,-684.75 2986.5,-684.75 2986.5,-674.75 2988.5,-674.75"/>
<polyline fill="none" stroke="black" points="2989.5,-679.75 2984.5,-679.75"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.LinearFunction -->
<g id="node38" class="node">
<title>aind_behavior_vr_foraging.task_logic.LinearFunction</title>
<g id="a_node38"><a xlink:title="aind_behavior_vr_foraging.task_logic.LinearFunction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4270,-462.75 4270,-484.75 4492,-484.75 4492,-462.75 4270,-462.75"/>
<text text-anchor="start" x="4333.75" y="-469.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">LinearFunction</text>
<polygon fill="none" stroke="black" points="4270,-441.75 4270,-462.75 4353,-462.75 4353,-441.75 4270,-441.75"/>
<text text-anchor="start" x="4272.88" y="-446.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">function_type</text>
<polygon fill="none" stroke="black" points="4353,-441.75 4353,-462.75 4492,-462.75 4492,-441.75 4353,-441.75"/>
<text text-anchor="start" x="4355.75" y="-446.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;LinearFunction&#39;]</text>
<polygon fill="none" stroke="black" points="4270,-420.75 4270,-441.75 4353,-441.75 4353,-420.75 4270,-420.75"/>
<text text-anchor="start" x="4287.88" y="-425.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">mininum</text>
<polygon fill="none" stroke="black" points="4353,-420.75 4353,-441.75 4492,-441.75 4492,-420.75 4353,-420.75"/>
<text text-anchor="start" x="4410.12" y="-425.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4270,-399.75 4270,-420.75 4353,-420.75 4353,-399.75 4270,-399.75"/>
<text text-anchor="start" x="4284.5" y="-404.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">maximum</text>
<polygon fill="none" stroke="black" points="4353,-399.75 4353,-420.75 4492,-420.75 4492,-399.75 4353,-399.75"/>
<text text-anchor="start" x="4410.12" y="-404.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4270,-378.75 4270,-399.75 4353,-399.75 4353,-378.75 4270,-378.75"/>
<text text-anchor="start" x="4308.5" y="-383.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">a</text>
<polygon fill="none" stroke="black" points="4353,-378.75 4353,-399.75 4492,-399.75 4492,-378.75 4353,-378.75"/>
<text text-anchor="start" x="4410.12" y="-383.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4270,-357.75 4270,-378.75 4353,-378.75 4353,-357.75 4270,-357.75"/>
<text text-anchor="start" x="4307.75" y="-362.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">b</text>
<polygon fill="none" stroke="black" points="4353,-357.75 4353,-378.75 4492,-378.75 4492,-357.75 4353,-357.75"/>
<text text-anchor="start" x="4410.12" y="-362.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.ServoMotor -->
<g id="node40" class="node">
<title>aind_behavior_vr_foraging.task_logic.ServoMotor</title>
<g id="a_node40"><a xlink:title="aind_behavior_vr_foraging.task_logic.ServoMotor&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1762.5,-403.25 1762.5,-425.25 1914.5,-425.25 1914.5,-403.25 1762.5,-403.25"/>
<text text-anchor="start" x="1801.38" y="-409.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">ServoMotor</text>
<polygon fill="none" stroke="black" points="1762.5,-382.25 1762.5,-403.25 1895.5,-403.25 1895.5,-382.25 1762.5,-382.25"/>
<text text-anchor="start" x="1811" y="-386.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">period</text>
<polygon fill="none" stroke="black" points="1895.5,-382.25 1895.5,-403.25 1914.5,-403.25 1914.5,-382.25 1895.5,-382.25"/>
<text text-anchor="start" x="1898.25" y="-386.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="1762.5,-361.25 1762.5,-382.25 1895.5,-382.25 1895.5,-361.25 1762.5,-361.25"/>
<text text-anchor="start" x="1773.88" y="-365.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">min_pulse_duration</text>
<polygon fill="none" stroke="black" points="1895.5,-361.25 1895.5,-382.25 1914.5,-382.25 1914.5,-361.25 1895.5,-361.25"/>
<text text-anchor="start" x="1898.25" y="-365.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="1762.5,-340.25 1762.5,-361.25 1895.5,-361.25 1895.5,-340.25 1762.5,-340.25"/>
<text text-anchor="start" x="1772.38" y="-344.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">max_pulse_duration</text>
<polygon fill="none" stroke="black" points="1895.5,-340.25 1895.5,-361.25 1914.5,-361.25 1914.5,-340.25 1895.5,-340.25"/>
<text text-anchor="start" x="1898.25" y="-344.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="1762.5,-319.25 1762.5,-340.25 1895.5,-340.25 1895.5,-319.25 1762.5,-319.25"/>
<text text-anchor="start" x="1765.25" y="-323.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">default_pulse_duration</text>
<polygon fill="none" stroke="black" points="1895.5,-319.25 1895.5,-340.25 1914.5,-340.25 1914.5,-319.25 1895.5,-319.25"/>
<text text-anchor="start" x="1898.25" y="-323.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">int</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.MovableSpoutControl&#45;&gt;aind_behavior_vr_foraging.task_logic.ServoMotor -->
<g id="edge48" class="edge">
<title>aind_behavior_vr_foraging.task_logic.MovableSpoutControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.ServoMotor:w</title>
<path fill="none" stroke="black" d="M1558.49,-414.25C1640.07,-414.25 1667.19,-414.25 1746.61,-414.25"/>
<polyline fill="none" stroke="black" points="1548.5,-414.25 1553.5,-414.25"/>
<polyline fill="none" stroke="black" points="1553.5,-414.25 1558.5,-414.25"/>
<polyline fill="none" stroke="black" points="1761.5,-414.25 1756.5,-414.25"/>
<polygon fill="black" stroke="black" points="1755.5,-409.25 1755.5,-419.25 1753.5,-419.25 1753.5,-409.25 1755.5,-409.25"/>
<polyline fill="none" stroke="black" points="1756.5,-414.25 1751.5,-414.25"/>
<polygon fill="black" stroke="black" points="1750.5,-409.25 1750.5,-419.25 1748.5,-419.25 1748.5,-409.25 1750.5,-409.25"/>
<polyline fill="none" stroke="black" points="1751.5,-414.25 1746.5,-414.25"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.OperantLogic -->
<g id="node44" class="node">
<title>aind_behavior_vr_foraging.task_logic.OperantLogic</title>
<g id="a_node44"><a xlink:title="aind_behavior_vr_foraging.task_logic.OperantLogic&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2980,-1185.25 2980,-1207.25 3159,-1207.25 3159,-1185.25 2980,-1185.25"/>
<text text-anchor="start" x="3026.75" y="-1191.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">OperantLogic</text>
<polygon fill="none" stroke="black" points="2980,-1164.25 2980,-1185.25 3128,-1185.25 3128,-1164.25 2980,-1164.25"/>
<text text-anchor="start" x="3024.75" y="-1168.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">is_operant</text>
<polygon fill="none" stroke="black" points="3128,-1164.25 3128,-1185.25 3159,-1185.25 3159,-1164.25 3128,-1164.25"/>
<text text-anchor="start" x="3130.75" y="-1168.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">bool</text>
<polygon fill="none" stroke="black" points="2980,-1143.25 2980,-1164.25 3128,-1164.25 3128,-1143.25 2980,-1143.25"/>
<text text-anchor="start" x="3015" y="-1147.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">stop_duration</text>
<polygon fill="none" stroke="black" points="3128,-1143.25 3128,-1164.25 3159,-1164.25 3159,-1143.25 3128,-1143.25"/>
<text text-anchor="start" x="3131.12" y="-1147.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="2980,-1122.25 2980,-1143.25 3128,-1143.25 3128,-1122.25 2980,-1122.25"/>
<text text-anchor="start" x="2988" y="-1126.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">time_to_collect_reward</text>
<polygon fill="none" stroke="black" points="3128,-1122.25 3128,-1143.25 3159,-1143.25 3159,-1122.25 3128,-1122.25"/>
<text text-anchor="start" x="3131.12" y="-1126.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="2980,-1101.25 2980,-1122.25 3128,-1122.25 3128,-1101.25 2980,-1101.25"/>
<text text-anchor="start" x="2982.75" y="-1105.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">grace_distance_threshold</text>
<polygon fill="none" stroke="black" points="3128,-1101.25 3128,-1122.25 3159,-1122.25 3159,-1101.25 3128,-1101.25"/>
<text text-anchor="start" x="3131.12" y="-1105.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Vector3 -->
<g id="node50" class="node">
<title>aind_behavior_vr_foraging.task_logic.Vector3</title>
<g id="a_node50"><a xlink:title="aind_behavior_vr_foraging.task_logic.Vector3&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1811.5,-171.75 1811.5,-193.75 1865.5,-193.75 1865.5,-171.75 1811.5,-171.75"/>
<text text-anchor="start" x="1814.12" y="-178.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Vector3</text>
<polygon fill="none" stroke="black" points="1811.5,-150.75 1811.5,-171.75 1829.5,-171.75 1829.5,-150.75 1811.5,-150.75"/>
<text text-anchor="start" x="1817.12" y="-155.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">x</text>
<polygon fill="none" stroke="black" points="1829.5,-150.75 1829.5,-171.75 1865.5,-171.75 1865.5,-150.75 1829.5,-150.75"/>
<text text-anchor="start" x="1835.12" y="-155.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1811.5,-129.75 1811.5,-150.75 1829.5,-150.75 1829.5,-129.75 1811.5,-129.75"/>
<text text-anchor="start" x="1817.12" y="-134.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">y</text>
<polygon fill="none" stroke="black" points="1829.5,-129.75 1829.5,-150.75 1865.5,-150.75 1865.5,-129.75 1829.5,-129.75"/>
<text text-anchor="start" x="1835.12" y="-134.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="1811.5,-108.75 1811.5,-129.75 1829.5,-129.75 1829.5,-108.75 1811.5,-108.75"/>
<text text-anchor="start" x="1817.5" y="-113.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">z</text>
<polygon fill="none" stroke="black" points="1829.5,-108.75 1829.5,-129.75 1865.5,-129.75 1865.5,-108.75 1829.5,-108.75"/>
<text text-anchor="start" x="1835.12" y="-113.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PositionControl&#45;&gt;aind_behavior_vr_foraging.task_logic.Vector3 -->
<g id="edge60" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PositionControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Vector3:w</title>
<path fill="none" stroke="black" d="M1529.17,-192.73C1645.74,-192.27 1681.53,-183.5 1795.78,-182.79"/>
<polyline fill="none" stroke="black" points="1519.5,-192.75 1524.5,-192.74"/>
<polyline fill="none" stroke="black" points="1524.5,-192.74 1529.5,-192.73"/>
<polyline fill="none" stroke="black" points="1810.5,-182.75 1805.5,-182.77"/>
<polygon fill="black" stroke="black" points="1804.48,-177.77 1804.52,-187.77 1802.52,-187.77 1802.48,-177.77 1804.48,-177.77"/>
<polyline fill="none" stroke="black" points="1805.5,-182.77 1800.5,-182.78"/>
<polygon fill="black" stroke="black" points="1799.48,-177.78 1799.52,-187.78 1797.52,-187.79 1797.48,-177.79 1799.48,-177.78"/>
<polyline fill="none" stroke="black" points="1800.5,-182.78 1795.5,-182.8"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PositionControl&#45;&gt;aind_behavior_vr_foraging.task_logic.Vector3 -->
<g id="edge61" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PositionControl:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Vector3:w</title>
<path fill="none" stroke="black" d="M1529.17,-171.77C1645.76,-172.28 1681.52,-181.93 1795.78,-182.7"/>
<polyline fill="none" stroke="black" points="1519.5,-171.75 1524.5,-171.76"/>
<polyline fill="none" stroke="black" points="1524.5,-171.76 1529.5,-171.77"/>
<polyline fill="none" stroke="black" points="1810.5,-182.75 1805.5,-182.73"/>
<polygon fill="black" stroke="black" points="1804.52,-177.73 1804.48,-187.73 1802.48,-187.72 1802.52,-177.72 1804.52,-177.73"/>
<polyline fill="none" stroke="black" points="1805.5,-182.73 1800.5,-182.72"/>
<polygon fill="black" stroke="black" points="1799.52,-177.71 1799.48,-187.71 1797.48,-187.71 1797.52,-177.71 1799.52,-177.71"/>
<polyline fill="none" stroke="black" points="1800.5,-182.72 1795.5,-182.7"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchRewardFunction -->
<g id="node46" class="node">
<title>aind_behavior_vr_foraging.task_logic.PatchRewardFunction</title>
<g id="a_node46"><a xlink:title="aind_behavior_vr_foraging.task_logic.PatchRewardFunction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2978,-811.25 2978,-833.25 3161,-833.25 3161,-811.25 2978,-811.25"/>
<text text-anchor="start" x="3000.5" y="-817.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">PatchRewardFunction</text>
<polygon fill="none" stroke="black" points="2978,-790.25 2978,-811.25 3062,-811.25 3062,-790.25 2978,-790.25"/>
<text text-anchor="start" x="2999.38" y="-794.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">amount</text>
<polygon fill="none" stroke="black" points="3062,-790.25 3062,-811.25 3161,-811.25 3161,-790.25 3062,-790.25"/>
<text text-anchor="start" x="3065" y="-794.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RewardFunction</text>
<polygon fill="none" stroke="black" points="2978,-769.25 2978,-790.25 3062,-790.25 3062,-769.25 2978,-769.25"/>
<text text-anchor="start" x="2990" y="-773.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">probability</text>
<polygon fill="none" stroke="black" points="3062,-769.25 3062,-790.25 3161,-790.25 3161,-769.25 3062,-769.25"/>
<text text-anchor="start" x="3065" y="-773.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RewardFunction</text>
<polygon fill="none" stroke="black" points="2978,-748.25 2978,-769.25 3062,-769.25 3062,-748.25 2978,-748.25"/>
<text text-anchor="start" x="2996.38" y="-752.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">available</text>
<polygon fill="none" stroke="black" points="3062,-748.25 3062,-769.25 3161,-769.25 3161,-748.25 3062,-748.25"/>
<text text-anchor="start" x="3065" y="-752.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RewardFunction</text>
<polygon fill="none" stroke="black" points="2978,-727.25 2978,-748.25 3062,-748.25 3062,-727.25 2978,-727.25"/>
<text text-anchor="start" x="2980.62" y="-731.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">depletion_rule</text>
<polygon fill="none" stroke="black" points="3062,-727.25 3062,-748.25 3161,-748.25 3161,-727.25 3062,-727.25"/>
<text text-anchor="start" x="3072.12" y="-731.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">DepletionRule</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardFunction -->
<g id="node47" class="node">
<title>aind_behavior_vr_foraging.task_logic.RewardFunction</title>
<g id="a_node47"><a xlink:title="aind_behavior_vr_foraging.task_logic.RewardFunction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/#rootmodel&#45;and&#45;custom&#45;root&#45;types&#10;&#10;A Pydantic `BaseModel` for the root object of the model.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;root: The root object of the model.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a RootModel.&#10; &#160;&#160;&#160;__pydantic_private__: Private fields in the model.&#10; &#160;&#160;&#160;__pydantic_extra__: Extra fields in the model.&#10;">
<polygon fill="none" stroke="black" points="3727.5,-573.75 3727.5,-595.75 4089.5,-595.75 4089.5,-573.75 3727.5,-573.75"/>
<text text-anchor="start" x="3857.12" y="-580.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">RewardFunction</text>
<polygon fill="none" stroke="black" points="3727.5,-552.75 3727.5,-573.75 3756.5,-573.75 3756.5,-552.75 3727.5,-552.75"/>
<text text-anchor="start" x="3730.38" y="-557.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">root</text>
<polygon fill="none" stroke="black" points="3756.5,-552.75 3756.5,-573.75 4089.5,-573.75 4089.5,-552.75 3756.5,-552.75"/>
<text text-anchor="start" x="3759.5" y="-557.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Union[ConstantFunction, LinearFunction, PowerFunction]</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchRewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction -->
<g id="edge54" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchRewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction:w</title>
<path fill="none" stroke="black" d="M3171.92,-800.75C3365.7,-800.91 3432.36,-804.67 3606,-709.25 3668.74,-674.77 3652.42,-596.79 3711.69,-586"/>
<polyline fill="none" stroke="black" points="3162,-800.75 3167,-800.75"/>
<polyline fill="none" stroke="black" points="3167,-800.75 3172,-800.75"/>
<polyline fill="none" stroke="black" points="3726.5,-584.75 3721.52,-585.17"/>
<polygon fill="black" stroke="black" points="3720.1,-580.27 3720.94,-590.24 3718.95,-590.4 3718.11,-580.44 3720.1,-580.27"/>
<polyline fill="none" stroke="black" points="3721.52,-585.17 3716.54,-585.59"/>
<polygon fill="black" stroke="black" points="3715.12,-580.69 3715.96,-590.66 3713.97,-590.82 3713.13,-580.86 3715.12,-580.69"/>
<polyline fill="none" stroke="black" points="3716.54,-585.59 3711.55,-586.01"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchRewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction -->
<g id="edge55" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchRewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction:w</title>
<path fill="none" stroke="black" d="M3171.78,-758.78C3362.82,-759.98 3430.72,-795.3 3606,-709.25 3670.26,-677.7 3652.63,-597.21 3711.71,-586.04"/>
<polyline fill="none" stroke="black" points="3162,-758.75 3167,-758.77"/>
<polyline fill="none" stroke="black" points="3167,-758.77 3172,-758.78"/>
<polyline fill="none" stroke="black" points="3726.5,-584.75 3721.52,-585.19"/>
<polygon fill="black" stroke="black" points="3720.09,-580.29 3720.96,-590.25 3718.97,-590.43 3718.1,-580.47 3720.09,-580.29"/>
<polyline fill="none" stroke="black" points="3721.52,-585.19 3716.54,-585.62"/>
<polygon fill="black" stroke="black" points="3715.11,-580.73 3715.98,-590.69 3713.98,-590.86 3713.11,-580.9 3715.11,-580.73"/>
<polyline fill="none" stroke="black" points="3716.54,-585.62 3711.56,-586.06"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PatchRewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction -->
<g id="edge56" class="edge">
<title>aind_behavior_vr_foraging.task_logic.PatchRewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RewardFunction:w</title>
<path fill="none" stroke="black" d="M3171.84,-779.77C3364.06,-780.44 3431.68,-799.91 3606,-709.25 3669.51,-676.22 3652.52,-597 3711.7,-586.02"/>
<polyline fill="none" stroke="black" points="3162,-779.75 3167,-779.76"/>
<polyline fill="none" stroke="black" points="3167,-779.76 3172,-779.77"/>
<polyline fill="none" stroke="black" points="3726.5,-584.75 3721.52,-585.18"/>
<polygon fill="black" stroke="black" points="3720.09,-580.28 3720.95,-590.24 3718.96,-590.42 3718.1,-580.45 3720.09,-580.28"/>
<polyline fill="none" stroke="black" points="3721.52,-585.18 3716.54,-585.6"/>
<polygon fill="black" stroke="black" points="3715.11,-580.71 3715.97,-590.67 3713.98,-590.84 3713.12,-580.88 3715.11,-580.71"/>
<polyline fill="none" stroke="black" points="3716.54,-585.6 3711.55,-586.03"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.ConstantFunction -->
<g id="edge62" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.ConstantFunction:w</title>
<path fill="none" stroke="black" d="M4100.4,-563.31C4163.32,-564.15 4185.3,-572.85 4246.06,-574.1"/>
<polyline fill="none" stroke="black" points="4090.5,-563.25 4095.5,-563.28"/>
<polyline fill="none" stroke="black" points="4095.5,-563.28 4100.5,-563.32"/>
<polyline fill="none" stroke="black" points="4261,-574.25 4256,-574.2"/>
<polygon fill="black" stroke="black" points="4255.05,-569.19 4254.95,-579.19 4252.95,-579.17 4253.05,-569.17 4255.05,-569.19"/>
<polyline fill="none" stroke="black" points="4256,-574.2 4251,-574.15"/>
<polygon fill="black" stroke="black" points="4250.05,-569.14 4249.95,-579.14 4247.95,-579.12 4248.05,-569.12 4250.05,-569.14"/>
<polyline fill="none" stroke="black" points="4251,-574.15 4246,-574.1"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.LinearFunction -->
<g id="edge63" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.LinearFunction:w</title>
<path fill="none" stroke="black" d="M4100.03,-562.89C4174.63,-557.1 4182.77,-483.52 4254.34,-474.63"/>
<polyline fill="none" stroke="black" points="4090.5,-563.25 4095.5,-563.06"/>
<polyline fill="none" stroke="black" points="4095.5,-563.06 4100.49,-562.87"/>
<polyline fill="none" stroke="black" points="4269,-473.75 4264.01,-474.05"/>
<polygon fill="black" stroke="black" points="4262.71,-469.12 4263.31,-479.1 4261.31,-479.22 4260.72,-469.24 4262.71,-469.12"/>
<polyline fill="none" stroke="black" points="4264.01,-474.05 4259.02,-474.35"/>
<polygon fill="black" stroke="black" points="4257.72,-469.42 4258.32,-479.4 4256.32,-479.52 4255.72,-469.54 4257.72,-469.42"/>
<polyline fill="none" stroke="black" points="4259.02,-474.35 4254.03,-474.65"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.PowerFunction -->
<g id="node51" class="node">
<title>aind_behavior_vr_foraging.task_logic.PowerFunction</title>
<g id="a_node51"><a xlink:title="aind_behavior_vr_foraging.task_logic.PowerFunction&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="4269,-299.75 4269,-321.75 4493,-321.75 4493,-299.75 4269,-299.75"/>
<text text-anchor="start" x="4334.12" y="-306.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">PowerFunction</text>
<polygon fill="none" stroke="black" points="4269,-278.75 4269,-299.75 4352,-299.75 4352,-278.75 4269,-278.75"/>
<text text-anchor="start" x="4271.88" y="-283.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">function_type</text>
<polygon fill="none" stroke="black" points="4352,-278.75 4352,-299.75 4493,-299.75 4493,-278.75 4352,-278.75"/>
<text text-anchor="start" x="4355" y="-283.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Literal[&#39;PowerFunction&#39;]</text>
<polygon fill="none" stroke="black" points="4269,-257.75 4269,-278.75 4352,-278.75 4352,-257.75 4269,-257.75"/>
<text text-anchor="start" x="4286.88" y="-262.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">mininum</text>
<polygon fill="none" stroke="black" points="4352,-257.75 4352,-278.75 4493,-278.75 4493,-257.75 4352,-257.75"/>
<text text-anchor="start" x="4410.12" y="-262.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4269,-236.75 4269,-257.75 4352,-257.75 4352,-236.75 4269,-236.75"/>
<text text-anchor="start" x="4283.5" y="-241.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">maximum</text>
<polygon fill="none" stroke="black" points="4352,-236.75 4352,-257.75 4493,-257.75 4493,-236.75 4352,-236.75"/>
<text text-anchor="start" x="4410.12" y="-241.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4269,-215.75 4269,-236.75 4352,-236.75 4352,-215.75 4269,-215.75"/>
<text text-anchor="start" x="4307.5" y="-220.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">a</text>
<polygon fill="none" stroke="black" points="4352,-215.75 4352,-236.75 4493,-236.75 4493,-215.75 4352,-215.75"/>
<text text-anchor="start" x="4410.12" y="-220.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4269,-194.75 4269,-215.75 4352,-215.75 4352,-194.75 4269,-194.75"/>
<text text-anchor="start" x="4306.75" y="-199.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">b</text>
<polygon fill="none" stroke="black" points="4352,-194.75 4352,-215.75 4493,-215.75 4493,-194.75 4352,-194.75"/>
<text text-anchor="start" x="4410.12" y="-199.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4269,-173.75 4269,-194.75 4352,-194.75 4352,-173.75 4269,-173.75"/>
<text text-anchor="start" x="4307.12" y="-178.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">c</text>
<polygon fill="none" stroke="black" points="4352,-173.75 4352,-194.75 4493,-194.75 4493,-173.75 4352,-173.75"/>
<text text-anchor="start" x="4410.12" y="-178.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
<polygon fill="none" stroke="black" points="4269,-152.75 4269,-173.75 4352,-173.75 4352,-152.75 4269,-152.75"/>
<text text-anchor="start" x="4306.75" y="-157.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">d</text>
<polygon fill="none" stroke="black" points="4352,-152.75 4352,-173.75 4493,-173.75 4493,-152.75 4352,-152.75"/>
<text text-anchor="start" x="4410.12" y="-157.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">float</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardFunction&#45;&gt;aind_behavior_vr_foraging.task_logic.PowerFunction -->
<g id="edge64" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardFunction:e&#45;&gt;aind_behavior_vr_foraging.task_logic.PowerFunction:w</title>
<path fill="none" stroke="black" d="M4100.14,-562.81C4218.28,-551.53 4140.8,-329.18 4253.31,-311.82"/>
<polyline fill="none" stroke="black" points="4090.5,-563.25 4095.49,-563.02"/>
<polyline fill="none" stroke="black" points="4095.49,-563.02 4100.49,-562.79"/>
<polyline fill="none" stroke="black" points="4268,-310.75 4263.01,-311.11"/>
<polygon fill="black" stroke="black" points="4261.65,-306.2 4262.38,-316.17 4260.39,-316.32 4259.66,-306.35 4261.65,-306.2"/>
<polyline fill="none" stroke="black" points="4263.01,-311.11 4258.03,-311.48"/>
<polygon fill="black" stroke="black" points="4256.67,-306.56 4257.39,-316.54 4255.4,-316.68 4254.67,-306.71 4256.67,-306.56"/>
<polyline fill="none" stroke="black" points="4258.03,-311.48 4253.04,-311.84"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardSpecification&#45;&gt;aind_behavior_services.task_logic.distributions.Distribution -->
<g id="edge65" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardSpecification:e&#45;&gt;aind_behavior_services.task_logic.distributions.Distribution:w</title>
<path fill="none" stroke="black" d="M2390.45,-1053.25C2445.23,-1053.3 2465.35,-1053.68 2518.04,-1053.74"/>
<polyline fill="none" stroke="black" points="2380.5,-1053.25 2385.5,-1053.25"/>
<polyline fill="none" stroke="black" points="2385.5,-1053.25 2390.5,-1053.25"/>
<polyline fill="none" stroke="black" points="2533,-1053.75 2528,-1053.75"/>
<polygon fill="black" stroke="black" points="2527,-1048.75 2527,-1058.75 2525,-1058.75 2525,-1048.75 2527,-1048.75"/>
<polyline fill="none" stroke="black" points="2528,-1053.75 2523,-1053.74"/>
<polygon fill="black" stroke="black" points="2522,-1048.74 2522,-1058.74 2520,-1058.74 2520,-1048.74 2522,-1048.74"/>
<polyline fill="none" stroke="black" points="2523,-1053.74 2518,-1053.74"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardSpecification&#45;&gt;aind_behavior_vr_foraging.task_logic.OperantLogic -->
<g id="edge66" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardSpecification:e&#45;&gt;aind_behavior_vr_foraging.task_logic.OperantLogic:w</title>
<path fill="none" stroke="black" d="M2390.35,-1074.3C2647.07,-1077.14 2707.98,-1190.62 2960.11,-1196.05"/>
<polyline fill="none" stroke="black" points="2380.5,-1074.25 2385.5,-1074.28"/>
<polyline fill="none" stroke="black" points="2385.5,-1074.28 2390.5,-1074.31"/>
<polyline fill="none" stroke="black" points="2979,-1196.25 2974,-1196.2"/>
<polygon fill="black" stroke="black" points="2973.05,-1191.19 2972.95,-1201.19 2970.95,-1201.16 2971.05,-1191.17 2973.05,-1191.19"/>
<polyline fill="none" stroke="black" points="2974,-1196.2 2969,-1196.14"/>
<ellipse fill="none" stroke="black" cx="2964.5" cy="-1196.1" rx="4" ry="4"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.RewardSpecification&#45;&gt;aind_behavior_vr_foraging.task_logic.PatchRewardFunction -->
<g id="edge67" class="edge">
<title>aind_behavior_vr_foraging.task_logic.RewardSpecification:e&#45;&gt;aind_behavior_vr_foraging.task_logic.PatchRewardFunction:w</title>
<path fill="none" stroke="black" d="M2390.23,-1031.94C2530.16,-1023.23 2819,-835.74 2962.34,-822.94"/>
<polyline fill="none" stroke="black" points="2380.5,-1032.25 2385.5,-1032.09"/>
<polyline fill="none" stroke="black" points="2385.5,-1032.09 2390.49,-1031.93"/>
<polyline fill="none" stroke="black" points="2977,-822.25 2972.01,-822.48"/>
<polygon fill="black" stroke="black" points="2970.77,-817.54 2971.24,-827.53 2969.24,-827.62 2968.77,-817.63 2970.77,-817.54"/>
<polyline fill="none" stroke="black" points="2972.01,-822.48 2967.01,-822.72"/>
<polygon fill="black" stroke="black" points="2965.78,-817.77 2966.25,-827.76 2964.25,-827.85 2963.78,-817.86 2965.78,-817.77"/>
<polyline fill="none" stroke="black" points="2967.01,-822.72 2962.02,-822.95"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator -->
<g id="node54" class="node">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator</title>
<g id="a_node54"><a xlink:title="aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2142,-850.75 2142,-872.75 2380,-872.75 2380,-850.75 2142,-850.75"/>
<text text-anchor="start" x="2196.12" y="-857.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">VirtualSiteGenerator</text>
<polygon fill="none" stroke="black" points="2142,-829.75 2142,-850.75 2261,-850.75 2261,-829.75 2142,-829.75"/>
<text text-anchor="start" x="2144.88" y="-834.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">render_specification</text>
<polygon fill="none" stroke="black" points="2261,-829.75 2261,-850.75 2380,-850.75 2380,-829.75 2261,-829.75"/>
<text text-anchor="start" x="2263.88" y="-834.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">RenderSpecification</text>
<polygon fill="none" stroke="black" points="2142,-808.75 2142,-829.75 2261,-829.75 2261,-808.75 2142,-808.75"/>
<text text-anchor="start" x="2188.75" y="-813.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">label</text>
<polygon fill="none" stroke="black" points="2261,-808.75 2261,-829.75 2380,-829.75 2380,-808.75 2261,-808.75"/>
<text text-anchor="start" x="2273.25" y="-813.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">VirtualSiteLabels</text>
<polygon fill="none" stroke="black" points="2142,-787.75 2142,-808.75 2261,-808.75 2261,-787.75 2142,-787.75"/>
<text text-anchor="start" x="2149.75" y="-792.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">length_distribution</text>
<polygon fill="none" stroke="black" points="2261,-787.75 2261,-808.75 2380,-808.75 2380,-787.75 2261,-787.75"/>
<text text-anchor="start" x="2287.88" y="-792.45" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Distribution</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator -->
<g id="edge75" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator:w</title>
<path fill="none" stroke="black" d="M1943.77,-837.34C2023.52,-838.9 2048.86,-859.24 2126.44,-861.54"/>
<polyline fill="none" stroke="black" points="1934,-837.25 1939,-837.3"/>
<polyline fill="none" stroke="black" points="1939,-837.3 1944,-837.35"/>
<polyline fill="none" stroke="black" points="2141,-861.75 2136,-861.68"/>
<polygon fill="black" stroke="black" points="2135.07,-856.66 2134.93,-866.66 2132.93,-866.63 2133.07,-856.63 2135.07,-856.66"/>
<polyline fill="none" stroke="black" points="2136,-861.68 2131,-861.6"/>
<polygon fill="black" stroke="black" points="2130.07,-856.59 2129.93,-866.59 2127.93,-866.56 2128.07,-856.56 2130.07,-856.59"/>
<polyline fill="none" stroke="black" points="2131,-861.6 2126,-861.53"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator -->
<g id="edge76" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator:w</title>
<path fill="none" stroke="black" d="M1943.97,-858.26C2022.9,-858.49 2049.32,-861.38 2126.06,-861.72"/>
<polyline fill="none" stroke="black" points="1934,-858.25 1939,-858.26"/>
<polyline fill="none" stroke="black" points="1939,-858.26 1944,-858.26"/>
<polyline fill="none" stroke="black" points="2141,-861.75 2136,-861.74"/>
<polygon fill="black" stroke="black" points="2135.01,-856.74 2134.99,-866.74 2132.99,-866.73 2133.01,-856.73 2135.01,-856.74"/>
<polyline fill="none" stroke="black" points="2136,-861.74 2131,-861.73"/>
<polygon fill="black" stroke="black" points="2130.01,-856.73 2129.99,-866.73 2127.99,-866.72 2128.01,-856.72 2130.01,-856.73"/>
<polyline fill="none" stroke="black" points="2131,-861.73 2126,-861.72"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator -->
<g id="edge77" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGeneration:e&#45;&gt;aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator:w</title>
<path fill="none" stroke="black" d="M1943.92,-816.42C2024.78,-819.31 2047.67,-857.09 2126.22,-861.36"/>
<polyline fill="none" stroke="black" points="1934,-816.25 1939,-816.34"/>
<polyline fill="none" stroke="black" points="1939,-816.34 1944,-816.43"/>
<polyline fill="none" stroke="black" points="2141,-861.75 2136,-861.62"/>
<polygon fill="black" stroke="black" points="2135.13,-856.59 2134.87,-866.59 2132.87,-866.54 2133.14,-856.54 2135.13,-856.59"/>
<polyline fill="none" stroke="black" points="2136,-861.62 2131,-861.48"/>
<polygon fill="black" stroke="black" points="2130.14,-856.46 2129.87,-866.46 2127.87,-866.4 2128.14,-856.41 2130.14,-856.46"/>
<polyline fill="none" stroke="black" points="2131,-861.48 2126.01,-861.35"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Texture -->
<g id="node53" class="node">
<title>aind_behavior_vr_foraging.task_logic.Texture</title>
<g id="a_node53"><a xlink:title="aind_behavior_vr_foraging.task_logic.Texture&#10;&#10;Usage docs: https://docs.pydantic.dev/2.7/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="3037.5,-473.25 3037.5,-495.25 3101.5,-495.25 3101.5,-473.25 3037.5,-473.25"/>
<text text-anchor="start" x="3045.5" y="-479.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-weight="bold" font-size="14.00">Texture</text>
<polygon fill="none" stroke="black" points="3037.5,-452.25 3037.5,-473.25 3072.5,-473.25 3072.5,-452.25 3037.5,-452.25"/>
<text text-anchor="start" x="3040.38" y="-456.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="3072.5,-452.25 3072.5,-473.25 3101.5,-473.25 3101.5,-452.25 3072.5,-452.25"/>
<text text-anchor="start" x="3079.88" y="-456.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="3037.5,-431.25 3037.5,-452.25 3072.5,-452.25 3072.5,-431.25 3037.5,-431.25"/>
<text text-anchor="start" x="3044.5" y="-435.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">size</text>
<polygon fill="none" stroke="black" points="3072.5,-431.25 3072.5,-452.25 3101.5,-452.25 3101.5,-431.25 3072.5,-431.25"/>
<text text-anchor="start" x="3075.38" y="-435.95" font-family="Times New Roman,Times,Liberation Serif,serif" font-size="14.00">Size</text>
</a>
</g>
</g>
<!-- aind_behavior_vr_foraging.task_logic.Texture&#45;&gt;aind_behavior_vr_foraging.task_logic.Size -->
<g id="edge71" class="edge">
<title>aind_behavior_vr_foraging.task_logic.Texture:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Size:w</title>
<path fill="none" stroke="black" d="M3112.47,-441.76C3441.94,-442.26 3531.1,-467.49 3858.25,-468.23"/>
<polyline fill="none" stroke="black" points="3102.5,-441.75 3107.5,-441.75"/>
<polyline fill="none" stroke="black" points="3107.5,-441.75 3112.5,-441.76"/>
<polyline fill="none" stroke="black" points="3873,-468.25 3868,-468.24"/>
<polygon fill="black" stroke="black" points="3867.01,-463.24 3866.99,-473.24 3864.99,-473.24 3865.01,-463.24 3867.01,-463.24"/>
<polyline fill="none" stroke="black" points="3868,-468.24 3863,-468.24"/>
<polygon fill="black" stroke="black" points="3862.01,-463.24 3861.99,-473.24 3859.99,-473.24 3860.01,-463.24 3862.01,-463.24"/>
<polyline fill="none" stroke="black" points="3863,-468.24 3858,-468.23"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator&#45;&gt;aind_behavior_services.task_logic.distributions.Distribution -->
<g id="edge78" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator:e&#45;&gt;aind_behavior_services.task_logic.distributions.Distribution:w</title>
<path fill="none" stroke="black" d="M2390.95,-798.77C2502.61,-811.02 2412.44,-1034.27 2518.31,-1052.56"/>
<polyline fill="none" stroke="black" points="2381,-798.25 2385.99,-798.51"/>
<polyline fill="none" stroke="black" points="2385.99,-798.51 2390.99,-798.78"/>
<polyline fill="none" stroke="black" points="2533,-1053.75 2528.02,-1053.35"/>
<polygon fill="black" stroke="black" points="2527.42,-1048.28 2526.62,-1058.25 2524.62,-1058.09 2525.43,-1048.12 2527.42,-1048.28"/>
<polyline fill="none" stroke="black" points="2528.02,-1053.35 2523.03,-1052.94"/>
<polygon fill="black" stroke="black" points="2522.44,-1047.88 2521.63,-1057.85 2519.64,-1057.68 2520.45,-1047.72 2522.44,-1047.88"/>
<polyline fill="none" stroke="black" points="2523.03,-1052.94 2518.05,-1052.54"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification -->
<g id="edge79" class="edge">
<title>aind_behavior_vr_foraging.task_logic.VirtualSiteGenerator:e&#45;&gt;aind_behavior_vr_foraging.task_logic.RenderSpecification:w</title>
<path fill="none" stroke="black" d="M2390.96,-839.81C2468.8,-832.74 2453.65,-741.61 2533,-709.25 2720.67,-632.71 2788.44,-677.44 2984.53,-679.67"/>
<polyline fill="none" stroke="black" points="2381,-840.25 2386,-840.03"/>
<polyline fill="none" stroke="black" points="2386,-840.03 2390.99,-839.81"/>
<polyline fill="none" stroke="black" points="2999.5,-679.75 2994.5,-679.72"/>
<polygon fill="black" stroke="black" points="2993.53,-674.72 2993.47,-684.72 2991.47,-684.7 2991.53,-674.7 2993.53,-674.72"/>
<polyline fill="none" stroke="black" points="2994.5,-679.72 2989.5,-679.69"/>
<polygon fill="black" stroke="black" points="2988.53,-674.69 2988.47,-684.69 2986.47,-684.68 2986.53,-674.68 2988.53,-674.69"/>
<polyline fill="none" stroke="black" points="2989.5,-679.69 2984.5,-679.66"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.WallTextures&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture -->
<g id="edge82" class="edge">
<title>aind_behavior_vr_foraging.task_logic.WallTextures:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture:w</title>
<path fill="none" stroke="black" d="M2316.4,-483.75C2627.69,-483.76 2712.74,-484.23 3021.62,-484.25"/>
<polyline fill="none" stroke="black" points="2306.5,-483.75 2311.5,-483.75"/>
<polyline fill="none" stroke="black" points="2311.5,-483.75 2316.5,-483.75"/>
<polyline fill="none" stroke="black" points="3036.5,-484.25 3031.5,-484.25"/>
<polygon fill="black" stroke="black" points="3030.5,-479.25 3030.5,-489.25 3028.5,-489.25 3028.5,-479.25 3030.5,-479.25"/>
<polyline fill="none" stroke="black" points="3031.5,-484.25 3026.5,-484.25"/>
<polygon fill="black" stroke="black" points="3025.5,-479.25 3025.5,-489.25 3023.5,-489.25 3023.5,-479.25 3025.5,-479.25"/>
<polyline fill="none" stroke="black" points="3026.5,-484.25 3021.5,-484.25"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.WallTextures&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture -->
<g id="edge83" class="edge">
<title>aind_behavior_vr_foraging.task_logic.WallTextures:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture:w</title>
<path fill="none" stroke="black" d="M2316.41,-504.74C2627.81,-504.34 2712.62,-484.87 3021.61,-484.26"/>
<polyline fill="none" stroke="black" points="2306.5,-504.75 2311.5,-504.75"/>
<polyline fill="none" stroke="black" points="2311.5,-504.75 2316.5,-504.74"/>
<polyline fill="none" stroke="black" points="3036.5,-484.25 3031.5,-484.25"/>
<polygon fill="black" stroke="black" points="3030.5,-479.26 3030.5,-489.26 3028.5,-489.26 3028.5,-479.26 3030.5,-479.26"/>
<polyline fill="none" stroke="black" points="3031.5,-484.25 3026.5,-484.26"/>
<polygon fill="black" stroke="black" points="3025.5,-479.26 3025.5,-489.26 3023.5,-489.26 3023.5,-479.26 3025.5,-479.26"/>
<polyline fill="none" stroke="black" points="3026.5,-484.26 3021.5,-484.26"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.WallTextures&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture -->
<g id="edge84" class="edge">
<title>aind_behavior_vr_foraging.task_logic.WallTextures:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture:w</title>
<path fill="none" stroke="black" d="M2316.41,-462.76C2627.83,-463.18 2712.61,-483.6 3021.61,-484.23"/>
<polyline fill="none" stroke="black" points="2306.5,-462.75 2311.5,-462.75"/>
<polyline fill="none" stroke="black" points="2311.5,-462.75 2316.5,-462.76"/>
<polyline fill="none" stroke="black" points="3036.5,-484.25 3031.5,-484.24"/>
<polygon fill="black" stroke="black" points="3030.51,-479.24 3030.49,-489.24 3028.49,-489.24 3028.51,-479.24 3030.51,-479.24"/>
<polyline fill="none" stroke="black" points="3031.5,-484.24 3026.5,-484.24"/>
<polygon fill="black" stroke="black" points="3025.51,-479.24 3025.49,-489.24 3023.49,-489.24 3023.51,-479.24 3025.51,-479.24"/>
<polyline fill="none" stroke="black" points="3026.5,-484.24 3021.5,-484.23"/>
</g>
<!-- aind_behavior_vr_foraging.task_logic.WallTextures&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture -->
<g id="edge85" class="edge">
<title>aind_behavior_vr_foraging.task_logic.WallTextures:e&#45;&gt;aind_behavior_vr_foraging.task_logic.Texture:w</title>
<path fill="none" stroke="black" d="M2316.42,-441.76C2628.21,-442.6 2712.23,-482.96 3021.6,-484.22"/>
<polyline fill="none" stroke="black" points="2306.5,-441.75 2311.5,-441.76"/>
<polyline fill="none" stroke="black" points="2311.5,-441.76 2316.5,-441.76"/>
<polyline fill="none" stroke="black" points="3036.5,-484.25 3031.5,-484.24"/>
<polygon fill="black" stroke="black" points="3030.51,-479.24 3030.49,-489.24 3028.49,-489.23 3028.51,-479.23 3030.51,-479.24"/>
<polyline fill="none" stroke="black" points="3031.5,-484.24 3026.5,-484.23"/>
<polygon fill="black" stroke="black" points="3025.51,-479.23 3025.49,-489.23 3023.49,-489.22 3023.51,-479.22 3025.51,-479.23"/>
<polyline fill="none" stroke="black" points="3026.5,-484.23 3021.5,-484.22"/>
</g>
</g>
</svg>
